node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/cond/Switch"
  op: "Switch"
  input: "global_step/IsVariableInitialized"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_t"
  op: "Identity"
  input: "global_step/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_f"
  op: "Identity"
  input: "global_step/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/pred_id"
  op: "Identity"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read"
  op: "Identity"
  input: "global_step/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read/Switch"
  op: "RefSwitch"
  input: "global_step"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Switch_1"
  op: "Switch"
  input: "global_step/Initializer/zeros"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Merge"
  op: "Merge"
  input: "global_step/cond/Switch_1"
  input: "global_step/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "Add"
  input: "global_step/cond/Merge"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tensors/component_0"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 15000
      }
    }
  }
}
node {
  name: "seed"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "seed2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "count"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 25
      }
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 20
      }
    }
  }
}
node {
  name: "Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 1
          }
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "Const_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Const_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
      }
    }
  }
}
node {
  name: "Const_3"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 1
          }
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "Const_4"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 1
          }
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "padding_value"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "<pad>"
      }
    }
  }
}
node {
  name: "padding_value_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "padding_value_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "<pad>"
      }
    }
  }
}
node {
  name: "padding_value_3"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "padding_value_4"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "O"
      }
    }
  }
}
node {
  name: "drop_remainder"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "buffer_size_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "optimizations"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 3
          }
        }
        string_val: "map_and_batch_fusion"
        string_val: "noop_elimination"
        string_val: "shuffle_and_repeat_fusion"
      }
    }
  }
}
node {
  name: "IteratorV2"
  op: "IteratorV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "TensorDataset"
  op: "TensorDataset"
  input: "tensors/component_0"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_INT32
      }
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "FlatMapDataset"
  op: "FlatMapDataset"
  input: "TensorDataset"
  attr {
    key: "Targuments"
    value {
      list {
      }
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "f"
    value {
      func {
        name: "Dataset_flat_map_flat_map_fn_21"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
      }
    }
  }
}
node {
  name: "ShuffleDataset"
  op: "ShuffleDataset"
  input: "FlatMapDataset"
  input: "buffer_size"
  input: "seed"
  input: "seed2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
      }
    }
  }
  attr {
    key: "reshuffle_each_iteration"
    value {
      b: true
    }
  }
}
node {
  name: "RepeatDataset"
  op: "RepeatDataset"
  input: "ShuffleDataset"
  input: "count"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
      }
    }
  }
}
node {
  name: "PaddedBatchDatasetV2"
  op: "PaddedBatchDatasetV2"
  input: "RepeatDataset"
  input: "batch_size"
  input: "Const"
  input: "Const_1"
  input: "Const_2"
  input: "Const_3"
  input: "Const_4"
  input: "padding_value"
  input: "padding_value_1"
  input: "padding_value_2"
  input: "padding_value_3"
  input: "padding_value_4"
  input: "drop_remainder"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
      }
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "PrefetchDataset"
  op: "PrefetchDataset"
  input: "PaddedBatchDatasetV2"
  input: "buffer_size_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
      }
    }
  }
}
node {
  name: "OptimizeDataset"
  op: "OptimizeDataset"
  input: "PrefetchDataset"
  input: "optimizations"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
      }
    }
  }
}
node {
  name: "ModelDataset"
  op: "ModelDataset"
  input: "OptimizeDataset"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
      }
    }
  }
}
node {
  name: "MakeIterator"
  op: "MakeIterator"
  input: "ModelDataset"
  input: "IteratorV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "IteratorV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "IteratorV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
      }
    }
  }
}
node {
  name: "string_to_index/hash_table/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "string_to_index/hash_table"
  op: "HashTableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "key_dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "hash_table_../dev/vocab.words.txt_-2_-1"
    }
  }
  attr {
    key: "use_node_name_sharing"
    value {
      b: false
    }
  }
  attr {
    key: "value_dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "string_to_index/hash_table/table_init/asset_filepath"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "../dev/vocab.words.txt"
      }
    }
  }
}
node {
  name: "string_to_index/hash_table/table_init"
  op: "InitializeTableFromTextFileV2"
  input: "string_to_index/hash_table"
  input: "string_to_index/hash_table/table_init/asset_filepath"
  attr {
    key: "delimiter"
    value {
      s: "\t"
    }
  }
  attr {
    key: "key_index"
    value {
      i: -2
    }
  }
  attr {
    key: "value_index"
    value {
      i: -1
    }
  }
  attr {
    key: "vocab_size"
    value {
      i: -1
    }
  }
}
node {
  name: "string_to_index_1/hash_table/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "string_to_index_1/hash_table"
  op: "HashTableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "key_dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "hash_table_../dev/vocab.chars.txt_-2_-1"
    }
  }
  attr {
    key: "use_node_name_sharing"
    value {
      b: false
    }
  }
  attr {
    key: "value_dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "string_to_index_1/hash_table/table_init/asset_filepath"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "../dev/vocab.chars.txt"
      }
    }
  }
}
node {
  name: "string_to_index_1/hash_table/table_init"
  op: "InitializeTableFromTextFileV2"
  input: "string_to_index_1/hash_table"
  input: "string_to_index_1/hash_table/table_init/asset_filepath"
  attr {
    key: "delimiter"
    value {
      s: "\t"
    }
  }
  attr {
    key: "key_index"
    value {
      i: -2
    }
  }
  attr {
    key: "value_index"
    value {
      i: -1
    }
  }
  attr {
    key: "vocab_size"
    value {
      i: -1
    }
  }
}
node {
  name: "string_to_index_1_Lookup/hash_bucket"
  op: "StringToHashBucketFast"
  input: "IteratorGetNext:2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "num_buckets"
    value {
      i: 1
    }
  }
}
node {
  name: "string_to_index_1_Lookup/hash_table_Lookup"
  op: "LookupTableFindV2"
  input: "string_to_index_1/hash_table"
  input: "IteratorGetNext:2"
  input: "string_to_index_1/hash_table/Const"
  attr {
    key: "Tin"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "string_to_index_1_Lookup/hash_table_Size"
  op: "LookupTableSizeV2"
  input: "string_to_index_1/hash_table"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "string_to_index_1_Lookup/Add"
  op: "Add"
  input: "string_to_index_1_Lookup/hash_bucket"
  input: "string_to_index_1_Lookup/hash_table_Size"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "string_to_index_1_Lookup/NotEqual"
  op: "NotEqual"
  input: "string_to_index_1_Lookup/hash_table_Lookup"
  input: "string_to_index_1/hash_table/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "string_to_index_1_Lookup"
  op: "Select"
  input: "string_to_index_1_Lookup/NotEqual"
  input: "string_to_index_1_Lookup/hash_table_Lookup"
  input: "string_to_index_1_Lookup/Add"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "chars_embeddings/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "$\000\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "chars_embeddings/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.21004201471805573
      }
    }
  }
}
node {
  name: "chars_embeddings/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.21004201471805573
      }
    }
  }
}
node {
  name: "chars_embeddings/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "chars_embeddings/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 36
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "chars_embeddings/Initializer/random_uniform/sub"
  op: "Sub"
  input: "chars_embeddings/Initializer/random_uniform/max"
  input: "chars_embeddings/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "chars_embeddings/Initializer/random_uniform/mul"
  op: "Mul"
  input: "chars_embeddings/Initializer/random_uniform/RandomUniform"
  input: "chars_embeddings/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 36
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "chars_embeddings/Initializer/random_uniform"
  op: "Add"
  input: "chars_embeddings/Initializer/random_uniform/mul"
  input: "chars_embeddings/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 36
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "chars_embeddings"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 36
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 36
        }
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "chars_embeddings/Assign"
  op: "Assign"
  input: "chars_embeddings"
  input: "chars_embeddings/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 36
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "chars_embeddings/read"
  op: "Identity"
  input: "chars_embeddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 36
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "embedding_lookup/axis"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "embedding_lookup"
  op: "GatherV2"
  input: "chars_embeddings/read"
  input: "string_to_index_1_Lookup"
  input: "embedding_lookup/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "embedding_lookup/Identity"
  op: "Identity"
  input: "embedding_lookup"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "dropout/dropout/rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "dropout/dropout/Shape"
  op: "Shape"
  input: "embedding_lookup/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dropout/dropout/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout/dropout/sub"
  op: "Sub"
  input: "dropout/dropout/sub/x"
  input: "dropout/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dropout/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dropout/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dropout/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dropout/dropout/random_uniform/sub"
  op: "Sub"
  input: "dropout/dropout/random_uniform/max"
  input: "dropout/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dropout/dropout/random_uniform/mul"
  op: "Mul"
  input: "dropout/dropout/random_uniform/RandomUniform"
  input: "dropout/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "dropout/dropout/random_uniform"
  op: "Add"
  input: "dropout/dropout/random_uniform/mul"
  input: "dropout/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "dropout/dropout/add"
  op: "Add"
  input: "dropout/dropout/sub"
  input: "dropout/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "dropout/dropout/Floor"
  op: "Floor"
  input: "dropout/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "dropout/dropout/truediv"
  op: "RealDiv"
  input: "embedding_lookup/Identity"
  input: "dropout/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "dropout/dropout/mul"
  op: "Mul"
  input: "dropout/dropout/truediv"
  input: "dropout/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "SequenceMask/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "SequenceMask/Max"
  op: "Max"
  input: "IteratorGetNext:3"
  input: "SequenceMask/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SequenceMask/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "SequenceMask/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SequenceMask/Range"
  op: "Range"
  input: "SequenceMask/Const_1"
  input: "SequenceMask/Max"
  input: "SequenceMask/Const_2"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "SequenceMask/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "SequenceMask/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:3"
  input: "SequenceMask/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "SequenceMask/Cast"
  op: "Cast"
  input: "SequenceMask/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "SequenceMask/Less"
  op: "Less"
  input: "SequenceMask/Range"
  input: "SequenceMask/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Shape"
  op: "Shape"
  input: "dropout/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice"
  op: "StridedSlice"
  input: "Shape"
  input: "strided_slice/stack"
  input: "strided_slice/stack_1"
  input: "strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_1"
  op: "StridedSlice"
  input: "Shape"
  input: "strided_slice_1/stack"
  input: "strided_slice_1/stack_1"
  input: "strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "mul"
  op: "Mul"
  input: "strided_slice"
  input: "strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "strided_slice_2/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_2"
  op: "StridedSlice"
  input: "Shape"
  input: "strided_slice_2/stack"
  input: "strided_slice_2/stack_1"
  input: "strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Reshape/shape/2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Reshape/shape"
  op: "Pack"
  input: "mul"
  input: "strided_slice_2"
  input: "Reshape/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Reshape"
  op: "Reshape"
  input: "SequenceMask/Less"
  input: "Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "ToFloat"
  op: "Cast"
  input: "Reshape"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Reshape_1/shape/2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Reshape_1/shape"
  op: "Pack"
  input: "mul"
  input: "strided_slice_2"
  input: "Reshape_1/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Reshape_1"
  op: "Reshape"
  input: "dropout/dropout/mul"
  input: "Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "mul_1"
  op: "Mul"
  input: "Reshape_1"
  input: "ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "conv1d/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000d\000\000\0002\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1154700517654419
      }
    }
  }
}
node {
  name: "conv1d/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1154700517654419
      }
    }
  }
}
node {
  name: "conv1d/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1d/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 100
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv1d/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv1d/kernel/Initializer/random_uniform/max"
  input: "conv1d/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "conv1d/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv1d/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv1d/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 100
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "conv1d/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv1d/kernel/Initializer/random_uniform/mul"
  input: "conv1d/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 100
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "conv1d/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 100
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 100
        }
        dim {
          size: 50
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d/kernel/Assign"
  op: "Assign"
  input: "conv1d/kernel"
  input: "conv1d/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 100
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d/kernel/read"
  op: "Identity"
  input: "conv1d/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 100
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "conv1d/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 50
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 50
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d/bias/Assign"
  op: "Assign"
  input: "conv1d/bias"
  input: "conv1d/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d/bias/read"
  op: "Identity"
  input: "conv1d/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "conv1d/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d/conv1d/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d/conv1d/ExpandDims"
  op: "ExpandDims"
  input: "mul_1"
  input: "conv1d/conv1d/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "conv1d/conv1d/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv1d/conv1d/ExpandDims_1"
  op: "ExpandDims"
  input: "conv1d/kernel/read"
  input: "conv1d/conv1d/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 100
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "conv1d/conv1d/Conv2D"
  op: "Conv2D"
  input: "conv1d/conv1d/ExpandDims"
  input: "conv1d/conv1d/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: -1
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d/conv1d/Squeeze"
  op: "Squeeze"
  input: "conv1d/conv1d/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "conv1d/BiasAdd"
  op: "BiasAdd"
  input: "conv1d/conv1d/Squeeze"
  input: "conv1d/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "mul_2"
  op: "Mul"
  input: "conv1d/BiasAdd"
  input: "ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "sub"
  op: "Sub"
  input: "sub/x"
  input: "ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Min/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "Min"
  op: "Min"
  input: "mul_2"
  input: "Min/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "mul_3"
  op: "Mul"
  input: "sub"
  input: "Min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "add"
  op: "Add"
  input: "mul_2"
  input: "mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "Max/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "Max"
  op: "Max"
  input: "add"
  input: "Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice_3/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_3"
  op: "StridedSlice"
  input: "Shape"
  input: "strided_slice_3/stack"
  input: "strided_slice_3/stack_1"
  input: "strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_4/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_4"
  op: "StridedSlice"
  input: "Shape"
  input: "strided_slice_4/stack"
  input: "strided_slice_4/stack_1"
  input: "strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Reshape_2/shape/2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 50
      }
    }
  }
}
node {
  name: "Reshape_2/shape"
  op: "Pack"
  input: "strided_slice_3"
  input: "strided_slice_4"
  input: "Reshape_2/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Reshape_2"
  op: "Reshape"
  input: "Max"
  input: "Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "string_to_index_Lookup/hash_bucket"
  op: "StringToHashBucketFast"
  input: "IteratorGetNext"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "num_buckets"
    value {
      i: 1
    }
  }
}
node {
  name: "string_to_index_Lookup/hash_table_Lookup"
  op: "LookupTableFindV2"
  input: "string_to_index/hash_table"
  input: "IteratorGetNext"
  input: "string_to_index/hash_table/Const"
  attr {
    key: "Tin"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "string_to_index_Lookup/hash_table_Size"
  op: "LookupTableSizeV2"
  input: "string_to_index/hash_table"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "string_to_index_Lookup/Add"
  op: "Add"
  input: "string_to_index_Lookup/hash_bucket"
  input: "string_to_index_Lookup/hash_table_Size"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "string_to_index_Lookup/NotEqual"
  op: "NotEqual"
  input: "string_to_index_Lookup/hash_table_Lookup"
  input: "string_to_index/hash_table/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "string_to_index_Lookup"
  op: "Select"
  input: "string_to_index_Lookup/NotEqual"
  input: "string_to_index_Lookup/hash_table_Lookup"
  input: "string_to_index_Lookup/Add"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Variable/initial_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 66
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 66
          }
          dim {
            size: 300
          }
        }
        tensor_content: "\310$\343=\'\332\325>;\344\006\277\306\212Z=\314b\">E\022\275>\014\007\002>\276\366\014\276[\"W\275\233\346\025@\033\365\320\275\r\253\230>V\324\000?|\325\n\276\021\344\000\276\n\364I=?\254\267\275Q\240\027?\301\247\271\275\200+\251>\022l\334<\344\330:\275$\013\030\276\241\326\364>\363\216\303\276\376}f\276\2610\304\274\315\344\233\276\214\271k?\200H\357\276EG\322\276_F\361>\376\016\245>\362^5\276\r\216\202\276\\v\210\273\031\004\326=\326\3423>\335\"0\275\275\030J\2769\356T\275\333\026E>K\345\215\276\256\266\202>\014\345\204>\354\300\t?JA\027\276m9\247\276\304\006\213<\n\200\321\276\361\272\376=\331\'\200=\t\026\'\276\3127;\276~R\355=k+\026>\370\031\267\276OX\022\277F%\245>8\370\"\276\207m\253\275\376}.\277 )\202\276\210\327\225=\314\231\255\275J{3\277\225H\"\276\322\373\306\275\345\206\225\273\202\312\350>@\366:\275\362A/>G\347|=\n\272}=\251M\354>$\177\000?\257|\266>\352!\332=\334F\323\276iR\032?y@Y\274O\224\004\275,\324\332=\351GC\274,\237E>M2r\276\376\016E>l\317D\277\355d0?t\322\373=\252\271\334<\200H\377\275\303d\372\276G\003\270>\241\276\345=\322\343W>[_\244>\203\031\263=^\240\244\275\261S,\275:z\\\276\325>]\275\364l\326\275*\306Y\276\020\222\005?\270u\367\275D\335\207<\275:\267\276\345\362_\275Hm\002>F\013\320\274\354/\253\276\373\256(?\322:\372\276e\344\014>\017\321\350\275|\n@\276:;\271\275-\010\245=\336T$\276\023IT>5\357\250\276\350\237`>\030!<\276\231\365:?l\262\246>\223p\241\274~Rm\276\013^\244\276\243\036\342\275:\2571\276\243YY=\213q\006\277Q\210`>\237\216\327>\024y\n\277g\017\244\276\361FF\276n2\212\27537\277\275\335\265 \300\371\240G>zVR=*:\022\276|,\235\276=\']\276.\377\341\276N\227\005>\366#E\276<\275\022\277e6h\276\366\227\335=b\241\226\276\206\033\200>S\\u\276\0326J<L\211\344=Sy\253\276%\006\001\275\347\306\224\276 $\353\276\'NN>\007\353\177\276H\341\032\276\277\267\371\276\324\202\327\275\016\241\312>\036\247\010\276\340g<>\025\032\010\275:#J\276\342\222C\276\3230\234=\342\257\t\277\310^\017\276\214\240\261\275\246Dr\276g,\232\275\371\370\244=\351\361\033>\316\210\262\275%;\246\276\251\274\r\277\314bB\276\262\364a>\271\300\n<U1U\275\273\362\031>\314yF\274;\035\310<\204\331\244\275\002d(\275?5\256\276\310\352\016\277\326\255\316>\310\265\321>(a&>Z\201\241\276\374\034\037\275\242(\020\276\344,L>\336\216\240\276T\000,\276\252\361\322<|\233~\274/%\334;@\370\260=\371\240\247\275\033\r\000>\204\022\226\27633\363\275\245\024\264\276\031s7>\357r\301\276\314\r\206<\303\201\000?\234\334\277\276h\\\370=m\305\216\276Ou\010\275\312\032U\2765|\253=\\\311N>\245\367\r>=\'\375=\261\371\370\275\313\234\006?\272\332\n>\333\334\030\276\225H\"\276vT\305\276\257\376x\272\375w\216;\217\212\177\275$|\357;gaO\276\233\017\276\273\203i\020\277\035!\203\274G\217\017?\334K\312>n\335\315\275\3122\264>\345\'\245>\313\333\301\276\324\027x;\341\356l=\233\220\326\2745A\324=\220\210!?\350\244\367\275T\035\222\276p\010\325=;\031|>s\235\006>\225`Q\276\206 G\276F\353\330\276\025\037_\275\245N\240>V\330\014=i\251\024?\367\352\303=]mE<\010!\300=\371f\333=\352\347->\255i\036>\336\253\206>Z\022\000\276\251\301\364\275\301V\211\276\333\3041\277\351\016\002\277\311\000\320<T\253\257<O\0366>\\U\366\276\3168\215<\204\360(>\216\006p>n\243\261\276\225+\374\275XV\332\276\363\002\354\275h\256\203\276\234\334O>\203\206\316\276\356\351*\275\2240\303>\317\203\273\274>=6<j\243\272\274\032P\357<p\0105>J)(>\n\205h\276\300\225l\276\202\211\344:\352\353\371<\347\000\001\276R~r>\204\330\231\276\203\241\016\275P\374\030>\340\016\024\275\364\340\356\274\333\333-=g{t\274<\275\036@{\210\006>\265\025;>A\016J>|\362\360\275\337\340K\2768\300\314\275\211\nU\274\277e^?@\373\201\276~WD\275\307\241~=\310\263\213\275\312\376\271=\224\373=>\324\267\354\276\372\'\230\275\266\020\344\275d\2221\276\311Y ?\217S\014\277\265lm\276:\351]>h?r>3(d;\347\000a>/O\247=\307\017\225=\354\372\245>RI=>H\373\237\275w\363\324\275,\361\200>\344\367\246\276P\215W>UM0>\210\327\025>\243\001|\276\225+\374\275\023\364\227<p\0105\276\243\254_=\357\215\241<I\364\022\276N{\312\275N(D>\254\034:\276\036\200\036\274a\303\223\276\357\217\247>\333\370\263=)\263!>\3171\030\277\321W\320\276\033\365\320=1\224S>\267\234\233\276y#3\276\203/,>k\202\010>(\233R>b\022\256<\023It>\311\223\014?t$\327\275,\232\316=Sx\020\275\314\227\327>;\304?\275\201\t\234=\231\201\n?D\242\020=!\005\257\275\005\206l\276%\224~=\270u\027\276\226\354X\276\307.1\276JF\256\276vl\004?. t=t^\003\276\245\2035>\334A\221\2732\346\016>\333m7\276\322:\n>\013\322\234\276\341E\317\276\333\303\276=\335\351\216\275U0\352\275\037K\037>L7)\276\260\270\356\2730\273\347>=a\351\276\021\036m>\276\207\253\276\310C\037=z\245\274>\364\212\'\274\314\177\250\276t\0079?\rTF\276\217\252\206>&\250\241=\217\374\241=D\300a>r\277\323\276\222 \334\274g\013\210=Ttd\276>u\254<\307\326\263\275u\345\023?y\314\200\275\026\336\345=\200\202\233\276E\201\336\276\372\270v\276\000\343\331\275\271p\340\275uv\022\276\"q\317\275\202\377M>\235\200&\276\200\324\206\276N\321\221\276\243\351\014\276\324*\372<~\035\010\300\233 j>\326\034`\276\035\036\302\275\346\257\220\275\242\264\247\276e\337\225=;6\202>\305Y\221<\222\263P\276h\005F=\347\337\256\275$\'S\275~\310\333<!\002\216\274\013)\277>\264\037\211\275\2505M\2760\324a\275\000W\022\276\007\360\326\276\017\264\">\354L\261\276\377\t.\276@\023\341\275\2608\214\276:\257\001?\245\240\353\276\230\027\000>\236\265\273\275;\000\242=\306\211\217=S\256P>\007\013\247\274;R\235\275\264\216\352\275d#p\276\n\236\242=\006\205\301=\340-\320=\253\004\253=\236)\264\275\034%\237\276\266\333.\276Mj\210=YM\267=\254\220\202><1\013\276G<\331<y\352\261=\265T\256>\211\014+<$\271\034>\352\354\224\276m\306\211=\rqL>\207\026\331=\005\335\336=`\260\233<*\251\343>`\253$>\330\360t\276\257_0>\351a\350<u\004\260=\355\266K\275\253F\n\274v\030\223\274.\034\010?\253\225\371\276\355dP>\r\246\321\276S\256\360=b\326\333\276\255\3356>\260 \335>\n\244\037<t)\216>\214\271\013\277\373?\207\276\000\256$\2760\360\214>%u\002\276\2610\304<\3711\306>0\236\361\276\014\2569\275\217\337[=\371\017\351\275\245,\363\276n\300\'\276=\234\240\275*\3069>\230Q\014\276mow\275\n\364i>\3127\033>E\rV\277V\361f\276\274\\\304>t$w>$\320 =\016\241j>yu\216>\344\024\275\276\263\265\376=0\022\232\276\023D\335\275\236`\377\274\320D\370>\202\312\230\276=D#\276(CU=\022\335s=\035U\r\276\031\377\036>[\224y\276\323\207N\2769\271_>B\317\016?L\213\372<\237Y\"?\252\273\222=6\037\327\275\343S`>28*>\315#\377=*\035\354>0\201\013?\313J\323=(~\334\276\024\005z\276U\2442\277d\351\363\276\213S\215\275\350\202Z\276&\0319>\261\341i\275q\253\300=\267z\316=g,\032>\315\001\002\276P\252\375\275\366\264\223\276}<4=/\027\201\276\270<\326\272\364\0254\277\nj8=\226[\232>\215z\210\276yxO\274W\262\223\276\272fr\276\273\'\317=\257B\n>\316\210\262\276VH9\276\330\365+>\346\256E\276\254s\214\275)\355\355>\265O\007>*t>>\n\235\027\275\010\346\250>\007\3606>\223\000\205\276\216;\205\276\301\250$@ep\204\276\0054)\277:\347\247=i\031)<\271S\372\275\344\001\033<\315\221\265\275fk\025?\302\022\217\274\000\035\266\276\001\207\320\275\331\265}=\026\030\022\276\325\225\317\276\005\300\230>\207\334\314=\324\n\023=h\263j>\373\005\233>\337\370:\276\316\272\220\272\027\016\204>\204\271]\275pB!>>!{=\261\341\231\2765\265\254>\362\352\314>\037\367-=\363\253\231\276\277\362\200=\376\272\223=\"oy=(\016\200\275[\323\214>8\204\n\276vO^\276~:\236<\021r\036==\'\375\275G \236\275g\325\347\275\000\221\276\275\240O\264>\313\241E>\364QF=\257\316Q\276\311\311\304=\205^\237=\277+\302\276\0358\347=\010=;\276\330\266h\275\352\347\275>^\205\244>2Z\'\276\265\025\233\276\"qO>\225\267C\276\177L+\275\205{\305=\002e\223>\246\355_>|a\362=\007\010\026\277F\231\255=&\032$=By\037=1\335\332\271&\344\003>r\305\005=\303\273\214>\252`\244>\210.\350=\321\350n>\227\220O\276_FA\277\201\t\\\276Z\360\342=i\251\374\275\241\271.\277\371N\354>\303\273<\276?\214\320\276\177M\226>\327\335<>fI@=q=*\2767\211\221>\212u\312=\222\263\020>{\233#<\2717\237\275[\262*\275\264q$\276\322:*?\313\020\307>8\021}=\205\316k\276=E\256\275\211$\032>k\202\000?\3025w\275&\261\377;v\246\320\275\"\211>>f1\361=\375\202\035\276\241g3>K<\260>Mi}=\217oo\275\344,L>\020\006~>\001\244\366\275,\324z>\336\002i\276\317\2376\275\307\020\240\275\300\354\276\2765)\205\276H\026\240\276{\024\356>\376H\021\276\005\244\275\275X8\211=\324+e>#\363\000?\225\237\324\276\365\361\020\275R\270\216\277\020;\323=\2176\316=:#\212>\2614\260\275\326n;\276\370S\343\275\242\321\255>j\030\036\276^-w\275\236\265\233\275\216X\273>\315\344\233=\201>\021>\202\342\207\275\236\357\327\276\024\"0\277\236^)>\351}#\276\342\254\250\275E\330\300\276\353\220\033>\330*!\276~\305\232=$d\300\275\206\217\010\277\3171\200>;\3745\276}y\021?\324\234\274<,\237\005\276\260\376o\276-x\021\276\367\307\273\276\261\371`\277T:8\276\016\363\035?_\266]\275__+\275=,\344>m\037\222=X\214:<\267\177\005\276\n\274\023\275m\035\274\275\004s\224>{1\264>\232\265\224<~t\212\276\305\346\303\276)y\325\276c\n\266=L\340\306\276\1774\274=6v)\276\317,\t>\323M\002>E*\234\276\320\013\267\275\314(v>i\343\230\276\264\260\'\274\034\3558<r\211#=\226\225f>5$n\274?\214\020\276%\257\316\275\"T\351\275d\006\332\276\264v\033\276k+\326\276v6\304=\331\231\322\276X\255\234>\177\336\204>_\265\362\275Z\360\202\275V}.\277\247\221\246\276\331Z\237\276\024\256\207>V}.\276&\337\014\276Z\236\007\276\263\\\226\275V\327\241\275\277\202\224=D3\217=\204\201\227>7\340\243\276\"\341\273=\37459\2762\221\222=\303\201P\276\374\000D\276>{\256\275\371I\365\276\256\274\204=I._\276\247\\\301\275\326\213\t?Y5\010<xbv>\231c9=Dn\246\275\265\300\036\275}?\365=\356\224\316\275gDi\276K\310\207\275\234j\215\275\205w\211>\237\260$\276:\006$\276\225\016\206>\311\260\n\277\213\340\377<Y\372\020>@\207\031>p\261\242\276\310^O>\233:O\275\240\246\026>\004\216\204\274B\231\206=\201?\234\275`\310\272\276%]\343>J\225\210\275Ae\354>}\257!=\006\201\345\276m\255\317\276bJ\004>b\300\022=\316\304\364\274\032\024\315<\255/\202>\304\261.>\014\037q>\373t\354>\346\353\222\275Hm\342=\3328\002\277\325[#>.\034H\276\250\251e>\330\274\312\275\235.\233\276K\310\007>G\217\037>\037\272`>0\241\202\274pjj>\240\246\026\276\201\354\325\276}\226G\276(\361y=\260Vm=?RL?\002\331\373\2769\361\325<\215\234%>0\365\223>\364{,\273\355\236<\276\271\307\262\275B>\350?\"q\017\276q\311q>8 \370\273\2068\346\276\221\235\267\275\375\023\214>\024\313M>H\227\355\273\324_\257=\210,\322\274S\007\231=\017\227\354\276(C\225\275{\210&\276\377x\337>\377[i\276~\0350?fNW=\240\3402?\002\274\205\276y#S\276\263$\020\277\351e,?\013\322<?\272\203\020?h\262\177\275w\0252>\301s\337\276\273\355\222\276\254\342\335\276/\014\242\273\007\353\037>\232\224\262\276!\002\276>X\220\346=r\341\200>4H\001\275\323\331\231>Lq\345>C7{\274\344\017&>\260\033\366\276\214\022\224=w\363\034?Z\360\262>4.\\>!\"\225\275\2279]\276oy\366\273a\246\215>e\336\212\275N\013N?\305\347\216\275\344\203\236\274\232\006\245\275\325\003f\274E\3300\276,\324\272\276\3501\n=\340\326\315\276\320\233\332\276\257\231\034\276\366\227\215\276B\316{\274\n\277t>q\311\241\276\316q\356\274N\356W\276\3269v\277e\374#\277\326\250G>~r\224\274\373\346\376<U\207\014?\3436\232\276\"\303\002\277\314\227\267\276(\n\224>\006C\200\271<\203\006>\251\336\252>\341\264\340=s\235\306\276m9\327=\025<\305\275\254\213\233\276#\025\006\277;p\236?Sy\373=\303\237\241\275N(\004\276\302\027\226\276&\031\001?\260\376\357>\001\030\257>=\233U>\221aU\276\037\364\014>\325\347\312\276\230\206A>\"8\256<\276M\217>N\232\246=\003\262\327\275\374\373,\276b\370H\276\267\321\260>\263\n\233=Q\203)>\3024l>\"\340H\277\207m\253>\036\334=>M/\261<\350\023y>\332U(>\027\267Q\276s\021\237>\360\277\225\276\r\375\263\276k}\221>\037\364\274\276\001\244.\277\002\267\316>\217\306\301=\253>W>\332rN\276\236{\017\277\314]K\276\201C(<Z\365\t?i:\373\275y#s=q\003\016?\354\335\237\276\345\325\371>\001\244\366\275\"q\357>1|\004\276%@\315>\324\271\242<\250\030\227\276\252`\204\276X\347\230\275|a\222>`\345\240>\275:\307;;\252Z\276s\236\261\274\034\375;:\2510\026>\324\267,>D\335g>_\t\204\275\361\021\301>\363T\017\2771|\244=\312\303\302\276\3544\322>\266gv>V\267z>\357X\254\275V\237\253\276\355\365N\276\2343\242>!\352^\276\232\262\263\275#-\225\276Bx\304\276\311\253\243>=\']\276\\\033\"\2774\021\016\277F\266s>\241\3701\276\320\017#>m\001\241\274\203no\276\331w\325\276,*\342\274\373:\360\276&6?\276\363v\244=b\276<>\341\356\214\276m\034\361\275\304\005\240\275y0:8\2615\233=:\006\344\275\262\271\352\274<\365\210\275-\262\335\275\346\\\252>D\300\t\277\201\223\255=\253[}>1\010\374>\n\272\035\277\357 \226\275\211|\027=\310\014\364\276\202s\306>f\240\362\275]\341=\276\021p\210>F\224\366<\004\311\273\275\314^\266\2755\357\030?[\010\262\276\316q.=\233\003\264>)\"\013?\023+#=\232B\007\276\3274\357\275N\3211\276\373\005\213>\301\034}\276\350M\225\276\312T\301>\210\021B\276;\302I\276\340g\354>t$\307\276\200\324\006\276\237\037\326>\275\214B>#\363\330\276j\373\027>\376\327\271\274\004s4\2761\261\331\276y\351\206>,+\215>\257\352\254<\257\224e>o\r\254>R\233 \277\341(\031>\240\032\357=4\364\017\276\325>\215>\222\350\365>%\351\032>\253\004+>)\320g\276\227s\001?\364\246\242>\230n\202>\033\201\310\276VH\331\276\257|6\276\030&3\276(\n\024\277W%\261\275?\343b\276P\215\347\276\010r\320\275\273\355\362>.s\332>\025W\245>\225HB>\373\313\016\276K\037z>g\233\233\276\273D\205\276\022\024\037\276\244\374d\276t\2330=\233=\020\276\312\374\203\275N(\204\275\300\t\225\276\0319K\275\374\306W>Xs\260>\374\030\323>\333\205\016\277&\307>:\216;\205=`\315\001\276I\235\200\276\232_M\276\324\202W>\203\027]\276K\352d\276Ll6?\301n\330=\246\326\273\275\201\004\031@^\364\025?\254\003\200=\003`\314\276k\0160>\361\272~\276\352\261\215=T\251y>\203ix\276s\364\250\276\347\000A>\"r\272=\314\321\343<tA\275\276\344h\216<\371\"\353;\241\274O=\307Kw>\311\037\214>\242b\214\276\021\035\302=hB\263=W>\313<LS\004=|\n\000\276_\n\217\274o-\223<\006\201U\276\312\372\215=\224\274\232>\315X\034\277}\\\033>U\030\333\275Zg\234\275\261l&\275{1\324\2756v)\276\304w\"\275^c7>\206\256\204=\327\205_=AQ\217\273\334g\025<\036\213\355\274\216\351\311\276\213\375E>(\'\232\275M\363\236>,\232\316=Qf\303\276\375\026]=\201[7>B\226\205\274\256\323\010>\234\303\225\275ga\257>&S\265\276j\243:=\314\354\263\275\327\027i>\220N\235=wJ\207\275#\327\215=\t3\025?\273D\265=\260 \275\276$(\316\276\252\232\200>\336\037\277\276\372\n\322=\265\250\217\275S\005#\276\377\354\227>\"\211\026?>\263\344\275\t\212\177>m\250x\276\220\332$>\264Y\035\277aq\250\276\242&\372\274K\037\352>:\006\364\276\301\342p\276l>\356\2769b\375>\013\230\320\276\250\214\177\276^\327\337\276F\007\244\275Q\210\000\275\214\240\261\274\216\222\327\276\030\231@\275\250\330b\273\332Y\364<\222\\\356?Nb\020>\222y\004\276+\301:?\237\347O=X\220\246\275\277H\370\276\232_->3m\177>v7\217\276\005Q\307>K\345\255>\033*\226\276\370\357\013\274\200\237\031?\\Z\255\276\000\221\216\276fN7>.\036\236=~W4?#\025\206>\311\260\232\276Z/&\276\355a\324\273c\271\205>h\226\204>\302\211h<\312\025\336=>y\250>\371,\257\276 \265\231>\264q\304>TR\007\276\244S\327>m\2214\275I._\277b\3713=\301S\310<7q\222>*o\207>\220f\254>\377\347\240>A\016\352\276\020C\006<\002\202\371\275!\310\201>m9w\276\235\327\210>\252\202\021\276\344e\r=\347\343\332=\355\014\023=\252\357|<|\270\224\276nP\233=w\204\323=\312\340(\275K\036\257\275Ou\020\277\230\243g\2766\315\373=\310\357\235>du\353\275\316\2458\276H\247\016>Ll\376\276I\021\031>\251\023\220>?\345\270\275\3647A>\362$\331\276\361\016p\275r3\334\276oH#\275\347\306\324\276\253\\\210\275\301\307 =\334\346W;\201\355\300=\335\007`\276*\000\226>T:\270>\370S#>:@\020\276^\327\217\276\332\272\345;\356\264\225=7q\342\276\304B\r>\262\362\013\275tk\0109bJ\264>8\025\351=%z\031<\355\266\013\277\376&\364\276\260Ub\276\252`t\276\313\234\236\276;6\262\276\321\\\'>g~\025\276\217\216k\275\252>\241\273\357\254\025?\311\311\304;\n\334:>\221,\300>\266\241\342\275\t3M\276tA]>(\'\272>\250\341\333\274\022\021\236\275\233Zv>a\034\\\275\270\257\203>%\255\230\275S\256 ?\221\363\236=\320\'\362=O#\275>\003}\222\276\254\250\261>9+\242<\244\210\374>\324\266\301=_&\n=\260 \315=1\3205=\257_\020\277\363TG>e\031\302>6W\r=\344\017\006\275\320D\330>T\344\220\275\224M\031>\004!\351>\272\203\030\276\330\201\303>\010!`\275Q\367\301\276\246\235Z\275J\356\260=\240O\204>\251\207(>A\237\230\276\267b\377\275E\330\240\276\241\020\341\276f/\033=\353sU>\r\035\226\273\326\034\000\276\230/\317>J\357;\276\222\313\337>\024\005:\276\352p\031\274r\277c>\2608\314\276\251C\270\273\352 \257=\010\217\266\274\315\344\033>_$\224>\336Y\373=\247;\017\275\360\247&\276\315\\ \275r\304\232>\260\310\257\274[B\036\276\330\266\010\276A}\273\276\244\245\242\2765{\260\276mt\316\274\362$\351\276\256\323\210\276W[Q\276\347\251\276\276\374\336\226>\375/\027\275a\032&>\332\346F>%!\021={\210&?\333M\220\275\360\205\311\276+5\373=[^9\274\370\027\301\274\027\357\207\275\323\366\277\276\242\264w>\013\234l=\336\310\\>\270u\027\276A}\013\276\335^r>rm\210>!>0<{\024*@Q\245&?\310\007]>\005\247\236\275\363\002\254=\033d\362\276+5\233\276\265\246\351>k\267=>8\370b\276.\256q=\351\016B\276\306k\276\275\271\213p=\363\342\304=g\233\033\276\215\234\205=K\345M\276\315\036\350\274\313\205J<\353\377\\\276\252`\324\275\337d@;\377\314 \275\206\254\356=ZGU>\216@\214\276\026L\274\275\"\032\335\275-!\337\276\324\202\327\276\341z\204>%\351\232<\020 \243\275\356y\376<\"\341\273\275\235\203\2109\321t\366=O\257\204>(\324\323<\215\227\356=\341zt>\033\365\320\275\277e\016\275\337\340\233\2762>L<\346?\264\276\306\304\006>,\232N\276H3\026>\346\221\377=Ef.=<\332X\276\243\257\200>\360\334[>\363\310\217>KY\006\276\241\204\211>\001\366\261\276 AQ>f\203l>\212\256\213\274\205w9\276\355\236\034>\010\346(>?\214\320\276\025\255\034=\257\316\001\277\246\311\326\272m\305>==\'\355\276w\025\322=#-U\276\000\032e= }S=\037\272 \276\3333+\276\237v\370\274\351H\316\276P\344I\276\276\237Z>\276K)=\330\r\233>g\235q\2756Y#>\366\177\316=\314@\325\276\025\311\227=K\260X>\255\205\271\275\010\002\344<\030\225\264\276\3707h\275{\022X\275\272\022\001\275\300\347\207\276X\312\002@e\306[\275c\357E<*\312%<\210h\364\275\330\236Y>\253\347\344=?R\244\276\257_\360\275j\023\007\276\336<\025\276+\243\221\275^\363*\274\260\376\317>\342\351\r?|\rA\274\247\226->^\364U\276C\220C\276\260\217\016\276\352%\306<\2716\024\276\010\003o>\035Z\344\275#1\001\275\237\216\007\276\007\360\006?\243!\243=6<\255\276\007\010\006\276)\355\315=\231ge=w+\253\2755\322\322=\266\241\002\276\346\">\276\224J\270=-`\302\276\201\317\217>\336\253\206\276\214\276b>6\310d\276-x\221\276\031u\255\274\332 \243>w\205>\275\303\273\034\276s\200\000>\177\244(\276\307f\307\274\000\214g\276\366(\034>\027\364\276\275\323\023V>\351_\022=\272\024W>\363T\'>\313\3625= *\215\273\322\306q\276\366#\225\276\377\227\306;cb\023\276\341z\224\274/\243\330=\037\364L>(\'Z\276Ih\013\276B\\\271\275\n\327\003>\240O\344=\021\032A\275\252\016Y>$\271<>\006L\200>\336\310\374=\210F\367=/\300\316>\003\262w>$^\236<\221\017\212>\331B\320\275z\215\335\275$\264\005>\205\010\030>>\352\217=n\213\022>\256\361\031\27528\n>8\204J\276A\324\375=e\337U\2767\340\203>n\372\363\275\246\270\232\276@\030\370\275\333\242\214\276!v\206>\362z0\275)\320\007\276\037\021\223>\326XB<m\003w=\271\337\341=|\270\344>\303\323\373\276\204\272\250=\032\206\237>\366\266Y\275\221\200Q\274\374\306\367>7\212\214\275\000W\362=\214\201u=\204\365\237=\177\301\356=\005\206\354=\r\340\355\275B&\271>\004V\316\275\231d\004\276\222\221\203\276\306mt\276\362$\t>\005\206\234>\371\017\t>\204G[\276iW\241\276\252\235!\275\025W\265>\321\350\316\275\006\204V=\362\007C>\227\001g\275\341\227\032>\'\210\372=-`B>?\035\217>\257Zy>\0049\010>q\3111>\002\202\231\276\035w\n>e\245i>v\375\302>#\020\257>\010\254\354\276\232\231\231<\007\2613>\230i\213\276|\362 \277\365\204\005>\267\264\272=\005\213C>r\024\240\274\2028\257=a\032f\276$\227\337>\352!\032>R\'\340=9\177\243>\002.\010=\357\346i>\354i\247>yu\016>\374\030\203\276`\310\352=\201&\222>\252}\032\276`\232\330;\371\017I\276\341(\371\275U\212\235\2755F+\276\254R\232=3\033\244\275Q\024\010>\004\004S\276x\356=>V\016\r\276\\>\022\275\241JM\276\337\303E>\336\216P\276b\204\360<6\253\356>F\010\257>\032Q\332\275\'1\350>a\374\224=nQ\346\274\332|\022<\007|\216\276\215G)\275\251P]\275\'\302F>itg>Z\022\340\276\2554\351\275\330\360\224\275\332U\270>\030>\202\275\254\305g=\r\246\301\275X\312\026@\352x\214\276\325\347\212>R\3622?\032\206/\2760\236\221\276u\221\242=\315\360\372\273\205\231N?\262\021\230\276\252Cn>\231*\330=|_\334<+\206+\275\277`\327>\300!\324\276Gt\017\275FB\033\276\256\201\235\276\274?\216>\324\202\327\276\331\224\013\276\323\207\356>\017\322\023=rk\322<\367\006\177\276A\266\254=\333\277R>\327\301\001\275\234\277\271\276:\224!=\021q\223\275\3024L>V\325\313<\271*\032;g\325\307>\232\231\271>\201&\302\276:\351=\276\304\353\232>\247\221V\276\322\343w<=e\225\275\272\025\302=\026\244Y>F\323Y>\2240\323\275,\357\312\275L\303\010\277\207\025\356<DQ\000\276\347\302\310\275A\274\336\276#j\242;\340\020\332>?\000\t\276\207\026\271\276j\373W>\242z\213\275u:\220<U\336\376>\324c\233=(\'z>/\335d>\233\217\013>\312\211\266>\256\266\342>\260\311:>\204\362\276\275%@\315\276Q\275\205>\343\034\320\273\366b\250\275\267F\204<\372D>\276[%\210>5cQ\276\255L\230\275=~_\277\352[.?\346\221\177>\351}#\275\002\361\212\276>\350y\276\361)\260>)?I>\323j(>\274y\272>)\226;>\244\033\201=$b*>\000\035&\276\242]\005\276=D\203=\305\376R\276\373\256(>\243\222\372\275i\002\205\275\007\316\211\276\207\376)\276R\270\336=\006\326\221=f\024k\276t\357\031?Y\243\216\276\222y\344=\212Y\277\276u\002\032\276\n\327#\276\232_\315=\337\303e\276\325\t\210>To\255\276\350\275\261=\270\036\005\276\256\330/?o\236J>\255\027\003\276\232B\007\276\204*U\276kbA=\3122$>\250\030\207=6v!\277\304\261\276>\224\207e>\036\371#\276\266\204<\276\317\367\323=\250\254&\275[B>\276\344\203\002\300b-\216>\341C\211=\270\371\020<\006\022\024\276=a)\2765\322*\277\376HQ>\n\327#\2760\236\301\276\3230\374\275\206Z\323=\300\262r\276\312\340H>\026\207\023\276\341\0133\276\270\314)\275\346\256e\276\276\300\214=\0364\273\275\321W\010\2775\357X>\333k\301\274\260\003\'\276C\347\305\276\2763Z\274\032n >\250\030g\276j\211\225=oG\370=\034%/\276\001\301\254\276\235c@>\033\273\034\277\002\016\341\275\371dE\2749\234Y\2768N\212<\257\261\013>\374\336f\276\336Y\373\275j\207\257\276\227V\263\276\250\212\311=\033\022\267=\034\353b\276\206\346z\276\256\236\263=\235+\312\275vp\260=X\033c\275O l=O@\203\276i:\253\276(\n4>\037\365\227=\251km\275\311q\307\276\215\266\252\275$^\036=\t\371\000\276\343\307\330\275\240\340\202\276\002\017\254\275pA\226=lCe>+5\373=@\244\237\276\213Oa>\234\300t\275]\337\307=\006\201\225\276p\231\243\276S\005\343\275\247\226\355=.\342\033>\377\312\232\276ep\244\276\000\000\220\276\037v\360;CV\367=\3442\356\274\363q->\302\022o>2qk=iW\341=?o\n?\224\331`>\330\266\210\276\213\251t<\345\320\002\276\376\016E>\314\010/=\010\346\010>\357\250\261=\030`_\276\243@?>q\311\261\276\336!E\275t\265\325>\314\321\343=\277\324\017\275\363T\'>\273\233\'>\353s5\274u\002\032\276l\225\340<2\002\252\275\220\240\210\276k+\026?^\205\224\274\330\266\020\277\023\014\'\275\266J\020>\253\350\257=\320\263\031\276aQ\221\274cbS\276\260r\350=\251\274=>0\360|>xC\232=\216\004\232\274N\373\034<1\323V>\326\377\271>q\314\262<\257\010^>\003\tJ>U\331\367=\005Q7=\250oy\276\330\236\271\2760\201\353\276\373:P\276t\357\341=\313\020\307\274\3333\313\276\310\013\351<\221\325\235>L\211d>\222\221\023\276\300z\234=\351\361\213\276J\266z\275\274?\216\276J)\210>\330M\204;&\254\255\275\205\010\030>\350\274F\276\000\3439>\375\370\213=\243;\010>\037h\225>\010\347\023\275[\316\345=\364S\274=\274\313\305>qZ\360=\267\264\232\276\\ \361\276q\217E\276\271Py=\324+\005>\221\3206\276\013A\016\275\211\357\004>\024\315\303\275\262\0210?)\320\017\277P\247|=\24461>V\237\233\276k\237\316=#\363\010?\t\303@\275\360\026\020?\310\352v\276\033\022\027\276R\362\352\275\256\360n\276d\345\027=\010 \205>\364\032\233\276\306m\244>\177\205\254=t\322[>~\3338;\222\"\242\276\350\023\231\276\236$\235>\016\243\240=\217\215 \276Uj\306>I+\276<\3372\007>s\272L>\271\210/\276\343V\034\274\221\325\235\276\'\367\233\276\277\265\023\275\3647\241\276\374\373,>X\250\005\277\315\001*\277\235\234\301=f\370\017\275\2652\001>\325\225o>\263$\300>\324G`=h\3200\276Y\335*>`\000\341\274\315u\232\274\004s\264\276\222s\007\274\201x]\276]R\265=\357 \246\276T\341O\274O\257T\275\252C.\275\024\005\032>\225+|\276\306\341L>;R\275=\306\371{>a\303\223>A\346\024\274%]\263>\275\343\324=_^\000\276\240\374\275\275xE0=\277\361U\276\271\302\033\276\342\351\325\275%\314\364=1\323\366=\027\232\253=\367?\300=\3066)\274\027\201\261\275\326\3055\277\333\205\346=\014\223I>\256*\033>F\265\210\274[z\264=-[\233\276D\250R\275\327QU\2759\2349>l\225\300\275W\004\217\276\025\214\272>\225+\314\276\243X\016\276X\347\330>.\345\374\274ff&>j\331Z>\342X\327??W\213>\3746D=g\233\213\276rP\"\276\253\354\033\276\343\245{\2761\010\014?8\025\t\276\272N#<\007_\230>\214\365\215\274L\246\232\276=\325\001\276\356w\310\275g\017\244\276\322:\352\275@\244\337\276\272NC>A\360\270=\345\325\031\276[\261_>+0\304\275\007\323\200\276\215E\243\276S\226\241\276y\222\024\276\2721}\276\303\266\005>I\364\222>\366]\021>\030@\230=\266\363\375\275\002\362\245=\346y\360=q=\262\277\014:\301=8\331\246=@js\276e\307\206\276\355\360\027\276\303\021\204=Y\027\347>,\202\237\276\215(\255=o/\231>4hh\276Mj\350\274\276M?\276pB\001>\344\017\306>5z\265<\333\247#\276d\313\362\274\260\003\007\277-x\221\276\'f]\276\223o\026\276\343k\257>\244\3028\276\203M]=:\314\367>\204\020P=\237\315\252<\364N\205\274O\225o=\234\334O\276\3374\235=}\320\343\276\212\002]\276\245\335\350<)\005}>h\320\340>E\273\n>\212\260A>\362A\257\276\035Yy=\032\300;\276\360\242\217=B\225:>\360\301\253=\035w\312\274JA\367\2755z\265\275Yir>\3647A>\317\366(\275\344\363J\275M\370\005\276l\356h=\270\351\337>\320\323\300\275G\217\237=\355\231\205=f\210C>cE\315\276\213\211\315\274$\017\304=\305\2171\276\325!\267\276\230\027\340=\013\177\246\275z\376\264=!<\332\275\263\352\363\275\203\027]\276\231\201\n\276~\376{\2756\002\261\276]\374\215\275\t\212\037>\272,\306\276\257_P>\315\006Y\276v\211\312\276\257\353w>d\036\311\276C9\241\276\305\033\311>:]v>\033\365\200\276\036\033!>`\223\305>X7\336\273\205\010x\276B>\010\27628\232>~Rm\274\312\214w=E/C\276\316\206!\274\346y\220>S\313\006\277\354i\267>F\266\023?`\352G\276\006\361\241=\033\236\036>\376\325\303\275\262,\030=\254\311S=\210K\316=\242\265b=\207\371\342\276\374R\277>G\003\370<;\031|\276\327\335\374\275\343\245\033\276W\2649\275,\361\000?\2716\324>\211^F>\355G\312=\n\364\271>\250o\031\276\326\034\240<\t\212_>k\237\016>%X\354>\n\334Z\276\355\266+>+j\020>\264\037\231>k\202h>\207\376\t\276\332\033\034>Ic4\274\005\305\257\276\027\261\364;\354k\335\274v\246\220>\\\312\371<\373\315D\2747\303m>\345\263\234\275\361\327$>\000\214\'\2767l\033>1|\224\276\227\255\225\276\233\003\324\276J\357[=)u\211=\"\247/\275)\"C\277\277H\210>\006\330\267>A\272X\274cA\241\275\315t/<K\223R>\264Vt=\322\343\207>\324\202\027>\366\264\013\277\360\212\260>t)\236>\327Q%?)\313\360\276\263\230\000\277\264\260\007\276Ic\224\276\356=|>6\253\346?\210F\017\277\337Om\277\251\301\364\275U\023\344\276;p^\277\310\230\273>V\016\355\275A3c;\020\257\253>\310\230\213>c\026\020;\242]\265>\214\202 =6\037\267\276\256\330\177>Hm\">\270\351\'\277\316S\335>G\003\030>p\261\242\2762=\t\277\rT&\276\300\t\025\2772\311(>B&!?\373\313\356>\322:\232\276\366\264\343>@\030x>\310\322??\031\3052?\331x0=\026\207s>\313-\355\275\244\215\203\276G\003\250\276\220N]\276\002\267N>\2029:\276\023\270\365=!\315\310\276\261\304\223\276[\010\262\276\316\374\252\276\3544\242\276\3127[\276K\310\207<\002\331K>8\363\353\275\216\257=\276\3438\260\275yu\016>\351&\221>\373\256H>(D\000>\327\243\200\276\010\224m\276X\341\266=NB\351<\223:A>y\005\242\275VD\r=$\230\212\275\357r\321\2763\033\344=)\3130>.\377!>\264\"\312=\376&\364>\363\253\331>\337\211\231>\322\373\206>H\371\371\2762w\355\275W|C=\033/}\276\001M\224\277\270\\}\274\307\364$>!\260\342>\030\354&>\007\316\271>\010=#\277\362\322\355\276\207P\265\276\rT\246\276\203\206^>\344\366\213\275\225\202\276>5\265\354\276\340\020\n>\333\242l>\334\364\307=F\010\217\274\367u >Gr\021@s\200 \276BC\337>/i\354>\320\270\360=\020X\271\276#-\265>\233\217k>\324d\306\274\370l\235=\340-\260>\253>w>@\374\274\275a\032\006\276\345\'U>\335^\302\276[(Y=J)\010>\232|\033\277&\212\220\274\330Gg\276\0259D=\007^\255<q\346\347\276\214\334\023\275Z\330\223\275\031\347\257\276\376\361>>F\261\\\276\307\364\004>eS\016\276\233Z\006\277\221\253\242;\266\276(\276\033e==\177\023*>\357\341R\276sh\361>\r\304r=U\373\024\276\014\037\361>z\252\303\275d\2577>K\2608>\315\001\"\276\374\343]>o\323?\276\025\251\240><\203\266>\353s\245\276*W\270\276\226!n\276\367\001\310>\367\224\034=\202\305\221>\266\020\344>*o\247\276\254\307\235\275\251\336z>\212\216\204\276\351e\204>j\277\265<\371\3679>\002\274\225\276y\222\364=m\305\236>\"\246\004\276\252\324\234\276\2074j=\223\264\321;\357\311C>\030`\007?\300[\240>p\261\202>\322:\352>\370\215\277\276bS\235;\017b\017?\241-\367>\024\\,\276\334\241\201=\344I\"?\3750B><\203\226\276{\2106\277\235V\300\273\371\017\351\276\003\224\006<\202\3128\276\203\333Z\275\236\236\322;\251jB\276C\305\350>\003\354c\275\030\033\3439@\331t\276g,:>h\226,?M\241\363\275\262\021(\276\214\370\336\276\310^/\276rm(>\204\360\010\277\217\252\226\276S\320\315\276\306P\256\276\222?\270>\334\272[>\333\277\262\276du\253\274-\262\315\276Ou\010>zS)\277\367\307;\276\322\035\304\2764\364\237>\266\204\334\276\202s\266>\207\341\263\276\221D\257>\t\371@>\262\364\341=\276j\245>\027H\220>~\341\225\275\200`\336>\210c\315>G\347\374<v\032\251>X\305\253\276\244\210\234\276\t4X\274(\'\332=\344N\231>\252\016y>+0$\277]\213\026\275\242\227Y\277\206pL;qr\257>\325&n>\330\r;\276\274t\323=n\027:\276S\226a>\004\222\260\274r\334\331\276\226\t\'\277p\353\256>\301\305\312>\330GG\276*\221\244>\032\333k=\217S\364\276\273\355\002?\213T\210\276\274\350K\276\241g\363>{\203\007?\366zg\277\374\303\226<@\244\217\276g,\272>\300!\224>=Dc\276aP\246=[\261_>\014\005,=\276\022\310=r\375\273<-\271\345;\317\021\271\2758\331\006=\214\276\302>\265\246\371=o\273\320=\346\260;\275\201x-?p\231\323=\371,O\276\352\317\356\276w\202\275\275\033G\254>\342\254\250=Z/\326\276\t\376\027\276@0\247\276\002\202A\277\004VN\276\306\2470\277\020;\363\276\257\3537\277MJ!>Bx<?\253>\327\275\305\033\331\276\261m\321\274Q\365\313=H\212\210\276\314E<=!v\006\276>\"\346\275\003&p\2761\231\202?\034}\314\275\315\314\214\275\001\207\240>\366z\027>\037\205\213=\222y\324>\261\212W>@\301e>\200\232:\276\324C\024\277\200\232\312\276\256\r\205\276\345~\207\276IH\204=U\373t\276j\274\364>\321@\254=\0260A\276\313\272\177=i\306b\276\237\253m>sc\032\276e\337=\277\213T\030\276Z\177\313\275\032\300\313>d\311\274\275\005n\035=\367\222F>\234m\356=\0324\024\276\243@\337=\177\024\225\275A}+>2ZG\276\0162)>l\262\246\275\n\327#\276\352\221\246\275Z\240]\275\262F\275>\305\376\242\2769\234y>\256\201\r?\241\333\023\2773\305\234=\3225\023>.9\356\274g\233\333=z\215\255\276\322\035d>\021\032\301\274\3745Y\276\030>b\276\001\373\210\276(\233\022\276W\t\306\276\250\251\225\276\206\346\232\276\241\363\332\276\236\357\267>n\335M<\251.\240=\230\335S\2762s\201\2757\000\233<.V\224\276\365\276\301>*\032k=\350\202*?\224\336\227\276\024\260]\275\003\354\203\276\273\265L=I\205\221>\361h\343\275\006\022\264\277[\353\013>\224j\317>\236)\264\276\372\n\022\276\274\\D>k\237\016?]P?>\256G\201=\236\265{\276\022\024_>D[\204\272OX\302>l\004\362>\211\230\222>M\363\216>\244\252\231\276\222\350\005\276\217U\252\275\237<<@c\356\232>V\237K\276\254\342\215\276\305\376r\276?\343\262>\370k2\276\367\257\214>)?i>;\307\300\276\177\023\212\274q\254\213\276\306\0262?\356w\000?\305\254\307>\t\247\305>\341\177\253\276c)\262\275\010\217V>\223\251\262\276\326;\274\275\256\236\303>\322\376\247\275\360k$=\217\031H\276\355d\220>M\241\323\276/\206\202>a\3033>\r\211{>\343\374\275\276Ih\273>\231G\316\276F\323\231=\275\035\021\277\2760\251\277\216\'\335;MJ!>\217\307\234\276\227\220\317=\2034C>8\020\222>\206\311\024\276\2613-?\272\024\327\276\1770P\276\204d!\276A\361c\276AEU\275\022k\361=Z\022 \276\222Z(=\024\350\323\275\014v#>#\241->\304\231\037\276\374\030\363=\2176\236>/\243\210\276#\370\037?\305\243\036\274<f\340\275\271\210\017\276\027\324\207>\017\016\366\274Nz\337=\035 \210>\226\347\221\276\230\3729>[\231\200\276\361K\375=C\342\036=s\327\n\277\221\325\375>\355\226\t<\235\021\325\276G\311+\276(~L>EG\n?\332 \023>\272k\271>5\014\377\276\375j\236>S\221J>l\"3=\341\356l\276\321\005\365=`\037\335\276\276\207K\276\274<\035\275\261m\321=s\242\255\276\202\347\376\276\354\243\263\276\303\323\333\276\243\001\\>\275\252\223\275\256\365\325> \014|>\274y\272\276$(\376\276\024\t\206=/\243x>\212=\224\275\241\204Y>\030C\031>\345^ \275X\342\001\277\314\321\033\277\341]n\276\204~\206=\353\305\260>\007B\n\277y#S\276\2554I\276\326n\013?\027\331\256\276\250\030g\276\247\"\305>\233\036T\275\253\347\344=G\254M?Gw\220\276\036\212\302\275\342\351\245>\212\217\217=rm\330>\244\307/>\003}\302\276|\362\220>p%;\276\215\267\025\275\020\257\353\276U\336\256\276\204\343\350;%t\227\275\030>\362>Di\237>\014vC>\244\344\245\276\"l\370\275\322\033\216\275\2068\246>4\277\332\275\013^\364\276\246\n\206\276\216>\206=\234\242C\276\203\027\215\276\025\221\201\276e\252\360>2 \033\276\276\274\240\276\260 \r\276b\241\266>e\374\213\276\270x\270=X9\004\277\222[\263\275M\333\017?\034\266\275\276ff\006>\334\327\021\277&\214&\275a\246M\276\342u\375=,J\251=\367\006\317\276\265\303\177>\375\244\312>\373\\5?\335\014\367\275iT\340<\220\021\260\275\302\022w?f\210\303>&\374r\2766\351\266\275\255\243\352\275\315\257&\276\031\305\322>\033\r >\"O\022\276gDA?\316\2458>\345\270\243\276z\031e>Y\300d>\036\334\335\275\265\025\233\276\333\247c>d\0369\276a\246\r\276\245.Y\275u\260\036\276\371I\365\275\216@\027\274C\256T=_AZ>H\304t\276\377\346E=\2240\203>P5z=\313\370w\276+\207\346?\335\322*>\232\\\014=y\351\346\275\024\005:\276\027\202|\276\252\267f\276\203\337\306\275\242zk\276\030D\204=\336\310\214\276+\0305?\371,\317\274\202s\246>\366\321)>K\260\310>J\357{\276\355d\020\276\265O\307\274b\326K>\351\267o\276\347\337\256\274\205B\324>u\315\244>\250\251\265\276\274\350\013>S\226\001>\353U\344<\253!\361=\324b0\275q=b\277\236{\007?\225\232\375=\2301E=\274<\235<yu\316\276ep\024\2762 \213\276\242z\353<\325\354!>G\311\013>\337\025!>\t\304\013\276\305=\266>\250R\363=,H\203>(e\222\275d;\037=O\351@>\234PH>\234\026\\>>\010A=N\013\236\276\336T\324\276o\177\256\275\310\357-\276\304%\307\276\023\362a>\225H\342\275F\224v>\033.r=\254\213\253>\367X\232\276\331v\272=\255\243\n>\265\211\303\276\307cF>\2304\266\276\374\033\264\274\230\243\007>$\321\373\276\322q\225=\226\317r=/\300>\276w\025\262\276\366y\254=.\255\206\276\200\327\207=\246\362\266\276\036T\342\274\231\2360\276u[\302=\242(\300>\255\372\334=nL\317=\363Y^=\332r\356\275od>>q\003\256>\207\341\303\275,H\023\277\325\260_\274\330\3604\276p]1=\257\316\021\276$\326\002>\225\324\331?\364\376\277\274\257ZY\276:\351\355>2\311\000\277\267c*\275>\226\036>\327\2430\276P5\272=\030xN>2 +\277hB\223\275\236\230\325\276+\207f?-\006\217=t(\303\275\320\ta\275j\366\320>\037\327\306\276{\332\361>\nJQ\2741\316\'?t\007\261\276P6%>\224/h=/i\274\276\343\307\330\275\305\343\242\275\022k\021\276\004C\261\271\267\262\004=_^\300\276x\265\274=\340\331^\275\244\214\230=.\347\022\277E)a\275L\340V=\313\020G\275\203\335\260\276\201\317/\276\332 \023>\3171@>\354\300\021\277\360\205\351>\276\366\314>\366(<\276\233Z\226\276n\206{\2767\303\215\276\024\256g>\215\321\252>=I:\276\277\363\313=\243\222\332\276j\207?\276\'\332\265>\004V.>G\003\270>3m_\276\341\264\000\276x\263\006\275F\013\260=\200b\344\274p>\225\275NE\232\276\306\026\002>\225\232=>]\335\261=\320\325\026\276o)\247\275\324\267,>h\312\016=\342\006$\277\201>Q>\030[\250\2760gv\275\315\027E\273\005\027\333>\022N\213>\214\333\010\276\037\205\353\275[\316e\276\225\363\205\275\227\220\317>\215by\275\030\010\302=\000\256D>\365\357\037\274i\032\224\274?\375g=&\342\255\275\261\212\227>\023(b=\025\000\343=E\360\017\277\355d\220\276?\000\001?v\375\302\276\373\313\336\276\305\311\275>p\010\225\275\373?g>\027+\212>\366\356\277>~\035\000\277XV\332=sHj\275q\251\312=\372\270v\276p\261\322>\252+_>\225\202\256\275\337\207\203\275+\3311>E*\274\276\017(\013?\265\2113>\236^i>\352X\205\275\026i\342\274\337\033\236;z\245\334\276[\010R>}\226\347=:]\016\277\235c`\276\251P\335<\340/\206\275u<\346=\020X9\276\302\206\207>\035q\210=.\342\353\276\037.9\2762=\201>\345\325\031>\032\206\017>\235\235\234\276\272\203\330=\273\017\220\276\327\301\201\275\t\244\244\275r\027!\275\353\220\213>\335{X\276\rQ\205=\244\307\'\277Gv\245\275\033\r\200>\032^\177;\001M\244>\214gP\275\271\345a:[\231\300>I\205Q\276>\"F\276\207\247\027\276\341E\257\276j\336\361\275:\314\227=P\337\202>\021Q\314\274\377x\277\276\346\"\236\276\321\256\302\276\231+C\275\250W\272\276\360\247F<\312\210\313=\217p:>2vB=\224j\377\276X\305;\276N\271\302>T\251\031\276^\242\372=\022\275\354>E\201\276\276(~\014\276\3711\346=\343\245\233\275\207\334\334>\244\210\014\276\254\250\021?\311YP?\220\367\252>\263{\242>\311\310\371>\021\345\213\274\377>\003\276\211{,>\330G\267\276\0265x\276\243\006s>\313g\331\276\"\031\362<\177i\321<$\177\220\276\344\024=\276\341]n\276\234\333D\275*\214->\350!\t\274\203\300\026@\035\255\212=\266d\225=\254\220\242>\256\232\247=\241\326\004\277\250oy>Y\335j=\000\256L?W!\245\276*\214\255=\335\352\031>\026\027\307</\300~>[\266\266>\275\000\013\277\034\2322<MH\213\275\013\357R\276<\275\322<G=\244\276\327\206*\276\364\375T>\304Z<\276\366\321I\276\027\324\307>\335\322\n> \230\223>\236\352\260>M2\022>\206\003!>\244\203\032;i\000O>\221c\313\275\257BJ\276\2554\331>\344\203\006\277\360\212\260\276\370T\316\274>\\\022>U\030[>\254\010\222;\334\233\277=F|\007>\272\020\253\274\020\222\225>\367;t\276\235\327\330\275\361GQ\275G\350\'\275xbv>|\233\036>\304\317\237\275\232\010\253>\327\022r>\264\216\312\276\225\361\237>\225\324)>\332s\031;p\224\354>5\2311=\373\345\263=y#\323>\362^\345>\"\303\352=\233\3066=\212\003\210\275g\325\347=\237Y\322\275\0363\320=\275\3759=\3603\216\276*\341\211\275\210\272\'\277>\"&\276\357\217w\276\014\345\204\276\327Qu\276\020zV\276m\347{>\265\306 =\213S-\275\302\022\357\276]\342\310\275\274\226\220>fNW>\212\315\327>F|\007>B>\210\276\252C\016\276\226>\264\276\035\311\265\276\270\001\257>\310\022\014<t{I\2765\355\302\275d;\217\276\264\310\226>[\323\254\276\306\026\202\275R\270\356>\023D\335=@\374\234\275\361K\275>\226&e\276\317\332\255>\230L5>\n\235W>\005\206,\275 A\241\276\332\217\324=\227\251\251=\221D\017\276\"\216\365\274\363\216s\276\344\017\206\275\362\357\203\276\005QW>\3441#\276:X?\276\373\313\016\2766Y\263>\022\371\256=\322\000\256\276\313Js>`\253\004>,+\315=?\214p>\365\363\206\276}\t\225=F\356i\274\216u\301\277\362\322m>\254\034\252>(\177\367\274\007|\216>\305=\026<\241\241?\276\345G<=\376&\024\276\220\024\021\277\267\356\346=\261\247\035>\373y\223\275~\217\372<\260\376\317\275\360\371\221>\312\375N\276NbP\276\200+\331\275\221D\237\276\350-^=\305\221\207\275\243[\257=\367\307\033\2760/\240\276\264\001\030=\322\030\275>\2029\372\27675\260\275\245\332g>9\200\236=\242\010)=\236\357\007>;\215\204\276\327i\344=\257\227&\273\021\247\223=\024?\266>\023\n\021>J{\243\276\333\205\346=wH1=[B\316\276\210\327\365\275,eY\275Ve?\276\023\270\025\276\327\335<\275j\336\021>\273\017\220>\025:\277>\332 \023\2750\330\215=\375O\236\275\030\354\206\276\346t\231>|~\270=f\332\036>+\244\374\275B\317f>\357 \206>P\212\226\2758\370\202>1\316\037\276\305\033\031>YQ\003>\303\360\321\275\2721\035\276\264Y\305>\260\344*\275\247\"U>r\341\000>\013^\304\276\341b\005\276Y,j;\335\322\n\276\210*|<r\275\022<\353V\237\276Gr\231\276w\2043>S\350\374\275\334\021\016>\247y\227>\037/\244<<jL=>S\371\273\303\330\362>\337\340K\276\210Fw\275\314y\246=Y\373\273\275\234\333\304\275\314\321\223\276\345\263<>\300 \251=\264\310v>}\\K\277U\301h\276\335$\246>\031:\226\275\314\270\211=\300\320c=\021\2524>F\014;\275!\313\202\274KY\346\276\221,\300\276|\355\371\276P\001\260>#\363\270\276\'\243\312<\034%O\276\230L\325\275\226\t\277<\005\031\301=!\312\227\2754\201\"\275G\346\221\275\021\001\327>\370\210X>\036\247\350=\213Q\227\275\032Q\032\276\340\204\">\226!\236>\t3\235>\351C7>OXb>\246\233\244> \014\254\276\304&\222\275\017\013\265\276\262F\255\276L\303p\276>\\2\276\17731\275e\304E=\3642*>\267z\256>__\353<\240O\004>L\032\243<\255L8\276\365-s\276\221\'I\275\\\034\225<\305t\241\274\323\336\000\276\014\037\241>s\235\006\277\255\243\352=,\232\216\276\352[f>\013Ez\275\352\t+>\001jJ>\354\335\337\275\324e1?\007\353\037\276\312T\301\276(I\027\277\366\264\023\277\377\317\321>\361.\247\276n4\320>\245\332\'\277\323\203\302=\247\221\226\2763\371\366>P\215\207>\330\266(?\202\305\001?\262\233\231\275\215\264\024>2Z\227>\016-\302>\262\235\257\276#\276\343\276\311<\202>]\212\013>\277H\330>\'\275\257\276\336P\035\274\017F\354\274P\330\017<\272NC>p\374\032;\03638?\307\021\253\276^\200\315\276\227\002\322<\241\276\245\275\252\232\220\276\036\033A\276iR\n=d#0>\347\001\254<\353V\337>Ra\274\276\022\370\243=\354\300\251\276\343\307\330\275\226x@\276\235Hp\275\356\010\017\277\217pZ\276\225)&\275cb\363=>\347\216=Dn\206>\323\274\263>\252\232\300>\221~\273>\240\211\360>\250\034\263=\242\177\202>\204\r\337\276\350\0239?\3436z\276B\225\232\274\2176\256>]6z=\362\260p>1\010\374\276vl\344\276\022\302\003>\016\363\365\276\010w\227>\363Y\356>\235K\361=\2510f\277\252H\225>R\355\323\275\325[\203\276\376e7\276\rr\227\275\027\237\302\276/4\227>\364O\360>m\221\264\2752=\341>\360\367K=\327\243\200\276q\220\220=\036\031\253\274\232%!?\310\007\025\277\010Za\276\256\273Y>\326Vl\276c+\350<\251\301\224>\242]\265\2765\323\235=/\335\364>?\035O>\361\235\010\277\362\315\226\276\257\016\333;(~\204\277\377[\t>(~\214\276\246\n\006?}\3203>6Yc?\341E_\27633;\277\003\317\035\276)\320\347\275!\260\322\276\035:\275\274\226\225F\277\224\244\313>U\301\230>r\334\371\276\355\231\305\276g\325\027\277\207\341\223\276\254\250\001>\020\006.?U\244\"\276\375MH\276\302\300\263\276\013Fe=\307fG=x\356\235>\212v\325\275\315\001\002\276iW\221\276 J\017\274\032i\311\276\251\301T\276>\256\375\276\233rE>\235\327X>s\242%\277\"\032\035\276\324eQ>\325\313o=\223\030\304\277}\226\'>cbs>w\206\251\275[|*\276\010\003\317>P\374X\276\001\241u\275\3711F\277\002\331+>\rUq=\016\025\003\276!<\372>I*S=\331_\346>\205w\311>w\020\023?\0265\020\277\220fL\276\351H\016\277\326\377\311\276\315\314\314=\331\261\241\276\302\276\035=Nz\'\277PS\253>y\350;<UM\360>\025od\276L\246\032?\346t\251\2765)\r?\226\317\342\276X\347\270\276\216\257\235\276/\277S\274\270\036\305\276t\352\312\276Z\202\254=B[\356\276:]\206\276\354\027\354\276J\265\257\276\332r\356\276\016\276\340>\342\311\256\275\223\000\365=t\007\361\275o\r\014\276\251\207\270>r\026V>\034\360\371=\214gH\277`\352\227>\370\210\330\275\276\237\232\276\010\003\217\276\026\244\371\276\003A\200\275\351H\016>\373\220\267\275\227\377\260\276\352\347\315<\037\205\233\276\367\346\267=\224\336\307\276\231\323\305>\313\333\241>\376+\213>\277\324\027\277,\267T\276\264\037\331\276!\345\307>\325x)=R\233\000?\000SF=J\357\333\2753\247\013> F\210\275\010\314\203=/\206\302\276\034\315\221<\271\302\233>4\327\271>\341\177\253\276\344I\242>\246\231n\274\314z\301>XV\232\276bJ\014\277\230L\025\276\356\224\216>\314\'\253=\377\317!\276^\242\212\276H\371\231\276RI%?\307K\367\276\253B\243\275g\017,?\343\030\311=\307\327\376>\026\3733?\021\252\344\276\262\235/\276\302\022\257\276\312\211\326>Tt\004>[\010\362=d;\007?\215E3\276\247\353\t\275\014\310\376\2760\330\005\277\0324\344\276\317\024\212>\236\230\225\276\331\261\021>\324\361\000??:\025\276ff&\277A+P\276\327\243P>~\030a>\253xC\277\024yR\276O\222\336\27677\206\276\313\020\307\276\t\304\353>\242\321\235\276\002\232\010\276:\006\344\276\254\306R=\t\247\025\277\350\244w>\005\027\013?\241\0201\277\302\2417<\030C\031>\276\237\332\275+\2076>\'f]>\006d\'\277O@\343\276\n\205\250\276\371N\014\276cz\">\363\037\222\276\212Y\007?\326\034@>\335\322*=\026\336\305\276\304_\323\275t{\271>:\222+>^\2054>\250\343\361=%\006\341>\306mt\275\233 j\276\013^\224=\213\032\004\277`\345\300\276\020X\371\275?sV\275`\352g<\210\200S\277\332r\356\275\t\247}?\250V\037=>\226\026?\3372g>1_\256\276\205_\022\277I\275\'<\361b\341\274\241\370\201?\n\200\261\276\320D\250>:]\266\276q\003>\276\377\225\325=\023\n\021>\270X\031\277\002.H\274V\017X=\361\0211>u\345\023\276\362^5\275\347R|\2762w\375>\335&\274=ff\006\277o\250\316\273\362\007#>\331z\206\272\263\352\363>\227\217\244\275\250\214\177\275M\204\255>N\362#=\312\207\200=(\233R\276\363<\210>\007\3169>a\303\013\277\332U\310>\314]\253>\224\244\013>\260\310\217=0\201\033>Y\367\217\274\244q\250\2751\353\005>\035\346K>\254\310\310\275\361\364\n\276\355d\020>\013$\250\276e\336*\274\221au\276\304\0076\275eSN\276y\005\242\2742r\026\276\356\010g\276\0162\231\276\350\023\001?\220\204\275=;\302\211>\2504\202=\366]\301>\371\203\221\276\263^\274>\260\217\016>\255\204\256\275A}\313<\370\245>>\301n\370>\207\341\323\276\2504\342<\023\325{\276<i\341\274\375\331\017\275\325\225\337\276S\350\374=\344I\362\276j\373G?iu\315\273\t\341q\276\000o\241=\210\017\254\275\013F%?\225Hb>\330\365#\2775b\306\275\316S\315\276w\275\224=\222\350%>+\3667\276<\332\210\276!\004d=\374\035J\276\322\030\235>\334hh?\371\204\314\275\350\237\360\276e6\210\276\006\023\177=\326\2208>w-\341=\035 x\276\357rQ\276\212v\r?h\"L>\307\241>=zp\247\276!\310A>\347\306\224\276\205\353\241\276\206r\262\276&\216\274\274\365\205\260\275\325\227%<-x\021\276\257~\307;\207\212\031\277h\221\235\276\217\035T=\270\225\036\275\341E\037>\220\203\242>\251\366\251>\3750\202>Q\275\025>VG\016\273\014\007\002>\254\304\234=2\346N>\315\314\204\277\305\033\t?\322\343\347>r\277C>\360\210\n\274\343\337\007>-\t\320\276A\271\355<;\2522\277\232B\247\276U\377\302\2701\2660\276\261\334\242\276S%\312=+M\n>\027Hp\276K\310\307>u\253\307\276\374\3067>\n\021\220\276\243\036\262\276\017E\321\276\352\225\262<5A4\276W&\004\277<kw\276\204\235\"\275\356Z\242\276\343\342\250\274*\220\231=e\212\271=\026\366\324>\256\353]\271XV\352\276\313\365\226\275\274\313e>\357 V>\014\352\023\277\010r0>o\323\217\276\300&\213>\367\222f\276&\001\272\276\247?\373\275\242&\372\274\022\300\r\275\363v\324>\244\252I\276\354\027l>\007\353\177=E\022\375=\'\275\317>\354\022\205\276\334I\004\275\030[\010\277e\337\205\276\317\367\323\275\351\356z\275\361K]>Lq5?\177\024\365<v\340\034\276\222\263\220\276|\233\256\2767l\033>\037\205\233>\311\310\251>\244S\267\276VH9>\207m#\277\205w\371\276\333i\213\275\213\211\025?\010 \245\2765\322\242>NE\352\275\027H0\276\001\030\017>\266J\220\276\2716\324\275\333\212\215\2764\200w>\2755\220>3\212\305=\347\374\264\275g\355v\276|\362\240>\370k\362=yX\330\276\241\366[\275n2*\275Ae\374=Lq5\276`\035\307=\201\006\273\275z\215}>\006\201\305>\374o\365\276a7\214><\245\343>\261\250\010=\204\330\231>\363\002\014>\310\275\257;M\020u>\034\231\'\276k\352a\272k+\366\275\242\177\"\276U\244*?\306\242i\275\202\312\370=#2\014\276\2407\345\276\325!\247\276v7\337>E\022}\276\305\003\022\277\222<W=4\021>?#\333\371=\3171\000>\363\035<\275\212\220z\275\263\0072\277jlo\275Y\206\210>\016\206\232=P\252\025?\202\220\314>@0G>#\276\323=\271p\240\276\365:\030\274F\231\315\275\023a\243>\016\241\252>R\233\270\276\333\334\350\276\313\204\037\275\274?\336\275\247\312w\274`\037\035>A\202\002\276\345\'\265\275G2\365;\333m7\276\230\332\222=\177\331\255\276O]\371>\350j\353\275Y\0277>\\\252\262=\207m\213>\320\325\206>`\345\200>g\322&<&pK>\021\374\357>\334\200\237\276d\350\230=\026\023{\276oFM\275^\276u=J\262N\275A}k>\222yd\276m9\227\276\030\262\272\275\340\234\201>1B@?[\261\377\275\375\207t\276\305\036\232\275\272e\007=\3372G\276\327\243\340\276\214J\322\277\357\311\203\276\013**\274I+\236\275V9#\274\007|\276>\302\336\304=\346\\*?\375\023<\276^\205\224\276E\365\026\276\361\325\016\275\272\024W\276S\227\014=G\254E\2766\\\244\275\032\246\266=\354\243\323>\001Q\220\275\253\3543?0\022\032\2762\004\200<\276\237\232\276\307)Z>T\343e\276\305=\206\276]3\331\276\010r\020\2763\376]\276gD\021\277\352=\265\275MJA\276\232\266\317\276k\324\303>v\251\021= \322o>\314b\322\276\004\216\204<\032\213\346\275Ze\206=\207\277\016\277z\344\017>A\233\034=#\204\367>\333\242\254\276\226\317\362=4\205\216>\222\313\237>\023\017\230>\202\034\264>\200\237Q>[\227\232\274\332U\010\275\360\334\373>\260\311\252\276\354\243\243>\036\371\303\276Tt\244\2760\234\253=&\252\367\276\331\010\224>-\225\007?6YC\276\312l\020\276\216\036\277>\'\302\206>\333m\207>>\355\360>\2652\341=9\321.>2UH\277\013cK\276l\260\260=-!\177\276\367\314\322>RE\261=g\362->\374\251\361=\212vu\276\343\252\362=\2076\240\275\203\335\300\276w\370\023\277=\325\221>{\275\373\275C\305x\276\330\232-\274\260\376\317\276\331|\024?)\226[\276\224j\'\277\2338\331>9(\201\276\365\333\347>\033\330j>\024\\l>\366\013\246>,+m>\240\032\257\276=\nw\276a\303\243\276\257w\237>|~8>M2\322>j\300`\275\244\344\325>P\\i\273\317I\277>\262F\035\276p\353\276\276^.\342\275\360\026h>Dn\206>!v\226>\351\232\351>\353;\277<\306\334U\276\246\017\005\277\241\276\305>\330\330\205\276b\023\231<\275\343\324=\324\232\006\277n\027\032>\251\373\000\277\035r\023\276\224h\311<\206U\334>s\235\246>#2,>\272k\031\277\203ix>\207\242\220\276kl\n<\211\230\362\276\236{\377>\271\245\205\276c\264.\276\\\005\014\274s\200`\276\253\tB\276\004\004\363\275V\232\004?Kv\234>\350\237`>`xe=\324}\220\276\030\262\352>\365*\262=3\376\255\276\034\353b\276\033\273$\276\261\026\177\2765\007\010\276NG@\275B|\340<x\271H\276Oy\364<\365\326\200\276\016\363%\276\366@K\276\233\217\353\274\332r.>\212<)\276\"\303\312\276\025\000\223\276\200\267\000>N\362c\275:\222\213=\360\212\240\275\205\261\305>\376\353\001\274\035\361\032<\365g\257\276\326\034\240\274\377\225\305\276\320\320\237>S\"\231\276*\214M>B\356\302\275i\251\374>Y1\274=\237\315\352\275KY\016\277\302/\025\277;\344\006>vlD\276\242\353\302\274\3225\243>[\316\245>W!\305>\030!\034\276P\031\037?.s\232\2769\234\371\275\357\343(=\262\327\013\277\355*\304\276\265\340\005?\262c+?\253\004#?\306\334\025>\020u\037>m\342\264>ai\005<4\277\032>\223\306h>Ae|\276\206Z\323\275\240\375\210\275b\370@\277\337\032X\276+0\204>\261\304\203\276\256\266\"\276\210\327\025>1\231J\276\315\344\213>\340\241\210>JA\367\275\333\212\375>\337\025\001>\231\236\240>\337\030\202\274\027dK<Yi\322\275\317\240\201\276\331\010\264>\263\006o<\332\001\227\275t\0071\275\032\300[?A\202\222\276\261l\346\2732\003\325=\356w\330>z\216\010\275%\222h\277\370\337\352\276\251\301\004?\357\311\033?\243\351\014>\240\375H\276\263\315->\037.\331>[\266\326\275\227\213x>\373:\020>\217\307\014>\300\225\214>Sy\003\277\305\217Q>\263\315m>\256\266\302=\301\377\246>JF\336>\210\272/\276y\001v\275U\373\264>5\230&\277\341\227\032\277uv\n\277C\342^>\2755\360\275\237\217\262\274\014<W>\300\347\007\276\235F\332\275\322\306\321\275\324}\000\275=~7?\356B\303\276\322\035\204>\3578\005?j\274\204>\201!\353\275\030C\231>\177\274\227>\242\321=>lx\332>`\037\355\276\371\240\367\276WC\342\276\210e3=T\375\312<\027eV\276\304\261\376>\323j\270>\357\003\300\276\276OU\275S\005\033\277\340\200\026=\020X\r@\334\200o\276T\000\214\275K\352d\276\222#]\275\245\240\033\276\270X1\276\306\212Z=\014\002\323?6\222D\275\211\267\256\275\021\344 \276\221\355$\277\217\337\313\276\004V\216>\316S\035>\312\300\001=\312\371b=\201\222\202<\276\023\243>\367\223q\275B\n\036=\321\221\334=a2\325=\224g\236\275\257w\277>\306\371[\276\3122\304>q\003\216\276\253\354;\276\022\240V\277\002\267\256>\\\346\024?]\341=>\005\335\236\276\\\3464>\231,\216\275\233=\260\276\372\355\013\276\261\247\335\275\372\nr>\326\220\250\276\006\r\035?\314\356I>\213m\262=v\340\334=mV\235>&\337\014>\371\275\235>B&y>\001\244\226\276\360\351 \274+\207\016?e6H\275\341\265\313=Ra\234>$\177\300\276\236\357G\276rl==\2068\026\275\2402\256>\220\240\030>^K\310=\n\205\210\276\305\312h=\210\3630\275+\373n\276\263A\006>\301\377\266\276\254\255\270\276c\264\236>&\001J\276\005\243\022\276A}+\276K{\3369,\324\032\276\362]\212=w\333\305\276\265\250\317<\013)\177>\230Lu\276\311\345\037\276\374R\377>9\227\007<\357\311C\276/\243\030\276\306\242\371>)]z\274 \r\'<\037\272\300>\224j\237\274\344\203\216\276\247y\'>|\017w\276\354/[\276}\313\\\276:\006L\2779\271\257>\\\344\276=A\201\227=\036\376\212\276\302QR>\2029\032>Y\332\251<\207\277\346=\2379\353<\020\351\227>*\306Y\276tA\335>\372\362\002>@\301\225>)\"C>\376\016\225\276v\032\351\275\245\243\034\275\005\305O\276\371f;>\320\233*\276|\325\212\276\314C\246:\214\331\222=8J>\276G\003\270=\361h#\275\352!\312>\237\\\256;*X!\272\353\250\212\276\240\337\267\275\241g\223\276\2657\030\276\345\362\257\277\025\035)>l\354R>4.\034>\2649\016=ZG\305\276\003\260\301\275\242zK\276\242\234\000?I\364\222\276\200\266\265\275\r\374h=\267\234\013>}\350B>\272,F\276\006d\317>[\316E\276\363\223j>)\355\315=\320\263\211\276\346=\016\275o\r\254\275\374\305l=\034x5<\271\2161\275\246\320\211\276M\370E\276)\"c>\360\277\205>\203\335\360\275%\257\316=\023f\032\276al\361>!v\346=s\364\210\276\005\335\036\275\377\225\025\275\250\307\266\275\352!z\276 \177)\275uv\262\274\203\372\266\276\224\334\201\275M2\n\277\315\254%\274\2654\3309\240\301\306\275_A\332>\037\235Z\276\2343\322\276\267b\177\276\277\201\t\275\022\245\375\276\276M\037>x\227K>\301\377\326=\274\221y\276\340\020\352=\004\343 \275\026\244\271\276\tP\323=\223\030\004>o\360\325\276\032l*\275\365\241\253>\213\342\225=\256\323\010>\321$1<I\242W=\262\205@>\025\214\232\276\2755P>5)\245\276\312\246|\276LOX>\363\223J?\000\256\324\276Gr\271>5\177\314=\206\350\020\275V\237+\275\221\325\r\276\326\213\201\275V\237\013>a\026\272=(~\314\276\005\341\312=K\352\244>\275\000\373\275|\357\257\275\277C\321\275y\351\206>\030`?\276\355\r>\276\301\342\340\276ff\246\276\337\340K\276\346\2266>`\260\213\276\273a\253>\345\267\250=\370S\003>\207\026\311>\266\021\017\275\003[%>9\325\332\274\342u\315>_A\312\276\354\301\204\275\214\363\267\275ca\210\275V\324\260\276>\223==\376\232\274>QM\311\2749\356\244>\306\341\234>\366\356\217\276v\275\331;\232\262\263=\330\365\013\275\r\216\032?\207\247\327>\0008\226\275\242\234\210>\nh\"\276\206Zs>\013$\315\273C\004\034>J\265o\276Q\367\241>\362\357\263\275\321?!\276\t\212\177\276\361)@\2762!\306\275LT\217\276\037.y\276\325!\247>d\036\231>R\362\332>\374\000d>\324\3242\276\341&\243\274T\306\237\276G \256\276@\207\031\276T\214\223\276=\n\027>y\346%\275\024\350\323\275}l\\;\211\322^>\370\374P\276\023D\275=\304\263\244=\026\335z\275\\\033\232\276\025W\025\276\223R\220>\362Ao\276\223\251:?P6\245\276*:\322=\035\314\306=,\016\207>\324e\361\275\257\224e>\243\351\014>E\330 @\305\254w\2762\311\010\275\367\221[=u\345S\2764\364\377\276\r\216\322\275(\017\013\276bg\"?V\361\326\276\201\225\343\276\035U\315>W`H\274\337\342a<\205\351;=q \004>B\354l\276\262*B\275\033/\035>\235h\027>\013A\236\276\215\234\245=L\303\260>\262\023\276=\364\373\276=\374\214\233>II\217\275\211)\221\276N(\244>\3707\350\274\273\325\023>,\323o= \230C>3\371\266\2760c\212\274\025\306\026>\264\223\261>\274\005\242\276_$4\276Q1\316=$\234v\276/Q\r\277`\352g=\365\204e\276\333\026\225\276\353\036Y\274\350\273\033\2757\340\223\275f\367\344\275\343\305\302=|\362\360=\031\034\265>\270#\\\276b\241V\276g\325\307>q\255\226=\317\275\'\277\301o\303\274}?\345>$b\272\276\222\"2>\027\017\217\275\t3m\276\335\014\347>~\306%>\322\343\037?\224\331\300>\366\264\003>\311\216\215\276\323/Q=\302ia>\352!\272>\331&\225<L7)\276\017\321\010\276\245,\003\275\253[\215\276\325\312,\277\237<\034\277z\252\343>\252`\204>\237<\274\276J\014\262\276\352\225\322\276\257\3537\276\t\376\027\276\325\\\216=\275:\247\276\217\251;\274\345~\007>\362\230\361\276\311\223\004>\220/\241\274\264\223A\276\226[z\276+\373\216>k\016\020\277\241e\335<@O\243=\324\271\242\275\304B\355\275\230\027\000>\246\017\255\276\317\203{>\320\325V>\202:\245\275\202\342\207\276\331%\352\276\221~\233\275\340g\274>\373\"\001>\352!\212>\363\037\342\276\330*!\276i\343\210\276\"\303\n?\270;\013>~\214\251\276V\324\200\276n4`>\002\267\276\276\361hc\276\355\177\000\275_AZ\276t\014\310\275\305\376\022>\005\027\213\276\216\312\255\275\345\320\362>\336T\304=pw\326=\211A\270\277\r\375\203\276\340\202,\275l\225\260>f\203\254\276i\216,\2740\273\207\276K\315\276>cBL<mu\271<\245k\226>\t3M\276h\t\262\274\361)\000\277\346\313\333\276\260 M>\362\007\223>+\030u\276\201x\035\276\277\'\226\275W\225\035\276\003}\342\275\345D{\2764\242\024\276E\327\005\275\024\226\230>\313U\342\272\t\371`\276y\223\237=p\261\"\276\266-\n\276\373\345\223<\264v\233>\325\347\n\276\334\327\221\276\246\272@=A\351\260\273:X\217>\224\336\007?\226x\000\276\025\251P>\210F\207\276\006\273\001>\213l\007\276\324\263E\273\017\024\323\273\341\316E\275\332W\236<\026\334\257=m\034\321>\330\360\204>\014\255N\275\013\357\262\276#\333Y>\377\317\221\276\275\374\316<\016\370\374>I\234\225=\376+\353\275\263\014\261=\266\241\002?\373\256H\276\225`\361\275\313\204?\276XXp\275\330\273?>\364\370\275>\345\267h=D3\017=xD\205=K\253\301\276\340-\200\276\350\371\323<\006/\332\276w,v\275J\007\213>Q\240o\276*\3069>\2654w=\027\323\254\275\213\032\234>a\032\246>{\327 =\341F\312\275\034\231\207\276z\252C\276\260\000\246<=\233\025\276D\242P\275LT\357\2759\361\265\275\005Q\207>m\034\241>q\246\256;ga\317=1\266\220=\305\377\235\274c\321\204>\344\332P\2768\020\222>\325\tH>\374U\300\275\271\215\246=\002\016!\276\265\031g=\233\003\004>\317/J\275\032\321\207;\254VF\276\303\365\210\276q\3111>\024\226\270\276\336q\212>\003yv\275\023(\342<\223\000\325>\007\2675\275\\ a\276c&\221=\2244\237\275\311\310\311>\340\276N>g\'C>\2029\312>\306\341\254>o\022\223\276\"\337e\275\020#d>G\254\365>A.q\275\216\257}>l&_<\274\"\270\276\256\365\345\276:;Y\276\323\021\300=\222t->\027\361]\276\021\2524\276\2072\264\275\344f8\274V\237\353>\273\362\211>\005\2432\27628\212\275Nb\220\275\200\323\233=\301\034\035\276\311\310y\276\236\322A>a5V\275p\266\231=\376EP=:\314\327\275^\367\266=9\326\205=|\325\272\276\317\332\355=\235\234\301=:#\212>\330\267\023;\254V\266>\361\235\230\276\333\277\362=R\362J>8\370\202>vq#\277\254\255\230\276\327\372\"\276\303d\212?\222?\250\276\032\206\217=\252z\036\273P6\205>\rp\301=\355\325G\274q\3142=\205|\360?\272k\231\276E\330\260\2764\272#\276\222\256\211>zSq>#\241\335\276\017+\274\275\034}\014\275\241\333+\276\025\216\240\275\266\241\322>\3750\362\276\347\3064>\233\254\321>\356B\203>Yj}\275\330\266\010>\"\032\255\276jg\030=\003\317\215>\210\205:>)\347\313\275\346=\256\275fM\214\275}y\301>\372B\210\275I\364R\276*\'\220:\300\354\276\275J\230\331>^iY=[\224Y<\\=\347\275\232%\001\276\370\031\367>\342u\035>\254<\001\273\312\255$:W\225=\276\364\370}>\331\316\207\276cEM\276\224\025\303\275\267\232\365\274Q\024\020\277Qf#>\333PQ>5}\266=\242]E\276d\223|<k3)\2734\205\316=@j\303>\031\377\316>\206Z\243>\341\230\245\275\304\010\361>\344\332\260>,e9>_|\321\274\t\304\013>\022\367\310\276cG\243\275\246\320\231\276\316\307\035\277qY\305=\020\226q\275\016\025\343\274]\212\253>n\027\312>RI-?=\'=\276\366zW\276\350\233\331;\234\341F>Jy\255<\237\260D>\224\274Z>M2r\276\276j\205>`\255Z\274W\261\270==\017\016\276\022\367\030=\226\354\030\275t\324\221=\035 \270>\361\364\032\277\270\006\306>\003?\252\274\265\246\031>U\207\034>\t8\014\277Y\335B\277\367u >\3441c>b\025\017>\025W5\276h\256\023>\263\230X\275[_\344\275\034(\260\275\325x)\276\312T\321\276\313g\031\276)\\\217>\220\332\204>L7I\276y\0016\276\354\210\243=\366\227]>\211$\212>\"T\331\276}\\\213>\370\302\364\276\317\275G>a\032\006\276q\311\361<\026\242\303=b\241V\276\232%\001\277=\233U\276w-\311\277\242\177\022?\2657\370<\007%\314>\237\315*>\035\224\360\275\272\3670>_$t>S\005C\276K\260X\276\243XV?\256\273Y>\367X\272>+\336\310<H\211\235\275,eY\276]\341}>o\r\214\276\345!\370:If\225=\326s\022\276\2201\007?\306P\336\276\3475v\276\337\340\333\276^\021\234\276\032\335A>\237<\354\275\331Z\277>\3539\271\276\325[#>\251M\\=z\344\237>\016\333\226\276\250\035\376=\352\t+\276\024\005\252>\304%\'\276\234\304\360>\207\206\305=\215\356\200\276\227s\271>\327\032%;\332X\311=R\355\223\276\321\\\007\276x\177\314\276|~\350\276\233rE\277;\252\212\276\275\343T\276\006\365m>\271\252\214\275\317\240\341\275\t\341\341>\336T$\274\260=S\276`\310\n\276\333\247\203=\277\361\345>>\355\020>k\232W\277\367\307\273\276t\316\257\275_{\326>&\337\374>\247?\233>\252+\257>\345\233\355=\263\014\221>\3500\037\276\337\032\210\2767\303M>\034\353J\277\025R^\276.\255\366>+L_\274\275\214b\275\204\360\350\276M\370E>/\206\202\276\027\327\370<N(d>\251\023\030?5$\216>v\336\206\275_\233M\275\362\230!\276\373\350\004\2776?\276\275DQ\360\276\221\362\323=\002\274\225\276\223\306\230>CY\230=\246\214\311:<\203\206\276E\236\264>\003[%>i5$>ds\325\274~o\223>]\026\023\276 A\241\2761\323>?\211\007\224\276<\332\250\276\001\210;=\354\204\027=<\207\262<\265\300\036=\275\373\343\275\366\264#\277G\001b=\\U\026\276S\"\351>\022N\013\276I\364r=vO\336\275\365\204%\276\232w\014?\300\347\207=~\343\023?\353\341\313=\335\230\036\276\262F\215\276\244\302\270\276z\246\027\275\247\256\314>\310\353\241\275\257\010\316>\303\273\034\276\221\n\223>\235\205==\006\177?\273-\317\263\276_D[<t\230/\276\321Wp\2767O\365=\250RS>L\307\\=HmB>\250\251%>7q\362\276\350\366\262\276f1\301>B\"\215\275\325\t\250=bg\212\2768\025)\276C\004\\>\003C\306\276M\025L\275\033\330\232\276\026\301\017\277q\033\315\276\035\217)\277W\260\r\275\331w\225>\311q\247\275\370Ss?\001\373H\276\030}\245>\014\002\353\275\264\2239?5\265L>\307c\326\276Ae\\\276aT\022@!\002\276\276\2240S>\260U\262\276\332\033|\276\023~I>ke\242\275#J\273\276\276\301\227?\032\ni\273\346W\023?Z*o\276n\027\352\276\"\211>>\321?\t?\355\270a\275\211^\206>\306\371\233\274\351\270Z\275AH~?U\300=\275\253[\025\277\372D~>b\363q>M\025\274>\215]\322\276M.\306\274m\342\304\276\337\211\251>Pp\201\276\276\300\254\2744\242\224\276\351\267\237\276\322\306\301\276\\rL?\252\324\254>`\310\032?\035 X>:\225\214<\375M(>(\325\256\276\263\352\243>\313\333\261>C\004\034\2774\272\223>ni\365>\314\264\025?\2755@\277\227V\343\276\333\271\325;y\036\334\275\2447\274=x\013\224\277\r\211\233\275<N1\276\232\261(\277\215\264D\277j\3312?f\026!\275\227\034\267>\362\260\020?\352X\245<\311\216\375\276>\"F\276\323\331)\276\000\221V?\036\033\001?A\267\007?M\370e>\237\260\304\276\037.!?F\353H>k}Q=\253\350\257=J$\241\276\263\265\256>\271\374G\276\241\363\022?\243ud\277\334\272\033?\320F\256\274\265\032R>\035\224\240\276\303\365P\277\021\001\227>\032\027\256>\343ko>\331\010\364>u\000\204==~/\276,\324\332\275\020\3517\274\370\371o\275\t3M\276^\021|\2764\327\271>9\264\020?N(\004\277LTO\277Z\204\342<Q\240\317=\351`}\276-[\233\276\242z\233>\002\232\330\276\364\303\020?i\000\357\275e\302\237\276+\331\021\277\025r\245\275\200\326\274\275\257\316\361=A\202\302\276\224\366\326>t$\207\276~\306\025?\276O\025\275\261\374\371\274^\327\017\276\336\310\374\276\'kT=\034\261\326=J\322\345\276-[+\277\207\335\267\275\326\305\r>\364\2462\277\343\215\334\276\324Ct>S\263\007\276\223\035[>R\'\260\277b\363\361=\005\372$>DQ\000>\366\232^=\331|\014?:\351\275\276\330\323\316\275\006H\224\275\205_*\277\3377\256\276\264\005\004=\251M\234\275(D\300>9\356\324\276\3063h>\253!\261>\235.\253\276[\224\t\2777S\301=\260\035\214\274o\360\205\276B[\216>\242*\206\275\267\323\226=\036\371\203>\232C\022\275\255/\022\276\302QR\2767\032@\276\352[\016\277\336<\245\276s\205\227>\310\230\313\276[\356\314\274QlE\275\320\320\257\276\204*5\276ep\204>\244S/?:;\251\276G\311k\275\303\273\254\276\'\245\000\276\233Z\226\276\275\373C>\235\270\\=Z\363\343\274\212\315G>\007B\362=_\230\024\277.\255\266>\221a\035\277\"\246\004\277oG\030>\343\337_?&\337l\276\3274\317>\274\347\240\275\351HN\276\362\260\340>6\037\327\275\016/\210=\360\371!>2Z\247>\315#\237=\267\013\r\276j\366\220\276v\250f=T\345\373<\326V,\276$(~\276\242\356#>\247\226\215\276xb\206>\323D\351\273\266\271\261\276\332U\230>bJ\264\276s\017\t\275\201C\250>}w+\275,\202\277>\372\362\202>\265O\'>\266H\232\275&\215\261>a\3409>i\035\305\276\032n\300\276\002\202\271\275\357\311C>\243X\236\276\267\356\006>/\300\216\276\271\337\021\2771\261)\277yu\236\276\013\322L\276\240\303\374>\343\302\261>\371\206\302<K\002\324=\210\021\222>K\315\316\276\326\034\320\276{\327 \275\023\270\025\276>\005\260>H\341Z?\007_\230\275rP\">\373\353\225\275%\314\224\275\'k$?\215(m\276\310q\361;\345\263\274\275\227\035\202=\343\375\230\275\374\251\261>B>\330>\301\377\366>\323\0236>\203\335\020\276}\313<\276\243\222z\276\004\347\254=\222D\212\272\235F\332=\212\310\200\276\355\365.\276\017b/\277\364\025\004\276\332\000\254=\205\266\034>\231d\344=\326\377\331\276R\017\261\276\312OJ?\225\237\204>\017\264\002\277R\234\243=l\005\315\274\025\343<>\331v\332<\352\354d>C\220#\276\227\220\317=\010\217N?<\242\202=\335\265d>\332\376\205\276\263^\354\276\301t\032=\352\317\236\275m\255/\276\362{\033\276\013^t\276\220k\323>G >\2764/\207=\361\021\201\276\305 \360\275\037\277\207>|\356\204==\270\373=\020x\300\275\325<\307<\302\206\037@\223\304\222\274\276\332\221\275\207\304}\276\\U\206\276\213\375e\276r\341`\276[_\004\276\374\030\213?\362$)\277\324\200\001\275\304\320j\275\037\023i=5\014\217\276m\347\313\276$\356\021>\007a\256\275CV\027\276\357\215a=\315\000<\273\2510V\276\203\335\220\275@0g>\027\237\"\276\275\343\324\275\234\341\306=\250\000\020\277\263\230\250\276\343\210U\276e\272!<\370\342K=\020\023\303:\364\246\">\2450/=\252\2500\273\342\257\311\274\272\275D\2763\371f\276U\366\335=\002\177\270=\217\031\010\276\274\263\246>\030x.\276@\023\341\275\334\235u\276\272\371\306\274\270\037p<!\260r\276M\272\255=T:\270\276\002-\235\275\316TH=\\\033\352=R,W\276\366\227}>,\235\217\274\217\245\017\276\3062==\270;k>\327\243\360=4K\002>f\334T<\272\332\352>\356Z\322>\235- =\260\346 >\225+<\276\334c\211>j\026h=\211{,>\316P\\\275\3371\274\275\216;\345=q\311\261\275\021p\010\276!<\032>\024y\242\276\'\024b\276\3171\200>/\300\256>\035w\272>\036S\267\275\236Ac\276B\225z>v6$=\313\271\364>,\272\365\274\306\320\373:\016\022\202=\361\021Q\276?\221\207\276\035rS>\345%\177<\310\357\215\276\373\"A\276\376\267\322\275w\326\376\276\346t\031>r52\274io\200>\204\365\217\276;6B>\222\353\206\275\334\r\302=\246\017\035\276!\222a\275\007%\274\276\246\355\177>\363\257\305=t\007q>\232w<>\256\202X=\235.k>\365\326\000>\261\026\037>`\3450\276\263\315\255>\263\315\315\275V~\231=@\244\277\275\330\330%\275\002\240\212\274\244.\276\273\tm9\276\023\017H>\265O\347>.\220\340=\016Oo>\272\332\312\275W\n\241\275\224\373]>\363Y6\277rN\314\275;\252\252>\347\214(\276\353\306\273\275\n\235W>~\345\301<\325\355\354<\"\216\365=u\037\000\276\214K\325\274A\327~\275\223\343\016?\r\274\244;\205%\236\276\221&\036=u\3453>E\236\344\275\277}\335\275H\033G\276l\262\226>\260\254\024>\327\240/\275\305\311=>L\301\232<\245k\036\277x\271\010>\023|\023=\355\r\256>keb>\270v\242\275\262\017\222=\321\0055>\362\265\'>]\371l\276s\327\022\2760\364\310\275\254\375\235\274 Aq>\205%\256\276z\342y\275a\246m\276\215\177\237\276\032\027\316=Qf#\276\206\254N>\363\345\205\274\'\367\373\275%\260\271<\212\345V\276\271\031N\276\001\374\263\275\260\221\204=)\313\320=\353\3426\276)?\251>+5[>O\257\244\276Z*/\276I\272F>c\271\305\276\210\364[\276J\010V\275\177\331\275<\266\241\362>>\226>> )\002>\"\216U>\372\n\322\275r\026\366\275nL\317\276\356B\363<\320\235\340\274\313\242\013\274z\307\351\275\225)\246=+j0\276\233\003D>\3433\331<\030\\3=x\356\375\275\266\276\010>\001\030\317=\344H\247=lx\032\276\257f\370;WCB\276N\234|>\317Nf>\007\010\266>K\310\247\276qr_\276\227\220\017>\326s\222>\2504b=\373=\261\275\341\356\254<\005\372D\276\303\r\230=\342?\235= \025V:L\251\013=\271\302\023\277_A\332=\314\013\220>\321\005\365\275\243\314.\277\203i\250\276=Iz\276\026\275\323\274\254\212\025<)\\O>b\272P\275\342#\342\275\366\2313<*;\235=\267\013\315>l\225\320\276\336<\345\276\277\232\243>\222\312\024\275\364\210Q\274\272\3670\276t$\027> Aq>\242\'\245=\373\005\273\276\210\266\010\274\351\267\037?\026\244y\276\372(\243<\253x\223\276\007\357+\274\347U\035=\021\374\357\275\365f\224\275\317\275\'>\376\016\305>z\373\363\274\n\021p>\325\t\350>\242\264\027>%[\335\274\354\337\225\275\325\347\352\275\252\273\262\273,\267\364>\0220\272=s\203\301=\372\325\274\276\303\r\030\277$&\310\275\213\211M>\251\244.>\030-\233\273\350\245\"\275\307c\246>i\036\300\274\351\361\373=\014\223\251>\210\235)\276\177\301\356>\346\313\013\276\300\347\207\275\257D\300\275\r\211\373=\004\312&>\337\246\357>\3539\271>Tt$@\217\344\002\277\241\241\377>\030!\374=\\r\214>Y\213\317=\02658>\006\022\304\276\024\256\277?\352!\332\275!\313\242\275\231G~=\201\225\323>\2451\332\274=,T\274\340\236\247\275\rT&>\237\002\010?\252\364\223<\330*\001\276%X\004\277\216@\254\276\2512\014\275c\321\224>\377\262;\275\332\217\224>\240\340\222\276^e\255=\024\"\320\276\2235\352=-\264s\275!\256\034<G=$\276\213RB\275\234\024\306\275\205%\336=?\377=\275\230n\202\276\311\310\331\274\215\234\225\276o\330\366=\357\215\241\274j\367k=L]h\273b\204\360>L\3406>V\016\235>Na\205\275\234\334\217>\021\303\216\274\331_V>\214\326\321<S\221\n\276V}.>6Y\263\276\025\343\274>\025\214*\276rP\002\276[\322\261=r\313\"<\212\223\253\276\312\025\316\276\'\240I\276\"l\030\276\351`\255>\324C\204\276\257w\257\276f\300\031=v\340\034\277\375\332\372<X\342\361>\2132[>d@\226\276\"l\350>w\202\275=\023\357\000=\226[\252\276#J\223\277\001\0238\274A\361\003\276\023~\251>!\2247\275\317f\325=\266\333\356=\207\026!?B]$\274\246\264~<\325<\207\275w\363\224>i\304\214=\314\226\314=$\234\306>\031\220\035\276\035=\316\276\032\370\221\275\316\337d\276\027H\360\277\005\206,\276\031\305\362=\3539\211\276\265\246\031>\203\211\237\275\225\237\324\275\346y\020\276\234\213\277\275\247wq<\035\311%\275\313\241\205>\315\\\240\2755F\353=\203nO>P\215\307>C\004\014\277a2=\277\303*\256>\371\345\002<d\352n\275\230mg=\231a\203\275)\313\220\276\037h\265\276\3642\n>uuG\274\260\346\200\276\277\202T\276h\037\253\275\370S#>\377z\205\274\210c}\276\263\014\t?\225\360D=5$\256\276[_D\276*:\002\277od^\276\003\317\235\276z\252C\276\304\231\277\276\310\322\247\276\266h\001\275\305\254w>}\220\n\274o\017\242=v\211\252\276\023\017H>2=!\276A\237(>\240S\220=\200\356\313<p\265\316\274\rT&\276Ih\353\276\354\027\354=\367\307\373\276\000T\221\275\365\235_\275o/\351\276\"\250\272\275\0265\310\276\366\007\312=\372\317Z=nQ\226>\0362\345\274\374\030\023\2761\2660\277\353\250\252>\340\276\016\276\371\367\001?\261\304#>m\250\250>_b\314=\020zv\276a\244\227\275\253>\227>\226\t\377\275h\320P\276\253(9;\350\241\266<\307:\013\274\375\202=\276:\314\227\275nn\014\276\234\026|\276\214\275W\2759\264\010\276\356\314\204\274\234\3715>\262h\212\276\'\332U>\203L\362=\231\022\031?6\2605\276^\327o\276~\306e\276\210\272\017\276\253\317\225\276\345\270S\276\357\376\230\276\"\340\220\2762 {\276X\305\333=]3\331\276\313\273j<*\214M\276X\220\306\276\300\354>>\301\345\261=\377\347p\276\204d\361>\220O\250\275\013\234\214\275\237<\234>\265\371?=\245\024\244\276\366\316(\275\032S\220=\207\334,>\306m\344\276\220\203\022\276\232w\034>PS\013>v\340\354\276A\016\n>\035\346\013>@m\324\274\010=\233>*\003\247=P\215\027>U\206\361\274\035\217\331\275\300>\372\275\200\363\"=\036\334\335\275X\217\273=\216Xk>\334c)\276\3270\003\275\241f\250=\311Y\330\276\261\341\231\276\'\366\260\275~\247\311\275\334.\004\277\013G\220\275\306P\216>\236\232\253\275\270#\\\277z\252\243>\310\014\344\276T:\330=fNW\276s\200`\276\215\360\266\275\314z\301>\207\242 \276\306\334\245>p#\245\275\327O?=^0\270<!\223\\?_\265\362>\251\207\210\276\031\034e>\007\231\264\276\013\0141\277\324\016\037>\010\307l\275\242\234\270>\210\205z\276\247\221\346>\244\215\363>&\3742>8\276\026\276\034\316\014?\226\315\234\274dx\254\2759\271\'\277\343U\266\275\232A\374\274\333\247\343=DL\t\276\273a\333=\364\336X=\211A >\254\034z>j\241\244=\242\177\202\276\253Z\022=:;\031>\202\375\327<\"\245Y<>\263\244>\343kO\276\206U<\276M\025l>\021\\\335\271g\325\347=\005\300x=\235\234\241\274F\"Y\273\355\236D@\351}C>!!\n\275-x\321;\300\t\265\276\355\201\206\276\022\237\273\274\202\252\021=\006\022\224\276%<\201=\324`Z\276l=\303<g\325\347\275\235F\032\276\335\352\231>\337l\023\276\036\033\001\276\340\276N>{/\276<\216\314\263\276\213\032\024\277\344I\322\275I\364R\276\225\237\324\275]3\271>\034_\233\276\313\326z\276\355\357l\275\323\335u=\007\265\237\275\357\254\255\276E\201\356>\331_\326\276\342\315\032=\220I\206\276\300\225\354=\227\342j\276b\020\210\276\346\"\376\276\221,\200\275>\t\354\274\217\252\306=\273\3629\276G\346\021\276U\301\370>\202\213\325=A\267\027\276GU\263\276aU\235\275\337\031m\275:\314\327=bJ\004\276:\036s\276\362A\237>\017bg\276@\373Q\276\312\304\255<\346v\257=#e\013\275\211$\252>\217\337{>\242b\034\276\235\016d\275J&\'=yu\356>y\260\305\274%X\034\276\214-\224>;\252\332\276\254\213[\276(\360\256\275\212\002\035\276\\\312y\274\211\265\230\276\300\317\370=\343S\340>=\325\001>\031\004\266\276s-\272=\303\r\330\276\261\212\267>\255\211\305=\033\022\247\276z\030\332\274\030D$\273\004\252\237\275\021\344\260\276e\001S>-\262\315\276\367\257,\276QN4>\236a\352<\323O\270\275=,\324\275T\000\014\275\361\021\341\276\337\0328\277\203\333\232\275*\034\301\274\326\250g\276*R\341=uv2>\334\302\3366\221\362S>\025\306\026>%\351\232>/\027\201\276n\243\261>\221a\325\275\217\245\007?\225\202\356=\313\271\204>\361c\234\276X\220\006>\234\303\265\275\365\203z=\334h@>Q\326\024<\014\037\221\274Z\3651\277\261ie=KuA\275\277H\350=\361\364\232\276K\006\000<\025o\204>\233\033\323\275\311\037\014>/\206R>\000:\234>\0049\250\274\246~\036\277\363T\207\2762\217<\277:@\260\275\265k\002=\327\370L\275\311\002\006\276`\037}\276z\245\274\276B>\010>aO\333\276\3544\322\276J\265\017\276\023\n\021>\320*s=\342\036\013\2751\226)=\275\343\204>\243\0063>\335\230^>B`\025\277\227\034\007\277i\251\214\276:;\331\275\211\316r=\230\243\007\276\247\226\355\276\331\027\032\274\336Y\033\276\301\216\377<\267b\037>\177\332(\2758\204\212\276\305\311\215\276\355\202\201\275\344\332\320\275A*E\274Pp1>\214gP\276\213\303\001\277ep\324=c^\307\274\317\240\341=\376\232\234\276I\3642\276V\274\321=\303~\017\275aT\322=K\037\212>\315:#\275\326\342\223>\2505\r>\207\341\263\276\227s\t>g~\365=\355\273\242\276\267\264\372>\311\253\223>k\016\320\275%\"|=\017{!\2751\353\005>\276\274\240\276\206=m\276R\355\203\276D4:>\001\336B>S\263\247\276\006\236[>_\357\236\275\206\033\025\274\213\303y\276\332\376\245\276\307\327\316>\375\237\323>Lo?\275\254\250\341\276\'\332\025\276\361hc>\'\241\224=\342#\302>\267\177\345\275=\016\203=\306\304\246>!\345\207\276,}h\276OP\324\273\250:D\276\r\306\010\275\204\274\036\275\027\202\\>\346\226V>\223\373B\273\213\247\036\275Y4\315>\310\352v\276Ic\014\277A+\020>\322\251\253\275\233\217+>\254\213\313\276\236\230\365=C\034\253>l\261\333\274[\323<\276\332 \023>\227\312\233>^*\266\275c\316X\273\252d\300\275I\327\004\277\260\254\024\276\201=\206\275\347\035g>\027\237\302>[\010\302\276\334K\312>\255\372\334=9(!\276\327\026\236\274\037\327\326>{I\343<l\3542\276;\337\217\276\025\2510>\311q\347=w\025\262>\316\210\322=\327\300&\277n\276\261=\311=]=\020\351\017?\362\010\216=\357\033\337\276r\247\364\275\001\340\270\275a\213\335<\343S\360\276I\271\273\275 )B>\223\215\007\275s\364X>\325\354\221>6\253\216>\365\201\344<\314\356\311\274\334.t=d@\366=T\306?\276U\030\353>\251\244n\276W!E\2768\020\302>\351\267\237>\304_\323\275o\323\337\275\254\342->}\\\013?pwV>\232\224\">-[K\276\271\246\200\275\264v\273\276\277\361\325\276\240\246V>\355\330\210\276m\347{>\336\345\002>\367\307;\275\204\236!@\0324\264>\222\225\277=\251L\261=QN\364\275\330\273\177\275\0221E\276\2446\361\2750*\271?\346y\030\277\217\212\237\275Nb\240\276\344N)\276\216\222W=\217\245/\276\310\261\225\275\036\306d=_{\226\276\016OO\276\227\341\237=\340\275\243\275\017\326\037\276\207\211\206\275\273\325s\275\237r\314\274\313\271\324=\331\010\204>\362\230a\276\030\226\277\275m9\227\274\212\315\307\275Uj\306\276\271\307\202>\014\223\t\276.\004\231>\030!\034>\003\265\030=?t\001\275#J\253\276\333\243\267=v\213\000=<\3328\27628\n\276x\234\202\276\341\0133\276\347p\215=\214\326Q\276Ts\271\275TT}\274\233\346\215\276\017\2719>{I#>\023\270U\276M\204\215\276\357\217\247>Q\206j\275[%8>\256,Q<\033\273\304>b\333\">\035\034l\274h\225\031\275\034\353B>c\321T?\242\263L\275\221\320\246>\353\377\214\276\202\034t>\007\231$\276!Y\240>\344N\311>b\021C\274\262\364A>\277\324\037\277\247\350H\276)\352\254=\3544\242\276*oG\276]\214\201=\251\207\230>\254\031\276;*t>\276\242%O\275\005if>~R\255\275s.\225>f\210C>E\267\236\275\225`\361\275!\002\256\275\316\252\317\276\035\346+\2767\246\207>\260;\275\275\024[\201\275\0216\254>\340gd\277h\256\263\276[\010R\276Eh\204<\324`\332>\371Nl\276\370pi\276\220N\215>\205_\272\276DN\237\275\337\031\255\275\346\311\225\275#\025&>\303\360\341\276\376\232\234>8\202\264\275I0U\274\002\361\232=\330\323n\276\274t\343>\361\366\300\275\216#\016?\'\210\032\276\202\213\325\275\345~G\276\367;\014?%\350\257=k\267}\276\204\365\177\275\263A\246>,e\231>\322Ry\276l\004\322\276\341\356l=x\234\262>Ve7\277b\326k>\t\026G>\317\332\215\276\301\377V>\3647\001\276\267\264\332=\2611\257<\262c\263>\220I\006\276\243\0063>\213\303\211\276\247O<;\037\202*<H\212\250\276RaL>\315\314\254\276i\341\222=\323j\210\276]\334\326\276\225+$?\000:\214\275\252HE\276\337p\037=\323\242\276=\027\237\242\276f1\201>L\216\313\276\r\303\007>)\230\221=5)e>9\234\031>\362$\331>\260rH>\352\317^\276\1771\333<\370p\t>m\034\241>\256\330\257>\371\243(<\320\'\362=\2201\347>RI\275\276l!\010\276C\347\265\276\277e.\276~\036\243\274\rl\325\275 \265\211>\006\201\325>\266g\306>@\023\301=4\020\253\275\033Gl\276,\016g\276\312\303\242\275\224\023\355=\215E\203>S\316\227=\310$\303>\341].>x\013\244\276\211^\366>Z\244d\273Z\022\300>k\232\247\276\322\035d\276\013\322\214>\211z\001=\241\370Q\276\313\271T>9\013[>m\306)=\300\225\254\276,\274+\276\324\202\027>\352>\000>\342\344\036>\360\205\351\276\311\3109\276}\"/\276\221\233a>\245f/>3\025b\274aT\222>\364\373\376;+\366\207\276B\'D=\365\204\265\276ToM\276\236A\223\276\017E!\276\343\210u>a\303\023>\366y\014=Q\203\211\275\301\007\n\274\01629\277\217\245\217\276\350\336\223>\200+\331\2755\007\250>\356\224\256\276en>=\236\007\207\276*;}\273\223\306 \277<\024\205\276\377\262[\276\252\267\246>e\031\"\276\004\033\327\274u\223\030\276\373\255\035=\013\265\346\275\3058_>XVZ>\tmY>\324\361\030\276\023I\244>\007\323\360>?\036\372\274\020\222\245\276\006\236\253>]P\337\275\326V\374>\251\207\210>s\272\234>\377\312B?\264\216\n>\013\230\000\277\253\262o\276\202\250\313\276g\233\033\276%\224>\275g\n]\276\337\373\233<\345\233\375>\304\353:>vO^>\360\304\374>\243\257\240>O#m\2769\227b=/\333\216=\004\347\314=\207\374\263\275Z\236\007\276\257\010\216>:\222+>j\030\016\277H\246C\275\"O2\276\261\277,\276i\305\267=/4\007?\337\303\345\275s\242\025\277\220\275\216>k+\206\2760\022\332\275\030}\205\274\336\002i\276X\342A\276\361\021\021>\371N\214>eP\355\274\034|\241\276;p\316\276\020X-@\025\343\034>\377!\035>\335\266\257\275\363\0372\276\233b\304\273:\2267\275N\357\342\274\\ \211?\273~\241\276\336\216\200\276?t\241\276\031\216g<u<\306\276\240l\n>\030\315\212\275H\026\260>M\363N\276d\354\337:O\005\\=l$\211\275<k\367=oGX>=\230\024=\275\343\324=\234P\010>\201\354\225\276d\257\367=77\306=\013c\013\276>\355\020\276\210\274e\273\235Kq>cF8=\225\221D\273\375hx\275\360\371!\276\033\236\236\276\330\201\203\276\214I\237\275\243u\324=\351(\007\275C\034+>\235K1\2768\204\352=\214\333\210=\327\336H\272C\341\263<\373x\350\274\327\022\022\276)\350v\276\321\313\350=\372\n\322\275\202\253\274<\271\342\342\274\302\331\215\275B\262 \2763\336\326\274\336\216\020\276\347\246M\275\335\227\223=\3024\014>\204\360(>\306\337\266\275v\032\251=\3647\001\276\262\021\230>\26578>A\361\003\276\320\362\034>\204\rO>\3704\'\275\274\221\371=\272,\206\276\223\014\357\2721B\250>k}\301\276\211)1\276\321\262\256\275%u\002\276f\367\004\276\206\001\313=\027\237\002>}\256\226>_\2652>\322\214\205>\356\224\316\276*t>>\355\273\202\276\016\364\020=\357r\301\276b\363\361\275v\251\221=j\373\227\276c\356Z\276\013\265\006\276L\375\\\277\tP\323\275\016.\035\275\001j\n>\246\265)\275E\r&\276\264\260\347\275em\263=\013F\345\275\376\325\203=\224\373]\276\t\337{\275\201|\211=\274Z\356\274K,\337;%\263:\275\322\343w\274\000\251M\276\016\275E\274\204\362\276\275D\250R>\317\2376=\246\270\252\274\2613\305\275\247\222\241=\027-\300<\244\210\214\275M2r=\027\361]>\235c\240\275\323\301Z>K\223\022>\004\312\346\275I._>\251\366\t>gaw\277\365\016\267=\270\257\013?u\345\363\275k\323\330<\256\016\200\274\r\340\335>;\000\202\275\226>4>B`\345\275\274\223O\275\247y\307=\233\346\335=0K\273\274C\215\242\275\335\230>\276\354\276\303\275\240\210\305=)\355->\nh\242\276#\276\323\275V\016\r\276\250\251\005>aT\302\276.s\272\275~\030\361\276\341]\256\2744\327\t>\371\203A>y\351\006\276\"\210\223=-x\321=/\243X=*t\336=\217\241\010<\001X\323;\3020\200=X\346-<w\370\373\276\320&\247\275\267F\204\274Q\276\240<\277\017\307\275f1\221\276\303d\232\276\377\223?<\310\230\033\276<\024%>\226x\200>=\017n\274\256e\222\275\210\022\215=\217\341\261\274a\246\355=\r7 \276\320C\215\275\277}]\276\300\354\236<\376\201\262\275w\204s>\275r\275=\025\032H\275\3230<\276\374\306\027>\236)T>W\t\026>\306\212:>\302i\001\276\001\366Q\276\027\331N>&p+\276\321\346\230\275\004\222\220=\371\024\220\276D5\305\275\013{\232>9EG>j0\275>\353\3426\276\273\270m\276\365\2761=\2554\331>%0\214;\333\371\036>k\017;=\030C\231>\303\363\022\275\036\304\216>\3119\221\275N\321\021>\201\t\254\276\030\007\027\275\252a\237=\010\200\340:\335^\022\2769\356\264\2763\304\261=\351\267\017\276bNP\274\023\322\232=\214\363W>\367\3518>\252\2650\275s\322 \2744\021\346>\225\232\375\275bg*\276f\367d\276\334K\032>\275\306\356\275\301Vi>G\217\037>\236\352\220<K\261\243\274fg\261=\331\353=>\256G\221>\362[t=\345%\277={\206\220\275\n\334\312>*\000\326>\264\3137\274m\305\236>\271T\245<{\351\334;\374p\020\275\321\"\313\276\277e\026?\266\276(\276a\246\235>\010U\232\276;S\210\2766\315\273<}\263-\276\031\034\005>y&\017;\222\226J>\317\367\323\275\274\221\251>$E\224>\323\366O>\030}e>U0*\276&\2476\275O\006\207\276\364p\302=Q\245\246\276\017E\341>\211{\014>\221\n#\276\003`<>\356\226d=\206\346\372\275\246\n\006\276\212\216$>\260q}\275\346y\240\276[\013\263=\036\026*\276\335A\274\276J$\031?\010w\007>\222\263p>E\204?\275P\344\271>\257_\020>c\264\316\275\232\224\"\276\331_\"@\3063(>a\340\371\275\315\222`>\003>\027\277\004\312\346=+\241{\275`\002\327\276\013\265\276?\327i\244\276\345\n\257\275\'\331*\275j\275_\275\013`\212\275<\240,>\312\340\230>\357 \036?o\360\225\276\361\364\212\276\307\272\230>\270m\004\274t\352\352>i\310\230=/i,>D\250Z?\270\351\377\276\003\317\375\275\230n\222\276\330\323^?w\276?>m\034\t?J{\243\276\222\314*=\n\277\344\276\006dO>\021S\n?\201x}>\316\031\301\276\202\250\353\276\336\2160\276V\274\201>\250R\323>E\365\016?\004\312&\2760\236!>\345D\033\276\366\\\306=\320\n\354>\334\327\261\2760\201{\276\327/X\274L\340\026>L\216\373\275#g\341\2755\357\370=\346t\271\276\210\205Z\276\205\0108=\345\234X\274\352\312g\276\374R\217>\026y\243:\315\006\001\277\270<\226\275\316S\035>(F\226=\204\323\362>>\313\003?#\276\303\276\331\224[\277\t\033\216\276\210h\244>}\226G>p>5\275\321?\001\276\315\351\322>7l\033\276Ct\250=\273c1\274\231\273\326\275\200\013\262<\306\277\337\276M\363\236>C\342\336=\226\004\350\276\214\276\002\276\226!\216\276q \344\275\357\341\022\276\236\014\216>P\377\271\275\231\3647=>y\030\276\204*\325\276\345\2703\276vT\265<`\037\005?G\254\365>U\244b\276^\327\217\276\344\017\006>\2073\037>\230i#\277\276\023S>\254\250\001?\204\233\214<\234\341\026\277\253\321+=e\215\212\276%?b=vq\253\276\216;%>:\257\361=\235c\320\276\031\034%\277g&\270=\202\250\373<U0\252\276v7/\276v\340|\276\273\270\275>$\235\301\275\263\261\262\275\356\010\307\276\360\244E=\r\246\321\276\246~\256\276\376\r\032\275j\207\'?>?\214=\340-\320\275\254\312\316\276Cs\335=C\220c\276\306\242I\276\256\236\223>\3230<>\262\022s<\346\226\206\276}$\305\275\376H\321=\00541\276G\217\377\276\357\311\303\276\224j_>$\271\274\276L7)>\312TA=\271\307\322\275#/+\275\020X9\276\356Bs\275\001M$\276\263\014\341>77\206\2764\364\217>\272\365\272=\307.\321=$\326\202>\266\276H\276\036\026\n\276\301\220\305>\335{8<xE\020\276^G\234\274\245O\253\274z\307\211>x\271H\276\177\207\222>\332\217\024\275C\255)\276@\2079\276\334Kz\2760\330\005?W\354\357=\346&E\273y]\337>[\261\257>\324\235\207=U\301p?\327QU>\276\207\373\2766\037\247>\205\231\346\276\343\271\2337\346W\323\276\212<\311>\347\214(=\t\376\027?\021p\370\276\332\346\006>\320a\016?k\324\203>G<\231\275\256\rU>\253\004\273>3\334\260\276\264\260G\276\3745\331=\316S=>\031\255c\276\001jj=\263A\006\276d\2221\276xE\020\276\310DJ=\347\305\251\275\247y\'\276,e\231>\367\351\030>\232\231\311>K\332\036;\200\232Z\276\337\370\312\276\337\211\271\276\021Q\014=\315u\212>\303\201\320=5]\317\274\232\224\n?\264\216\n>\263?\320\274W&\354>?\251n?\266j\267\275\2034\023\2775^\032\276\340J>\277\206\2152\275%\351\332\275#\025\326\276\274\313e>\336Y;>\246d\271\275\016\3336>D\243\033\276\010\311\262\276\356\353\340\276\341(\271>T:\330\275\363\223\352>\2071\351\274\331\\\265\275\341zt\2760g\266\275\215\321\002?xb\016?\364\032;>\371\024\220>\000\000\240\276\314]#\277\337l\363>\270\001\007?\373\221\">\035\224\340>a\034\274\275\026\023\233\276.q\304=\n\327\343=\347\251\016\276G\377\313\274\245\203\025\276\320\320\177=\207\242\000\276\276\023\363\275\2137\222\276\327\027\t\276\262\327#?k\360\276\275(~\234\276\006\273\021?\252e+>\273\n\t>oI\216\275\325\317;\276\3544\022>I\021\031>\305\311\215>\375\331\217\274cb\243>\023\270\025?\265l\235\276\233t\033\275?\000\351\275l\ty\274\200\361\254\276\222\221\223>`<#\276Ih\213>z\034F\275G \026?\235F\352\2762 [>\020z\026\2760\330\315\276JF\316\275\362{;\276J\357\213>ep\264\275q\217\005\276\007_\020@\037\242\241\276aO[>6W\315<\267(3>\3273\204\275\374P)\275\317\022\204\275\026\373\203?\361\364\n\277n\337#=\321;U\275\315#?>\265\246\271>=\'\315\276\306P\016\276\232\'\227=r\016h\273\247\350h\276\362\007c>\026\336\345\275\200\267\000\276\320\017c=\216;%>\'k\224\276\362$\351=\001j\212\275\"\375\226>\363\314K<\305\215\273\275\034B\305\276\003C\326\275\300\316\315<\203\034\357;\244\307/>\210\177\230=vO\336\275\371\203\201\276\351\322?<n\206\233\276!!J=\027\361\335=m\312u>+M\n>^\242\232\276,HS>\342\222#>2Z\207\276u\253\'\276\371\367\331=nQ&>\276\244Q\276D\372\355\276\334)\335\275\313\326\372>1\231\312>M\300\257\275\251\275\210\275 \014\254>w\363t>]\341\275\276\r\007x\273\017\356\316=\264q\204>Pp1=f\275\230\276\026MG>y\001v>vT5\276,\202\257>9\234\331>\2649\016=\002\274\005>!<\252>\307\210\037;8/\316\274\3063\250\276\202\250\033\276\303d\252\276Y\335\212>\3122\004\276F\231\315\275\333\247\003\276\266\333\256\276\311\260\272>\323j\010>\344\024=\276\307\327\376>w\334\220\275o\365\334=\325 \314=\r\340M\276r\212\316\275\024\256\007\2761\2243>TW\316>$(\236\277\257\316\001?\364oW\275\353\247\377\274/n\003\276\206\0330>\264v\233\276~\035\370=\310@\236\274\320\355E>\\\257i=FA0=82O\276\314\t\272\275:\002\270\273\260=\363>\004\255\000>4\326~=\3544\222=\215\016\010=\036N \275\343\252\362\275\312O\n\276\\\314\017=E\267\336<\210F\367\275\021W\316<G8\355\275/\374\200\275\214\271+>\350M%>\006do\2752w\235\276\010;\205\275A\326\263\275\017\013\365\277\336\260\255>\314\321\203>EF\207<\016\276\020\276\030\354\016\277yXh\276Ll>>\241-\347=\320~\004>\364\025D\276>\"\006>$ED>i\0355>r\212\316\275\214\333\270\276\235\273\035\275\204\236\r\276F%\025>\013A\016\277S#t<GU\203>e73\275\r\216\222\276\213OA>\2554\371\276~\251\257>G \256\276\tm\231>\227\250\036\276*t\336=lZ\251\274e\215\252>\345\233\255\276?:\365=\213\245\250=F\353\350\275\271p\340=1\372@\2732\256x\275.s:<\356\316z\276\233 \332\276\316\335.<?\214\020>\026\030\202>l]*\275\263x1=\007\231\004>\342X\327=N_\017=\003&0\275Lq5>\215(\r>\272\304\354\272W>\253>I\200\332\275r\376\246<\334\364G\276\003\tJ>\257\353\267>\211{l\276\013}\260\274bgJ\276\247\226-=>[\247=/n\343\275jj\211\276\346\226\026=aTr>y]\217\276\377>\203\276\"O\022\276,\274\353\276\020!.\274\347\304\036\275 \265i>_FQ\276:;\031\276/\244\003\275\251\301\364=\362\n\004=\232\231\211\276\034\321\275\274\236$\335>\241\020\001>\3019\343\275\262\276\201\274\270X1>\030\262:>g\'\303\276\300\225,\276\037\235\272>\240\340\262>\322\373f>\303*\336\274\305\376\342>8\241\260\276\257\\\357\274\227\307\232<#\214\372;\306\242I\276\246\357\265\274od\256>O\222.>\246\017\335\274\225\360\004\275\"\211^\276U\244\302\276\026\366\024>h\226\264>VHY\276\372\362\202\276H\277==\322nt\275\252G\232=c\356\212>\252e+\276\312\305\270\275\204\362~=\360\253M\273fOB=v\303\346>: \251=\361\235\250>&S\005\276\341}\325\274\300\2622>\213q\376>\262K\024?Ll>>\305\2171=\"\253\333\275\206\003\261\276\203Q\251\276\023\362A>\204\365\257>\206\310i\274uX\201\275v\032\001?V\202e\276\216>f\275\n/\301=>\355p\276\020\n\245;3\341w\276V\202\245=\027\267q\276\014\223\351=\211\355n<Z\360\262\276\317k\354\275P\374\030\276\'L\270\275\033/\235>2w\355\275_\265R\276\017\234\323\276\260r(>\323\207\356>t)\256>\005SM<\314z1\276\177\3658\275~t\232>GZ\272\2760\022z\276h\226\014?}\"\'?\347\373\035@k\202(>\030&\363>\253{\304=\356#w\275\230\026u\275\266\274\222=\212\223\213\276\361\364\262?\374\035\212\275\216\257\355\276y\006\r\276\237\350\232\275\033G\254\276\206\311t\276\315\006\211>@\301\305\276A\201\267=$\264\345<\325\312\204\276M-\373>&\374\322=\216u9?\273\017 >\246\n\306\275LTO>\257\314[\275\266J\300\276\235\200\346\275\0029\027<\033\204y\275\273%\271\274\274\313\345>\266\271\001\277\206 \007>\234\301\337<&\340\227\275\013)\377\275y\261\260\275\216\314\303\276\357r\321\275\244\337\016?*\003\207<\275\035\031\277\216u\201\276\250\251\205>7\340\243>M\371\220\274K\310G\276\265\032r>fk\375=\2446\321>\003xK>\255\3000\276\260\311\272>\276\336\335\276\366b\350\275\302\243m>\242\177\n?\221~{\276\362$\211>\365\274\273\275\235\2753=\0015\345>2U\030?\001\373\250>\374R\177>GZJ\276\003\317=>2w\235>\262\361`=\017\264\222>W\321_=$\231\265\275\310\230[\276z\252\303\2743\030c\275r\247\264\276#\207\310\275\004\342\265>\276\277\201\275\0358\037\277\270@\222\276\235\021\205\275[%\210\276\017\234\223\2760\360\254\276w\363\364>\207\304\035\276\373\351?\275\034\261\226\276\343S\320>\'\203C?\0324\364\275\226?_\274\201\262\351\2750\273\247\277\337\340\213\276?R\344> \322/>L\211D>\323\372[=Y\300\034\277\346\225\353\274\202\305\361>\245k\006>\301\220u\276\276\237\032\276k\261\000\273>\226>>\254\255\270>bJ$>\277`w\276F%u\2763\304Q\276l\375|9I\272\246>\303\201\220>[?\235\275\253&\230\276\360O)\274\2029Z\276(\271\303=J$\221>\313-\355=\216\334\344\273\216\375\321:E\272\237<h<\021\275\355,\232=\220\275\236\276\366z\367\276H\277\215\276\035rs\276\227\255\205>\241\271\336\276\004V.>Uj\226\276\225\202\316\2767\246\'>\346\3177\274\247\005\377\276\'\367\313\276\030C\231=\025\032H\275\360\2775\276\264\345\\\276\370\245\256>a\375\337>\331=\251\276\006\r\375<_\007\356\276D\2065>_$\024>\275R\036\277\'N\256=\022i\233<\223\343\236\276\"TI>Xp\277<Gr\271>\304\231\007?\252\361r>R,7\276\337\246\277>m\377*\276\006\236\333>\207\242\200\276y\257\232\276\353\342\016?\3750\362\276\223\000\225>I\242\207\276z\245\254\276(\'\232\276\300!\024\276\002\331\213>B[.\276\247\256\234\276\020z6>\230\371\216\274Mjh=\374\027\010=\016\371\'\275Q\206\212=\206U<\276\230\300->\241\370\361=\244o\022\275\205\224\'\277\355\236|>\315u\032>\013\226*\275\256\rU=\022kQ>\304Z\334>\022J\037=.\2226=\211E\214\275\272\332j\276n\300G\276\370\245\276\276d@V\276L\246*>\377[i\276\343U\026=\255\243*\274!\260\202\276\362\357\243>\270\006\026>L\335\225=\327/\370>\316pC>\207\346\025;o\3306\276\271\374\007=\336u\266\274\023\nQ>\005\027\213>a\303;?\t\371\320>\377\312j\276\356B\363=\254\213\313>wJ\'>w\367\300\275\372\362\002\276\300!T\276c\177\211>\r\246!>J\265\017>z6\313>-!\257>p\265\216=qr_>\024\226\370\275\205w\231\2764\327\t\276\357\033\017\277\265\247\244=\240T[\276I\242W\276\367\307;\276\311Y\330>\222<\267\275H2\253<\350\366\342>\016\241J>\261\371\030\276_b\214=\335E\270\275\310\352V>\036\376\332=1|\304\275\tm9>\303\r\210>\036\376\232\276\230\210\227\275\263^\274>|\017\207>7\340\003\2779_\354\274\302\3359>t\225\256\275{I\003>\377Y3\275\2762\217\275.\377\341=\370\373\245\275\225\202\316\276\356_\021?\256\236\223>\355\364\303=\215\264\324\275\365\333\227\276k\016\300>\034_[>\266g\206>\014\261z=]\342H\275\331B\240\276Q1.\276\207\371\302>\035\311\345=$\206\323\273\306\277\017\2770\201{>9\227\222\276\353Ty\275G=D\276ga/>\372\n\302\276\267`)=h\354\253\275yX\010>\300\262\202>\301\250$\276X\311G\275]N\211=\210\364\213>X\312\n@\353n~\276\203\027\235\276\365\326\000?\353s\225\276(\017\233\276\343R\025=\222t\315\275_^X?W\353D<`\002\367>;\252\232\2748\241\020\276\237\343#=\361\272\036\276\330\357\t=\026\366\364\275\227<\276\275\301\377\306>\016\2760>\017\266\330<\332\255\245\275\215\177\177>\2512\014=\004\313\221\275p\231s?f\203L\276\203\212*=1\315\364<\215\227N\276D\213\314\276\271\3072>\005\206L>\325\312\244\275Z\236G>5\357\370\275S\007\271=\341(\351>\277D\234\275\020\316\207\275$\235\301\275\264\310\266\275[\010\022?\204\237\230\275\214\0255>\351\363\261\275*\306Y>!\223\254\275\374\337\261=\201[\027\276k\202\350\275K\345\215\276\317\204\246\274\246\325\320=r\212\316>z\252\033?5$\356\276\374\342\262=\311q\227>\270@b\276#\204\327>\352\354\024?1%\222\276\033G\254>\302\335\031>\252\357\234\275rp\311\275\246a\370=k-L<\354\300y\276\204\365?>c\267\317<\220\276\311<\004Z\232=\000tX>\255L\250\276w=\007\273\2549\300>\315\001\222>\243\257\000>Ve?\276\312\375\316\275S@\032\275\236Ac\276e\001s\276\024\350S>x\321\327=\001M\264\276\257_\220\276W\265\304=2U\300>@\023A\276X\306F=tA]>\234\277\271\276\231\274\001\275[\2241\277\226\262,>p\261\202\276J1\366\273e\342\326</n#>,+\255\2761\2619\277\271\245\025\276\330\177\275=\005\335\036\276\203\206\036>\235\205\335>U0*>q\347\302<1\263\217\275Lp\252=\334FC\276\210I\270\275\r\253\000\277\304\261.>>\347\256=7\211a\276\234\371\345\276W\317\311\275t\266@\275\273D\365=w\025\222>\261M\317;4\200\367=\217\344\362\275m\254\244\275\330\r\213\276\213q\216>[\323\274\276\326V8\300s\270\326<\277`\347>\264w\006\275\230\300\r\276q\346\'\277Q\273\237\2751\353\005>\221\320v>i\306b>\207\212\361\274\334\270\205=\343\373b<\344\024]\2756\223/\276c\356\272\276<f\220\276\231\330\374=\335\262\203\2751%\222=\352#\360<>\3550>\322o?\277\337O\315\275\334\327\241\276\301s/>\032\335A>H\376\240>\327\206\332>\216\222\227\275\314E<\276\373\221\002\276\002\016\221\276G\351\222\2754K\022?\273\321\307\2725)\325\276\277\361M?[^\271<\336\223\207>\377x\017>3P\231\274\324\016\037\276p\353\256\276\267\321\200\276QN4\276aO\033\276\007x\322\274m\255\017>\266\201;\275|\233\376=\022\027@\275\250\214\037>\231G~\275k\361\251\274\006L\220\276\024\005:>\303d\n?\324+\305\275\276\366\234>\255\372\234=4\364\277\276\204\330\271\275\277+b\276\300\320c=A\267\327\275f\371:<5F\013>B\"\355\274\235\2722>\227\312;\277\332\311\000\276\215]\302\275:\037\276\275\305\033\331\275$\0138>\327\206J\276\350\023\351\276M\334\252\274$\264\005\276\306\333\252=\370\032\202\275\2754j;\3638\254=Y\300\004?.V\024\276\022.\344\274Wx\327=UM\320=\310\322\227>4\272+?\004V\316\275vm\357<\234\371\025\276,e\331\275\2073\257>\211\322~\276\340\333\364\2758\365\301\275\233\217\253>\332\254\032>\213\375\345=\245\236\005\275\343\252\322>x(j>\2033\270\275\023f:\276\304\231\217\276\311\003\221\274\330\360\304>&\3742\276V\016-\276|D\314\276\367x\241<\021\217\004\275\"\342f=\006\273\201\275\nj\230=\335$\246\276\236^)\276Kv\014>{\367G>\350\237\340\275\350\331\314>\201x\215>\326\034\000\276\347\216~=aq\030\276\253\314\264\275\360\210\312=\201>\001\277\300\317\210\276\330\0140\275\rT~\277\244\337\036\276\301\240\226\272r\222\034;2\003\305>\250\214\237>9\356\024>\236\265[\276l\342\211;\r\032\352\2761\316?>\177\023\n\276\271\026\255\274\300xf>AH\346\276v5\371<\366^<\2750/\300\276\365-\363=\006\017S<DLi\276\022\240&\274\251\237\327>\262\235\017>\211$Z\276\310\010(=u[\242\274R\321\030=\2068\206>\004<\251=\216u)?\242\230<=5}6=\2407\325=v\211*>\312\372\255\275Di\003@\321tV>\346y\240>H\334\343=)\263\201\276\350/\224\275\2549\220\276\265\025\253\276\340-\020@\0047\022\275\274\340\035<n\206\333\275fk=>N\227\245\276\307h=\276\245\367\255\276\017\264\302>\220\240\010?d\2577\276A\202\202\276\374R\377\275\037h\365\276\335\352\251>\345\270\023\277\256G\341\275\032\213>?E\022\215\276\376{p=\344-W=\332\036}\275\250\035>\276lx\372=\221D\277\276@\366\352\276\341\323\034=\333\026E>\254\034z>\343\0345\275\306\025\267=\323\244\224\2760f\253=\255\2120\275U\331\367\276 \357\205\276\351`\315\276\225+\254>\330\266\010\276V\232\324=pB\341=\r7\220>\264Y\365\275\3168M=\302Q\022\276t)\336>\221\3623>G\0038\276\230\372\351\276\361F\346\275/\277S\274\367X\272\276\205%^\276\277Cq\276\305\217\201\276\036\334\235>\357\306B=\360O\211\275\243s\376<\370\245>\276\\w\323\276\036\334\275\276\202V\030\277D\340\243;\323\274C>\271\210\377\276\330\236\231\275\361F\246>\\rt\277-\3173?\310\322g>R\'\360\276\227\213\030>\202\305\261>y]?<[\010\202\276\225\016\266\276e\031\202>\205|\300\276\3266\305\274i5\244>\006L\220\276W`H\276\007\010\326>\312\211\246>#\025F>\360\212\220\276\334\240\366<\344\203\266\277\263{\222>x(\232>a\211\227\276\336\037O>>v\227\274\036\304\316\274\332\217T\275\005\250\231\276\354\243\223>\352\\\021\275\323P#;Z\273\r>\302\027\346>\206r\362>\361\364*\276N\324\262=\207O:\275\305\217\321>\013\3206\275\r\253\350>(\363\257\2751\352\032=\264\260\347=\306\371\213\276\306\313\t\274\232\263\276<\324H\273\276\031\305\022>\244\337\206?\014\037\201>\320\355\345\276\347\302\250\275R\n\032\276\266\3704\276\232\010\273\277\035\003\242>f\331\223\275v7\017>\233\003\264>\212\223\233\276\245f\237>\247!\212\275n\300\'\276\3603N>\002\361\352\276bJ\244>D\206U>\214\025-??TZ=\202\005\013\274\320\n,>\362\232W=\016g.\277j\244e\276\020\006\016?\206\3700\272\351eT>\267\013\255>\031\255\003?HP\024\277o\021X=Q\332[>\357U+>\250\377\214\275U\030\313>\221\325\r\277\220I&>\346y\220>\221\362\323\276\\\311\356>u\310m\276\226&\365>\321\036/=\2717\277\274\'\275\'\277\321\005\265=\265\211\023\277Z\330\243\276\224Kc=\032i\211>+\373\336\276W\317\371>\220\240x\274\362{\013?\365J\251\276\tmY\276\253\313i\275\373\"a>\250\024\340;X\220\226>\272\367p\276.V\304\276\370\215/>/\336\217<\352\225\362\276\276\237B?q\033\r\276IK\345>#\021\232\275}\350\362>\347\251\016\277\357Uk=b-\376\276To\355\276\016O\357\276\373\221\"=B^\017=\210\203\304\275\2407U=\272\240\276\276|\n\220\276\213l\307\276\320DX=\353\034\363\276\274\005\222>b\0208\276Y\213\357\276\2034\263>\224\301\241\276L\032\223>\321\346\230\275\314]\023?7\246\007?\323\366\257>\030x\356\276\361\364\312\276\025\214\022\277p|\375\276\365c\023=AF\000\275=\n?\277o\236\n>\302PG=\031\354\341\273\315#\377\275\351`\375\275\330\266H>r52\274\222\354\221\275N\016\237\275,-\243<\313\276K\276\027\331n\276\355*\014?\252+\217\276\301tZ=\303\r\230>D\250\022=\2410h=\344\275Z?\215\'\002\275\272f\242\276,\361\340>\236\230\205>\344\360\356;\366E\202\2765c\021>\321\226\023\276\242]%>\273\270m>t)\216\276\307F\200\275\326\251r\274l[T>\343\337\367>\361\235@\277\335\315\343\276\366@+=\303G\304\275f\210\003?X\376\374\274\321\\\017?\361F\306>`\002\227>Yn\331\276\215]\002>S\263\227>\253\315\237\2757\375\351\276\376&\024\276zS\021\277\364\250\270\275(\270\230>\002\274\025\277bG\210;+M\002\277\371\024\020?\036\026\202\277\247\"\r\277Y\372\220\276\340\276\356\276\264\216\252\2763\376\035>^\327O\276\247\345\254\272\313\3707\276\037\021\243\276\277\177s\274\013\322\254>\227\250\336\275I\017\303=l\315V=\306\371\333=[\261/@\312O\232>\314\227\207>j\252\002;82O\276\327\2126\275\235\276\036\275=}\004\275\360\026\220?\204\022\026\277:\010:\275\0221\345\276?5>\276\303,4\275\311\223\204\275\016\020\014>\017\265\255\275\200\367\351;\233\033\323=\313/\203\2747T\014>o\022C\276\370\374\340>\334\267\032=\235c@\275\236\357\007\276U\336n\276\003z\341\274\353\305\020\2762Z\007\275\306\304\226\276d\313\222\275\337\211\031>]\277\240\276\211\007\024=\345\233\r>\273Z\023<\330E\021\2758\330\233=jO\251=\321x\202=Z+\2309*\307$=\361\272\216\276\323\331I\276e\316i;\304\316T>Nz\317\276\267z\016\276\360\247\226\276\346y\020>,\016g>\2304\246=\352\317\276\275\221\017\232>a\372\336<d\036Y>\367\222&>\237\311~<z\307\231>b\203E\275\316\337$>\337\246\177>P\302L>U\244\">\353p4\2753m\037>x\013$\276:\311\326<\274\226\320\275\rR\260=\316\213\223\274}>J\274\322\343\267\2756\\\244\2750Lf>P\302\274\276\nK\354\276!\311l=k\361\t>\323\336@\276H\341\212\276\273(z=\000\221\376=\003`\254>\260\217\336>\362{\033\276IK\225>\233U\337\275\312\246\214\276\211)Q\276?\346C\275\372~\352<)\256*\276\251\331#\276\000\306\023>\375\366\235\277\027\177[\275Z\365\371\275\016\276\360\275:\2571>\3642\212;\271\031\236\276\342Zm<y]\037\276\033\r\005<\253\317u\276\200\323;\274f\240\202>j\207\037>\344I\222>=\325\001>\253\264\205=\243\006\303>n\030\205\275\204!\274;\2073?>\254\000_\274Gr\231\276\007a\216=n\3723<sK\233\276\2030\227=\010\312\355\2745\265L\2761]H=\264\002\203>\036\033a>\272\240\276\276\264\216J>\240m\265\274\024?N\277+\373\316\276!\260R>\033\233\035=\030\262:\274\311\260\252\275K\037\372\275(\017+\276\223\251\002\276%\220\022\275\301s\257\2762;\313=\307)\232>\374\2511>\177j\234\275\0260\001\276\326n\213\276U\030\033>\304Z\034\276\355\330\270\276\376eW\276S\350\214>\034D\213\275\366b\250\276\273\321\247=7\216\370\276\330\330\345\275\"\250\232\274ui\3548S\320m\276\315V\236=77f=\304\352\217<+O\240=\260r\350\275p\007\352\272c\264N\276>\\\022\276j\030^>\341\0133\276\177\367\256=u\253G\276\tmy\276\034_\373=$\326B\276L\211$>U\366}>\034%/\276\177\372O=\005\027+>\352\312\007>h\226$\276\261\032\313\274\277eN>8\025)\276\217Q^\275U\331\267\276\310\362\t\274D\300A\276\\UV>Q\203)\276Zd\373\275\277b\r=\252`\264=\255\372\254>\320}9\275\202U\365<U\246\230<c\rW\275\216;\205\275\257D\300\275m\312\325=3m\377\275\254\220\322\276\265\377A\275\2073\177>\264!?\275\024y\022\2765\036\266;n\026/=#\236l<\334\327\201\275\016\210P\275\026\206\310\274\"\032]>~\340\252<H\337\244=\363\252\016=N\321\321>!\310a>h\320\260\276\207\277\326\276\037\021\323\274*\214\005?\237\002\340=i\035\225\276\025\221!>Y0q\275\354L!>7TL>\355\325\207=\363\310\037>\031\034\005\276\375\274\271>\245I\211>\213q\036\276Y\335\002\277\031\004\226\276C9Q<\010=\033>Zd{>y>\243\275\311v\276\276d]\254\276\000\213|\274W\350\203\274H\277\235>1%2>\273\017\300<\260=3>\366b\310>\341E?>e\252@\276b\024\004=\030`\037\276\325x)>`Z\264=v:\353\273\366\227\255>\177\023*\276\013c\013>\242\357.\275\032lj\274B\2136\273x\200\202;B[\316=n4@>\267\013->\271S\212\276\r7\000?Rb\267= \014<>0\rc\276S]@\274\205|0>\263\315->\014\007B>\355\266+\276\342\351\025>(\364z\275\004\255\220\276\364\334B=\341\360\002\275\201%\327<\267zN\276\372&M=XX0=\242b\274\276\326\250g>\254\034\332=\346\\\212\274M22>Y\335\232\276-\354\231\276#J[>\233\312\202=\312\375\316=\342Xw\276\346\006\303\275\0358;@\346\374\271\273S\256\360=<\024%>\006\200\252<\3172\253\275\375\331\017\276d\037$\275*W@?6=h\275u\003\305\275\376\272\223\275\314&\000\275\246\3209>Ll~\276_B\205\275\027\357\207=\224M\371\275d\006\n\276^\364\205>|,]\276\346\005x\276\001\205\272=@12\275!\3158\276\034\3609\276\022\243\207\275\226\354\330<h?\202\276\204d\241\275T\306_\276\310\267\367\274,\237\005>\275\035\341=\202\252\021=\374\306\247>\370S\343\274c\013A\276\274?>\276\t6\256\2750\023\305\274\310\315\020\276B!\002>V\327\241\275\225e\010\276a\026\032=\034\353\342\275\312\340h\276\340\326\215\276\311q\247\275\n\241C=&\2527\276%]\243\276H\247\016>!<\272>2 [\276\035w\212\276)yU\276\246^7<\233\003$>\t\376w>\006L\200>]\304\247>\002\232\010>\351b\323;\'h\223<u<\346=9\231\270=(C\225\275}\005)\276\307K\367>\253A\230;T\034G\275\001\242\340<\033c\307=\326\255\336=\251j\242\276N\227\205>\303\r\030\277\352\312\207>\320c\224=<\024E\276\333\024\017=\376` \276\247\226\235>\360\304\254>Rv\237\273#J\033>\211\263\242\274zp\027\276\231\204\213\274\335\3570\276d\311\034\275\013\265\246\276\260r(\276d\351c>\362A\237\277io\020\276\363u\231=*RA\276\237\310\323\275\311)p\273\276\336]\276c\267\017=\303GD\276}\263\315\275\252!;\273\030\263e=\261\300\227\2752w\010\274\307\235r\276\325x)=\031\344\216=\320\270P>\315#?\276\357X,\275B>\010>\"o9\275\362\265\227\276,}(>9b\355\275\363\306\311<\367\312|\275 \360\200\275\\\033\n>\352\225R>\376{p<)\"C>$\234\246\276l&\337=\215\233\272\275G\003\350\277a\032\266>\314]\013?\0363\020\275\n\366\337\274\366(\334\275\255i\236\276<f\000>?\310\262=2\314\251=b\330\241\275\2555\224\274s\364\210>Z\275C<\246\n\006\2768\204\252\276\364OP\276`v\217\276]\277\340\275Z\236\227\276b\025\017\276X\342A><K\020=\237\260\204\276\241\204\211\276\0049h\276X\220\006>\207\303R=_\322\210>\032\300;\276\007\316\231\275\266L\206\274l\226\313\275\233U?\276[\266\026\276\230\373\204=\352\347\r\276#2L\276\321\004\252\275\032\206/\276\267\266p<\246ax\276\214J\212\276\331?\257\275\013^4\276\357 6\276,\327[\274\'\332\025\276\371N\234>|\264x=p\261\222>/\027\021>\317kL\276\312O\n>}\221\220=\325\313/\275e\217\220\275\204*\265\276\271\031\016>;\374u>\377\262\373\274\272\236(=\264\223a\276\003\225\361\275\013F\345=\013^T>r\334)\276$\234\026\276\231\331\307=7OU>E\022\375\275\346\003\242\275\t\207\236\275\022\203\260\276\\=\227>y[i<\204G\233=\310$\243\274\013\265&\276\346\346\233<\335\315\203>\350\202\372=A\325\250\275\202\253|=,\361`>\235\021e>D\207\300\275\017\326\037>a)\334:\250\035>>\320D\210\276w\276\337\275\340\020\272>\357r\321=\250\030\'>\240\340\"\276\347\253\344<\346 \310\275I\205\261<_\230\014>6\002\241>D\335\207<-\225\247\2765)\325>\0216<>k`k\276\354Q\370\275 \014\034\276\023fZ\274\367\344!>V\202\245>\325>\235\275\201\354\365\275\346\256\345\275\332\253O\275^\327\357=\2137\022>\252\016\371\275b\327v\274\246B\234\275W`h>\tP3>fL\301<\242\227\021>\232\231Y>\004\220Z>/i\214\2759(\201=P6\r?\034\360\211>Y\213/>\274yJ\276\003\356\371<\234\334\277\276\212Yo\276\3372G>\312\322\030;\370g\253;\223\030$>J\014\002?N\234\234>\205\"\335<\024\\\354=\220k\243\275\211{\314\275u\"\001\275\337\334\277=3\3041<\272,\306>\244\252\211\276\030\317\320\276(:\334\272\317j\201<3\375\022=\364\340\356=\317\334\303<\201\006[\275\347\035\247\2763\3417>\3019\343=2q+\274\272\203\310>uY\254\276\332\311X\277\257\010\036>\376\233\227\274\003`\\\276\222\221\003\277\000\227\266;N\3211@\261P;\277\0362%=\177\373\372=\027\361]\276\034\3527=[\261\177\276\277HH>\022\245\255?\310\322G\2765\n\211=\003\t\312>\371f{>\327\372\262\276#g\241\275\347\214\010>`\352g>#\024\273\275\342\332\032<\233\313\215=%#\247\276\254\220\242>\200\363\202\275\315\352\275=|,%?\344\300\213\275\020\351\307>\027d\253\275\245O\253\275\376\232L>(I\027\276>\\\202>[\353K>W\004\217>\252\016y\276$b\312=\t\247\245\276\346\313+>TR\227\276\244\031\273>\204\022\006>\232\261\350=\344H\307\275\3577\272\275sK\213>\235\271\307\275p\010\305\276\301\253%=%\006\201\276\304_\263>\205B\014\277\007|\336>\002+\307\276\002\014K=#\370\027?_^\200>k\016P\2768.\203=wJ\'>R\355\223\276\336\310|=\237\223\376\276\315s\304<\246\r\247=\311v\036\276D\2502\276\031\347\357\274D\250\202>\341\227\212\276o/\211\275\272\367p>Z\365y>\321\005\365=\270\036e\276\010\217v\276\007\263\311\275V\232T\276\021\031F\277&\3742?.\0049=\242_[\275\260\003\347\275Fa\027\275\366\356\277\276\211\265x\276\333P\021>\242\376\304\273F\354\223\274\262\327\353\276\"\252p\274\366#\325>\320*3=\276\336\375=\215E\223\276B\317\306>\006*\203\276s\235n\277z\307\031?E\360\277>]\304\227\276C\230\221\273\007\232\217\275m\255\017>\033\362\317\274\364\303\330>\203i8\276&s\007\273\313\020W?`YI>\024\005\"?\336\345\242>\2451\232>c\356:>\274\226\020?\270Xq\276\306\375\307\275\227\377\220>s\021\337>~6\262\275\277\016\354\276h\314d=c%f\274\331_\366<\213T\330=m\312\205\276\341\264\000\276*\306\371\275\301\305\n\277\323\207\016\276\014\262e=\027\274H\276\037h\225\276\230\372\371\276\270s!\2759\232c\275-\262=\276\343\026\223=\312\246\274\275\027\331N>\2338\211>\342\257\311\276h\313\371=_$\204\276Bxt=\n\327\223\276\320\355\345=$(\276>\334\235\005\277\023\233O>\366\264c>O\220X\275\326V\354\276To\r>M\333_\276n\336\230\275g\362\275\276\366@\353\275p\231S<\340\326\335\275,\274\253>\005\027\213\276\356wh\276<k\027\276\212\315\027\277\366\013\026\276U\373\024\276x\321\307\276\036m\034\276\026\336\265>\336\002)\276\267\177\025?\342XW?\377!=\275\304\353Z>3\334(\277CV/\277\313-\235>\341\270\214\275t \220\273\324\233\261\275a\032\006>\355\177\200\274\325\004\021\276\t8\244>\240\025\210>NEJ\276s\021\177\276\353n\026?J\357\233>E\201>>\377\317!>D\335\'>\360\304,\276:;\271\275\232\227C;\n/\301\274\363\002\354>\314z\021>\367\036\356\275\277\271\177\275\0324\364=\327L6\277\240\245\253\275:\222\013>a\032\306>\355\201\036?\206=\355=F\323\331>\013\014\371\276\342\351\205\276\000\215R\274\027\202\314\276T5\001>\331\316w>\267z.?\355\231\305\275\033\330\372\276\202\342\'\276r\027\201=S\263\347\276;\215T\276\325\317\233>/Q\035\276I\327\274\276\2343\222\276\346\350\021\276X\305{\276`\352\267\276\234\334\257\276\252\364S\275\332s\271=\245,#>\215\013\007\276\316\252\017?\235c\260>5\321\307\275\265\246\t\277,\274+>\301\255\373\276\025\214J\276\343\374\235>\237\345Y><\027\246\275\314C\206=L\032\303\276\232_->p\266\371\276\251\023\020\276\300\t\345>\306\247@\2767\251h\275\364l\006?\363\253Y?\317k\014\276\342\006\\>!\007\225>=\233\r\277\025\341\246=L\377\262\275O\351\020?\006\016\310=\005\371\331\273pB!\276*\000&>\302i!>*\306y\276\001P\305\274\350\244W\276<\026\033\275jjq?\363\002\014\276\241\204!\277\344\203^>\257w_>8\025I?\270\3448\276A\232Q>\373ug=}\350\262>\002Hm>\272\275\344=\312\375v\277v\033\024\275\270wM=J\230\231>C\220c\276K\315\016\277\335E\230<\344\022\307=\251\203<<\r\032\252>L\030\215\275N\177\306>\002\274\205\276\271\252\014\276\321\221\\\276W\317)>\322:j\275\307):\276A,\273\275\t\371@@\2722\003<\177M\026\276\365\326\030?\r\340\r>\266\370\304\276^\242:\276<\024E\275\253\347D>\014\352\313\276\276/\216\275\357\341\342>\004\346!=O\314\372=\2647\035\274z\215\215\276+\030U=\314\013P\276od~\276O]9>\006\201\025\276?tA\276,\016\227>\202\342\007=\234\305\213<\035\312P\275\327Q\325\275*\344\252\275we\027\275\362\230\241\276y\314\200\276\022P\241\275yX\250>\2023\235;\200`.\276\2652\201>K\3143\275\317\367\263\276\210F7=%X\234>\3312\317;@0\007\276\231\002c\273\207\212q>\201\004\245=#-\245>\206=\355\275,c\243\275\352\262X\276+\372\003=n\246\302\274\005\303y\2751\261y\276\r\373\275=\206\033\030?\301:N=\231\330\234\275\201y\310<D\300\201=\213\211\005?`\223\025>\207\026\311>\313\204\317>\026j\315=\266i,\275\032\372g>\nh\002>\013\265&\275\231\330\\\276\312\214\227\275\243\006S>\233\220V=\'\301[\275\275T\214\275&pK\276\3118\006=\344\024]\276\362\014z>\0319c\277Q0\243=\233U\037>\27550\276\232B\007\276\031\004\226\276\016\370\234>k+.?F\261\334\275\306\334\265>^\017&\275tBh=o\273p>\272\240>\276\317\024\272>\212\260\341=X\220F\276Z\022\340=\022\275\034\277\277\016\334=\030!\214\276i\034j\275\244Rl\274N\227\205=\231g%=\2653\314=-\tP\276\342u}>\372\320\305\276->\325>\324C\264\274\313L\351<\237\257\031=\250W\232>\243;H\276tA]>q\277\r\2732V\273\275\355\231\005>\361h\203\276\260\033\326\276g)Y= {\375=\034\316<>\221\270\007>\3745\031\276\233 \352=\220I\246>\204\327\216\275-\262\335=77\006>dv\226\274\3475\366\275\272\332\002\300\333y\321\273\204\3309>\'\301[\275LO8>\034\3558=\023\325\373\2760\362\222=\223\306\010\276\262\205 \276Cu3=\315\260\021=$\227\277=\027\232\353=\366\'\221\275\345\n\277\276J\007+\276UM0\276\203\027}>()p=6Y\303\276u\005\333<%]\263\276\377\262\373\275\341\264\240\276I\236\253\275)\355\r\276e\215\032\276:\3147>\263\232.\275\'\367\373\275\321\004\212\275\243\260\213\274\347\030\360\276\016\241\212\276\344\276U<\262\276\001\275&\307\235=Ii6=\030x\256\276\224\366\006\276\316\374\352\275\244\337\356\276Z\030\330\273n\333\227=__\353\274\234\373\253\2751\261\371=>\256\255=\363vD>\220\332\224>\357\254\335=\344\017\366\276\247y\307\274\201\004\245=\231\201*>5*\220=1\266\260\276\373\2269>=D\203>\217\245O\276\351}c\274\030\264P\275|\362\260\276\"O\202>4\277\232=\037K\177>H\341Z\276\017\271\331>\220\203\242>\327\022\262>x\234\342=0&\"\274\314b\002\276u\313\256=\212\307E=\2652A\276X\250U\276\355\365\256\275\316\377+< \230\203>_\360\311=\235c \2760\273\007>\212\224\306\275\321\350\276>\177O,=(\014\312:\257\316\261\275\013\323w=vTu\276\2027\244=o\021\230=J\014\">\261\334R\276\"\3756\276\363T\207>C\347\365\275\242*f=G8->A\202\342\275Y0\361\274\327\023\035\275\242]\245>\032i\t>\027\331\236\276\0358\007\276\251\2428\275\234\247\352\276\"\216\325>\304\010A>\225}\027\276\001\336\302\276\2505M\276\022KJ=q\254\213\276\t\026\307\2759\326E<I\242\327=\356\010\'>\020\222\325>\254\342M>\243\225\233\275\006*\343=\307\021K>U\023\224>\265\025\373=\201&\">\263\357\n>\273a\373>^c\007?\225eH>XV\212>\261\026?\276\n\235\227\276\371\203\001>B\tS\276\230\300\235\276\030\\\263\275\375j\256>\3270\303<\r\375\323=0\022\032>\200H\177>z\215=\2765~\201\275+\030\025>\337\303e>\254s,>wI\274=\270\351o\276\277HH>\001M$>_\007N>\225\232\255>I\272\206\276\347\306\024\276G\254E>\024\"\300>\371I\025>c\177\231>{\240u>\347o\"\276\023G^=\353\255\221>\223W\347\275!m\010\273h=|\275\035\311e> \322#@\227\256\340<\202;\260=l&\337>\310B4\275\026\336e>pA\266\274\254\031Y=\022\302k?\221\n#\275_)+\276A\274\016>\234\242\263\276\246aX>\324\363\256=\023I4>\216\001Y>\336\252\253=\361\327\224\276C\347\205\276:@\020>\004\347\254\275\014Xr=\272\275\344>\\\346t>B\n\036=\032\250\014>A\016j>\270\001?\276\315\006\331=:\222\033\277\225\202\356=\3274\257>aO\033\276F%U\276\237\310S\276A,\233=\200e\345\275\300\004\356=;S\310>\'\023\227\275\326\374\270\275\243\360\017<\223\306h=\252C.>\207\247W\276^.\"\276c\177y>\005\026\300\2740\017Y\275\351`\315\276\364O0=l[\324=A}K\275b\326\023?V\237\313={\024\256<\005\3008>\200\234\220\275\222\263P>\210\235\311>\260\254\324>\231Kj\275y\314\240\276V\272\273<\376De=\226\225\006\276\033\235\263\275\311\253\323\276{\210\006=\037\235\212>5^\032>iRj>\371,o\276E:r;.\345\234=\346\350\261\276\214-\364\276\000\000\200\276\346\311\225\275\276\274@>\2549\000\276\310\352\246>\001\372\275\275s\235\206\276\020z\026\276B\3557\275\370\210\350>\034\231\207\275\336Y\313>1\224\023>\244\031+>\341\227\272\276\306\301\245=\240R\205\275\263\315\255\276M\204\035\277`v\317=.s\372\275y\036\\\276\346?$\276\021\345\213=\306\334\225\275\263z\307=^L\263<\021\036\355\275\270\344\030\276lvd\275q\003\316>YQ\223\276\231\360\213>[|*>\262c#\276/4\327=\302Q\362<\260\003\347=\203\243\304=\216x\262\274\261\304#\276)\"C\274\340%\002<w\363\324\275\265\207=<\016\370\034>\354\3009>\314z\021>?\000\t\276\320D\310>\315\351\022?d]\214>\200\202k\276\360\247\306\277\250\035>\276\366\321\351=}\004>=\310@\276=\203\366j<\030\262\002\277\370\026\326<e\374;\276\010\253\261\275\325&\356\276\207\214\207=\200DS\275E\201^>\301nX<\204\273\023\276\312\375N\276\230\246\310=\334/\277\275h\352\265\275\376\325c\274\256\266\242\276OZ\270\274q\217\345\2764K\202\276?5\256\276\010\346(>9\227\">\330\323\316>\004\004s>\252\202\341>\240lJ\276;\031|\276\350j\253\276\3642\332\276\3333\013\276-\226\242<O\346\237\275\017\264\242\276e\373\020\275\302L{>\276\332Q\275\023\017(\276\260\376\337\276Y\025\241=!<\032\275p\353N\276`\345\360>\303\365\270\276.\255\206\276_@/\275\306\245\312=\230Lu\276X\342\221>l&\377>a\246->\350\237\340\275nL/\276\277\267\351\275v\306\267\275\003\322>=\325j~;\323\301\372<\354\243\323=]\277 ?0\236\001\276\303\302\377;\230\243G\276\224\274\372\275*W\310>.s:\276\203$\";1\226\311\275\341b%\277A\324\355\276\250\035\336>\251\204\247<\250\306\013\276\001\030\017\276x\357\250<\307F\000\276?R\304\276\3127\333=\311\345?>\215\013g\276MgG\276\312j\232=\310\322\227>\347\217)\275cE\r>\232_\275>o\330\026>\227\220\317=\274Wm\276\202s\306\276YL\274\276%#\227\276m;\215\275\353\000\210\275\002\017L=\364\300\207=\036\026*\276C\341s=1_\316>8-\370=\016\241\332\276,\360U=-x1>\332W\236\275\016h\251\275:\366\242:\003\225\221\276\207\277\006\276(\267m\275r\247\364=gD\351<\'\210\212>?5\336=-y<\275\376C\372=\245\275\001?\336\217\333<\023F3\275\377\262;>\201\262\211>2\346\216\276n\243\201>+h\332<{\332!>\367X\372\275\332\254\002?E\236\344\275\3122d\276\264\253\220\276\377\317a\276\017\362:=\301s\237\276.\312,>\257|\006?j\023G>\227\255\205>\230\206\321>\r\032Z\276\013\357\022\276z6\253\273\320\362\034\276\t\026G\276^\024\275\275\250\343\021\276\361F\346=\367\006\337\275\024\355J>X\255\014\276\024\\,\276\026\373+>\017\326_\276\tpz\275\255\370F\275?\331\336\272\350\366\202>\257_0\276V\267:>\237\223\216\276^e\255\275WC\202>\315\257F\276\364O\320>.s\032>\2068\026>\006\201\001@h\350\277\276\214\204\266>$(\236\276\352\354d\276\220\240\030\276f\203\014\276\020\270\t<\353\342\266?\222\226\212\276y\006\r>\r\253\270\276>\350\331\275*\221\204\276\212Y\257\274@/\274\275m\220I>\210\236\224\275\227\377\320\275\246\362v>\242\234\350=\034|\241\2753\247\253\276w\276\337=\224\244\253>\254s\214>+\373\236\276\234\304\340\275\\\033\352\276>\263\264>%\222\310>Y\2068>\200\232\n?\350\366\222\276\210\021\202\276~\212#\275&6\337=\255/\022\275H\334\303>t%\202\274\361+\326\274O\351 \276%>7\275X<u<\225<\350\273\n\206\263=N\203\375;a2\025\276!\344|\275\366b\350\276\226\262\234>\362`\213\274\221\n\203\275k\202\230\276\301\342P>\023\'\247>\001\244v\276\343p\306\2761B\330>i\343\210\276\344N\231\276cbs>.9.>\031=7=\314z\241\276~5g>\350\242a\275\203n\277>\277Cq\276\357\346I>\253x\263>5\322\322\276\222\350\365>%\317\225\275\233\257\262\275\234\026\034>|\'\346\275\300[\320\276l\317l>\375\274\331>\000W\n?W\004?\276\314\264\375\275\215\227N>\223\251\">\2451z\276\321y\r>b\020X\275/\027\301\2760\236\201>?W\033\276\'\237\036\275f\275\330=\031\034e\276\270u\267\276\226!\016?\244\337\316\276\301\305J>\372\263\277>\363<\310>{\024N\276\006\236[>_\357^\276\027\232K>6<\375\275\004\347l>\256\274d=:\036\023\2764\200\347>Ts\271=\014\345d>\367\257,>\212\216\004>d\2577\276\262\333\302;\367\257\234>\003\223\033\275 \322o\276\000W\022\276r\334)>b\204\020>L\211\344={N\372\275\033\201X\276jj\031\277\316\245\370\275\357\254=>\005\206\254=`\037\215>\201\241\\:\316\031\241\276\233\217C\277\310\'\304\275\014Y]>!\002\276\276\342#\302\276>>a\275\300\351\235\275\320\271\333\274\321\\G>\325\264\213=\035=\376\275P\344\t\276w\363T\276\262\364\031\277\243\245)8T\307*\275\217\302\225>\003\t*>\024\"`>rP\002\277!Y\200>\360\242\217=\271p`\276Y4]\276\231\330<\276S\350\334\2761\231J>9q\003<C\004\274>\261\242\006\276t\227\304<k\361\t>b\370\210>]\300\313<+j\360\275\232\316\016>R_\026\275]\371L\276\216\036\037>w-\241>\n\277\024\276C\004\024\277\332\217\344\276\316\342\305=\327\205_\275r\341@\276\240\334\226=\205y\017=\357\003\320\2756t\263\275e\302\257\276/\300\236=y#3\276\306n\277\275K\253\341=\335$\246>\025>6\273\206:,\275#\205\262<}\004\236=\004\320\003;m\250\230\274\"4\202\2751\352\272=\214\333\230>vT\025>\336\256W\275\022\210\327>\240\025\330=\211\265\330>\025\035\t\276\342Zm\275\301\255\026<\306\205\223\276\340\326]>y\314\010?\302\027\306\276T\214\243\276\035\346K\276\237:V=\241\204\331\275\313\271\324=\270\314\211\276\314@e\276\216\257\375\275Fyf\275\036\3028=.\220 >\255\022\321:y\314@>\020u\037\276\032P\217=\014\316\300=\252\236L\274\214.\217\275\025\221\201\2768\363+><f\000\276Z\r\t\276\203/\014>\326V,>\215\010\306<r\304\212\2766\037\027>\301\377\326>\355\202A\274\204\2733\276s\331(=s\272\254\275\315#\037\276z\302\022\276Y4]>X\312\322\276\235\203\207\275>y\330=\200\324\226>\277\267\231>\372B\310<\211A\200\276\013\317\313=\276f\271\275\002\361\272>\216\222\027\276\\w\303>\351\r7\275\013{\312\276\225\322\263=\200\232Z>6\260\005?\334\235\205\276\261\341\271>4.\034\276\'\302\266\276%\353\220=\363\023\030<\316\022\t\274/\027\301>\253[\375=Z\326\235\275\220\240\270>*\305\256=t)\216>\303J\205\275\025\304\240\275l{;<\005\027\213\276mV=>\201\225\223\276+Q6\275\367\314\322\275M\204M\276\242\356\323\276Y\300\224>JF\216\276\275\306\016\276^\242\372\275\330\016\246\275g\270\001\276\360\212\340\276\020z\306>\206\346:>\370k\262\276\346\261\246\275z\337\250><f\340\275\312\244\006\275\3333k>\246\320Y>+Mj>\017\234\323?\237\034E=\324\3618>DQ \276M-[\276\265T\356\276\261\336\310=\316\337\204\275\221\017\362?\246\n\006\276\375\305\307\273,\361\200\2765\230\306\276\305r\353>j\301k\276i\341\222\275T\251\031\276\356\353`>76;=5{\000?\030\225t>=I\232=\021S\"\276d\351\203\276R\017\221>\347nW=\233\311\227\275+\244\034\276e\374\273>\217p\312\276\245N\240=\030x.>q d\275\2608\354>\352\t\253\276\005Q7=\255i\376>NEj>\203/\334>x\227\233>\036\336\263=\364\032\213\276\203kn\274\356\316\272>y;\222\276m\312\325\275\272N\243>\030`\037\276\301\377\226>7q\322\276A+\200\276\304\316t>^\022\'\275\221\355\234>;S\230>\n\202\307<wgm<\352>\000\276\360\243\032\275\371\240\007>\305\217q>4\204\303\275\244\337~\276\032Q\312>\323\244\204\276W\225\255>\3642\212\275\357\346I>\036m\034>\330\233\270=\2721\005?l\'\245;+o\"<Q\203\t>\235\327\330\275\342\036\333\276\020\222\005\276\021\344`\276!\223\234>(\017C?t$\027\276xz\305\276b\243\314=\334\331W=\252F/\274U\014\200\272\371/P=\304A\202\275\"\375V>\231\323\205=\326:1=5\007H\276\261\335\235\275\216\256R\275\333m7\276PQu\275a\340)\277\241\330\212<\031\255#>\275:\247>]m\305\276\003C\206\276\325x\211\275\035wJ=\025\306\346>\002\331\233>\005\247\276\275\005\250i\275\344,\034?\325\347\312>J{c\276\375\023\\>\"\007[\273c\356\212\276{\241\300=\361\021\341\276\277(\001=\001\373\230\276\320\017\243\276;\337\317\2763\026\315\275\032\026\203=\240\025\030>F\261\034>&S%\276\343S\320>\350\331\034?\224j\217>a2u>\\Uv\276~5g\276\340-\270\277\254s\234\276\200\202+>r\212\016\276\365\2344>\312\032\345\276\305=\026=\010ZA=\377\354\007\276y\001\306\276y\220\036=7\211\301<\256*\273>\031V\361=!\007%\276h\313Y>\033I\202\274\035Z\224\276\004\217\217\275/\335$\276\266\333N>!\310\001>\270\314\351\275\017{a=Q\276\300\275A+P\276du\253>\352>\240\276\300[\000>v\032\t\277\006+\016=\366#\205\276b\333\342\275\266\370T\276\020]P\276)<\210=\230\243\227\276I.\177>\235gl=\336\2160>\372~\n>%\257\276\276\303\266\205>\004\037\203<\276f9\275{1\204\276\347\214H\276\374Vk\274A\232\361=\255n\205>\030!\314\276\370\252\325\275{k\340>\364\032\213>\213m\222\275\2608\234>L\007\3029\356\224\276>\000\256D>\020u_>}\316\235=Ho\230=J^\255\276\013A\256\276\240\211\240>e\215Z>\320D\210>g\325\007\276\243\006\323\276\343\212\313=*\306\031\276\000\343\331=\304\316\344>\220\240\250\276\270#<>\275\343\344>2 \273\275\007|\336\276G\034r\275/\300\236>\252+\237\276C\034\373\276\"U\224<m\305~>e\302o=M\276\231\275\245\204`\275\023\'\367\274\264\253\220>\000:\274>\t\033\256>\031\255#\276>\222\222<\355\266\233>r\243\310=R\017\321=K\373\213;\017\234\343\276\321]\222<.t\205=\222>-=\371\272\214=X\210\263;\321\220\221\275\375\276?=X\343\254=\222\"\202\276E\022}>\350\237\220\276\204\202\022=\343\033\212<$\264\005\276:y\221\275a2\325=h\331f\272h\"\374>+\023^>s\2057\276\230\300\r\277\3400\221\275$E\004>\221\325m>(\n\024>!X\025=\254s\234>\356wH\276\245N >)\263a>w\363\204>\027eV\276$\231\325<\342\253\035\275\226v\252=\3063\330\276;:\256<\225\324\001?\326\250G\276)\317<\274\253x\223>nLO>\356\261\034?\242\234\210>\330\364\240\275@\207\031\276\355\270a<\313\361/\2730d\265\276@\331\024\276\206\003A>\344\367\206\276\240\211\340\276\337\032\210\276\267\264\332>\347\373\311\276\2343\002\276\204\020P\275[\224\001\2775F+\276\316\215)>\215\013g\276\375\023\234>\303\236\206>\206\216]=3\341\347>\323\336 >\031\034%\277\203\243\264\276f\275\310>\224MY>U\301\330?\t\274\233\271\253\224\236;}\007\277\274m\312\225>EG2>\355\360\207>\332r\256>,e\301?\263\322\344\275[\261\237>?\035\017>\032\206\357\276%\213 <\030!\\\276\305\033\021?\3578\005=\262h\032\276\374\251\361>\256\273y\276\260\033\306>%@m\276\216\257\005?[\231\340>{\210f\276\200\357\226=v\340\314\276\357\341r>\266J\020>8H\250=nL\257\276\026\207\023>\013f\247;ga/\277b\326\013>~\217\372\274\313\333\001\277\204G\233>v\375\202<\320d\237\275lC\305>\222\313\017?\334\272\273\2769\177\263\276e\027L\275u\005\033=\303G\004\276\341(\251>\017\177\255>\267\177E>\204\360\350\275\252H\265\276a\372\336\274l\354\222>(\325\376\275\231\304\017<\021p\000\277\325\264\213=\017\324\251=L\340\266>0G/>\343\307\370>\003&0\276\251\333\031=r2\261=\232\224\242\2766\037\327>\360\371a>\0010\036>~\343K>\267\2274>\026\026\\\274\236\357\247> $+>P\3372>f\367$\276\307\272\270>\002\326\312=\021\344\300=\202V\000\276W&\234>8\207\253=\236{O\276)\226\333\275\355Gj\276p\353\236\276\270Z\207=\212\260\261>\220\275\036\276;\215L?\223\030\264\276\237\223\276>\341b%\276\252\325\267\275\025#\246;\346\226v\276\316\031\331\277\237\312\211=\271\210\217\276\'\275\217\276\000\035\346=\301\377\206>\214\020\276\276\247\005\377\276V\232t>RDF>\004\347\314\275N\264+\276\305\311\235\276\325x\211>\346\005X\276\322\251+\276\0216<\276\200XB\272A\016\272\276Z*\217=\373t\004?\207\334\014>D\372\355\275\355\273\302\276\026)^\273G\004c=}?\365=\014\002K>\n\202G<~R\215>mS\274<\223:\221>\201\317\017\276?t\001\277\231*\310\276\3274/\277 \353\211=\034|\301=\200\016S\276\037\021\323\276\315X\024\276Qk\212\276\227\034\347>\3372\007\276@\0308>\365-s\276\356\224\356\276]9\326;\277\202\004\277\345\355\010>8\277a\275\236\357\'\276F\010\027?:z\\\276\376\016%>\004\220\032\276\220\2408>\240\211\020\276\221\320\026\276)\350v\276S\221\232>o*\022>i\311\243\275\256\360n\276\342[X=N\271\342>3\304\321\276\365\333\227\276\336\257\002\274~\342\240=y\036\\>\r\253\250\276\301U\236=\000:\034?\264\345\354\276/n#\276\363Z\211\275\365\363\346\275T5\241>\324\3273=X\250\365\275\310\007}\276\374\373\314=\332\003-\276+M\212>[_\014?+\336\010=\371\203a>U\206q=9\2349>3m\037\276\252\360g=sh\201\276\275\373\303\276c\264n>d<\312=\325\225/\2764\242\264\276\351`\275\275W\225\035>y\351\266\276\003\262\017\277K:\212\275\330\365\373\2767T\234>\014\006\327<+\244\034\276\230\300m\276\245I\331\276S\"\t?\325>=\276\315\001B\276\\\346,?u\315\304=m\3125\276|\017\327\275\204+\200=p|\255\276\317\024z\276\n\235\027>\364\375\244\276,+\r>\342;\t\277\027\016\344>\264\223A=l\004\222>\\\217\202=Yir>\335\352\031\276\035\000q=\337\340K=<\244\230=\307h\335=5A\224\276[\010\202>\307\233<\275\322\030\335\276aq\330\276\374\030\223>\225\324\251\276\241\241\377\276\315\344\273=\251\2377\276\305\217q>!\037\244\276\241\3701=\305:\265=P\340]\275\3707\350<?W\333=:]\026>#-\265\276[B~>\211\275\006\274\033*\246\276\370\215\357=\353V\317=\300\316\r\275\000i\244;a\211\'>@\366\252\276Gw\220>\273\326\336<\2338\231>\301\312\301>\025\000C\276\264\002\243>\352#\220\275O;|\276Y\243\336\275E\022\355\276<N1\276\004\312&<k+6\276\014vC>S\005c\276\223:\321>|a\262\276u\216\001?\352\347\r>V\274\t\277\3544\322\276\327L>\276\3063\010\276w-\241\276\322R9\2766<\335>%\351Z>5\230F\276\204\'\231\273\257[\004\274\"O\222\274\3578e>\211P\3278\301\034\375\275\222y$\276\333\371^>\206Zs>y\352\021=x*\300=Cs}\276\253\352\205=\231\360\013\276\251\300\311<b\241.@\034\261\326\275=\325\321\276\330\273\277>\001\373\250\276\222\350\245\276\004\312\306\276\350\336\003>1\231\252?qU\371\276\240\371\234<\231~I=\0326\212=\340\333\264\276\300x\346\276\035\254?>p\t@\274\271\210\217>\340fq=\332\003\255>m\250\030\276c(\007\276:X\377\275<N\321=Q\207\025=\004\033\327\274\362\014\232>9\017\207\275\215zh\276\253\262\017\276]\341\255\276T:\270\275\256H\314\275\240OD\276O\006\007>\332\035R\275\254\340\267\274\225F\314\274\365-S>\256\323\010?\370\215/<\257xj<y;\"\276\306P\016?\021\344\320>\270Z\247<\2608\\>\255/\262\276\331B\240\276\023fZ\276\270\036\265\276\270\006V\276=\325\001>8\370B\274\2240s>8\021==\247\007\205\274\030>b\276\340\023\353<\372\'\210\276\260rh>\025t;\276\304\322\000=\260\254\204\276\353\374\033=A\237\000?\001\366\201>q\3467\276\004\312\246=\330*A>{I;?\317I\337\276\207\304\375\275\025T\024=\321t\016\277/Q}>\035\254\037\276\033/=\277\001\207p\276\363\002\254>}\347W=g\235q<\267\013-\276\241\3701=\013^\304\276G \236>a2\205\276\333\304)>Nb\320\275\007\360\026>+\207V>\273\'\317\275hy\036\276\320\270\200\276+\373N>U\331\227=\251\244\326\277\000\251->\310A\331\276\255/\022>\230\027\000\276\013\322\214\276w1\315\273\332r\016\276\224m\300\2751\224\243\276\014\350\305=\016\277\033=\216X;\277\221\325\355=\261\247]\276\322\032\303=d@\306>\302\206\207\276\267\177%>\343\245\233\276\305;\240\275\220k#>@\301\265>\235.\013>I\237V\275L\211\004>\301n\310\276\265l\355=\'\203\303\276\240O$=\2613\225>Yn)\276\204\323\"\276\274Wm>\336\310\374=\r\337\202\275\372D\036\276U\276\347<i9\260\2751\224\023\276\037Jt=\372\362b\276E\365\326\276_\265\022\276\217\374A<\274\221\271>\034\261\266\2768\204*\276\316}\203\272\343\307\330=*t\036>g~\225>\321\255\027\275\r\032\212\276\377\317\341\274U0\312>M\207N\275\200\267\200\276S\005C\276\312T\241\276\241J\035\277\ni\215=`\221_=\275V\002=\rq\234\276h\350_>\"\340\220>\364k\353<2=\261\276\325\256\t=#k\r\275\352\322\032<R,\227>\010\217\036?M\243\311=\212Y\017>\345\'\245\276\350\331l\276\314\'+=\255i~\276Lm\251<\327\243\020\2768\0202>\214\363\247>\230\036\250;\255\247\266=\025:\357\275\313L\311\275\234\304\000\276\200`\276>l\354\202>\221~{>\310\227\320<v\375b\276+\373\356>\255\372\\\276Dlp=\001\301\214\276\375\301\240=S\313\326\2755\014?>e\307\006>m\220i\276RDF\2755\321\247=i5\344\275\211\265x>y\222T>\372\355+\276\307\2352\276|\017\207>\304!\033<VF\203\275\'\203\223\276\375\023<>\004\312\226>aR|\275!\007e\276\366\264\263>\006\324\033=\274Wm>\276\207\373\2760\330\215=\350\237\340\275e\344L>y]\337\276g\'C>\237\344\216<\242\013\232\276q\307\233\275\0324\364=\272\017e;Q\332\033>\274\263\026>E\022\315>C\346\n\275\324\016\377=\374\336\346>\236\007W\276\234\247:\276c\264\216>\026\301\237=1\316\237=\244\215\343\275UM\000\277\264\223\t?K<@>\375\301\000>\214H\224=\3127{>\256G\001>O\351\300>\rTF\276|\017\227>t\007\201\276bJ$\276{14>\002+\247\276\257\261\253>/\212\236<\267\227\364=\002H\215\276\313\332&\275q\254\353>\025o$\276>\226>\276\272\203x>Y\213\277\276\307F\200\2767\303m\276p\\F\274!\310\241>\322\343\227>\322\307\374\274\377\346\245\275c\266\344\274\036\247\250>\324+E\276uV\013\275\347\306\014\277l\354\222\2763\212E\276\323\331\211\275\346Y\t\2755cq\276\241\326\204\276a8W=\356\007\274\274\263{\022\276\322\033\216\275o\267\244=mm\206;\'\367\233\276\037\026\305;\233\254\321=\251\203<\274\\8P>l\t\031\276a\032\226\276\246\325\010\277Ic\224\276e\310\261;`Y9\2770\327\242\275\361\364\032@\377[\211\276\002.\250=\244\245\342>]\304\207\276G9\270=\037\365\327;\262G\250<#\025\016??R\004>\262\272\025\276\247\\\361\2766\037\327\274H3\246\276w\333\265\276\346W\203>n\027\332\276\214\363\027\276?\000\251\276Ou0?\247y\227\276^c\347\276\260\346\220\276Ps\362\274\267\177\265\276\031\255\243\276@j\323=XV:>\177\366\003\276v#\342:\024\355\252>\234\304 \2767\211\001\277q\254K\275]\376\263\276\300\262\322=\357u\255\272\340\276.\276\245N\240>\324eq\275O\225o\275\312\032u\276\307,;=P\307\223>;\302\351\275\006L`\276\230\027\220>\375\237#\276\376\013D\275\276\366\014\276hB\223:Pp!\277G\003\210>0\3653\276\326\255>\276s\177\225=v\370\020\274F\261\234\275\264\037\001\277\030\262\372\275\334+\263=T:x\276:\351=\275F\316B\276c\013\221\276\265\340\325>9\016<\274\034\262\241\275vTu\275_\014\325\276\367\222\206\276T\216\251\275\2554\251>\353\250\312\276T\037H\275\320\263\331=\227V\303\276\313\020\227?\217S\204\277\301\377\026\2754\337\034<\2511!\275<\203\326\276*W\350\276\326V\314\275\302Q\002\277\340\020\312\275\237\004\266=\003>\377\275\274y\332\276D\206U>\332\376u\2769{\207=jOI\275\323\024\001=x^\252<^K\210\277 \265I>p^\274=\214g0>\001\373\230\276\256\330_\276\264\253\260\276\231IT\274\007|\316\276h\221\235\276\372a\204>\240\025\030\2760\330\r\277\246~~\276\332W\236\275\\\254(>-xq>\356|\317>\3024\014\277P\337\202>\'\3325>|{W\274\016\020L\276\276\366\214>Q\370l\275\006\201\205>\347\361\305;a\210\234\274\321t\366\2759E\367>\033\201\370\275$\227\037\276\2608\234\276P\307\243\276\013)?\276)\355\345\277\275\213w\274\313\021\262\274\240\372G\275\376\"\r\274\374\307\242\275\343S\300\276\226>\344>\036\334]\276\251\301l\277*o\207\276\336<\265=\343\031T>\2613\265\276\203\372\246>F$\312=y\313\025\275\213\250\311\275W:D;T\343\005\2779\271\317>\'K-=\352$\333<y\006\235>\325\320\006=2 [\276l\321\202=%X\334=\312\340\230\276\'1\330\276P\337\222\276\311\216\r=\341E\177>\355\266+\276\254\220\262>#I\220<\257_\260\276\364\246\362>*6f\275\020\351\017?ZG\205\276\3745\231>\237\260\204>\1770(?\t\026\'>s\272\334>8\365\301\275S\2611=\325\262\025\276\016\242u\275\214\276\202>&\306\262<^h\256\276\333\205\326\276\005\211\215=J^5?uY\214\276\027\237*\277>\313\203\276%\351\352\276\253\315\277=b\370(\276\3122d\276\301\255\033\2767\375\231>Y\335\352=\024\"\240\276\207\3408\275\216\254|\274\274\347\000\275\2305q=K\345m>:#\272\276\301V\211\274\013^\364\275\371\203\201\276\262\200\331>\242|\301\274\tW\033;s.e\276P\375C=PS\313\274-\354\251\276m\220\t\277<L\273\275xG\246=*\252\236\275\242(0>w\363\304\276\030C\001\277\227\213(\277\323\240\310\275|\017\307>d\003\211\275$\264e>\372\003\n<\322\253\241=\373WV\276M\326\310\276)\226\033\276\030\t-\276\216u\241>\020u_>~\000\022?Z\2372=\3127[>\022\332\202>S\314\301\274\367;\344\276AH\226=\200\330\225\270\220I&>&|\245\273W[q=\304\261\016\2760\236\001\2760/@=Qf\303\275N\234\354\276;\217\252=\216\257\r\277\211\322^>\320D\270>\345\325\231>Zd\353\276EdX\276N\227\005\276\223RH?w+\013=\374\214\253>\356\353\360>X\255$\277\032\027N\276\363=#\275W\317i\2763\033\244>\217\337\233\276\356|\257>k}\301\276TW~>\027\324\227>[\224\231\275\0324\024>Ed8\276\311\306\003=\342\257\351>-\262\215>o\273\220>c\264.>L\372\273=\013^\024\276]\247\201\276&p\213\27682O\276\341\227\022?j\336\021\276\316\212h\275\307,{\275Sy\233\276\353\342\206>\255\247\266=\027\016\204>X\220\206>\336\216\360\274\362\230\361>H\304\324\275\365\020\315\275\352[\246=\210\327U>z\245$@\314\264-\277\235\363\023=\213\375\005>\210W\243:\014<\027>r\334\211>b-\276>\024\320\254?\334\364\347\275~\343k\276b\020\210\276\305\0339\276\014Y\275=\246\n&\276w\241\031>r\341\260\276g\017\224=\221,\320>\037/$<\314\332\001\274U0\352\275\\T\213<\n\205\230\276t^C>q\003\276>l!\210\276\311\002&>\234\024\206=\376\267\242\276\020#\004\275]\337\247=Nb\260>q\3111\276\260\003\267\276\303-_=x\177\314>\033G\014>\302\303\264\274\301\312\341=\214\204\326\276\223\251\002>\367V\304\275\037\2777\276\307\2352\276G\311\213>\265OG\276\324\361\210>\013\230\220\2760\273\'>~\343\353\275\t4X<jj\331\275\321\313\270\276\027\234\301<\021\337\t>\211_\261<\246\270\212\276V~\231\274\356%\315=\373\256\270>bi\300\275\326\342\363>k\324\003>f\216\233:;\001\r>J\265\017\276\223:A\276\271\374\'\276|,\035\276\334\235\245>Ic4\276\252`\264>\025\304\300\274\216\314C\276g\177`\275\253\321\313\275\000\343\231\276L\216\273>\216@\\\276\315\315\227=\271\210O\276\270\257\003>\332 \303\276\241\277\320\274g\355\346>8\205\265=h\313\271>m\255o\276Z-\260\275\326\213\001\277WA\014=\017E\341>\366\007\252\275\010 \365\275\017\326/?6\253\256\276\356_Y>\353\377\314>\301\377\206>b-\276\276\016\363%>\230i\333\276r\027\241=j\274\224\276\007|^>\324\267\214\276\317\275\267>\210\205\212>\334\364\347\275$\013\030\276\331\377\245\273\323i\235\275\014\004\241=\2073\177\276R,\327>\323\275\216\275f\240\222=\366\324\352;i\251\214><f \276\213\246\203>\315to\275\243;\230\276\034\\\272\2750L\006?\237v\030>\210\327U\2765)\005\276y\006M\276\271\215\346>\261m\261\276\345\'\205\276\363v\264>\262\364\261\276\3330\n=\002\331K>k\202\250\276mq\255\275v7\'?\247\221V>hZ\242=\255i\336=\224r-;\'\203\003\276\253\225i\276\266\362R=\275o\214\276\375\207\024>$\271<\276\323M\262\276\360\242\357\275\013A\256>2V\233=\027\274\250=\177\244\310\276\250\307\266\274\231\232\244\275\226>\024>\262\021\230>\324\202\327\275\257>\276=d:\364<\203\335\360\275r\376&>\201|\311=YL\354>T\343%\276\221~{\276\342\314O>;S\350\275\246*m={\367G\276l>N\276\322:j\276\341\007g\274\260\003\207>\232_\315\275\346\220T\275\275\035A> \3575\276\271\252\354\275\331\316\367=\307.1>m\034\361=>\261\016=\334\327\221>~\343\233\276M\364y=\017b\207\276\033*\246\275\314^6\275\366D\027\275t\322\033\276B`\225>h\005\346>\n\327\223\276\273\362\251>A}K\274.\220@\276f\024K\276\275\030J\2761\261\211>ms\343=\037\200,\277vq\033\276:#*\276\351\232)\276wx\031<\334F#\276-[\253\276K\253a>\366@+\276\033/\035\276t)\036\277\320\2700\276\342\037\266=\321\003\237<\336Y;>\202\312\250>V9#\273p\224\274\275\201\225\003?*6\213;\331\315\254\275)\3506\277\247\313b\276\246\nF\275\274>3=\266g\226\276\t8d\276\213T8>\005\334\223=+\023\356>\344Hg=\014\037\321>w\025r\276\327\205\037\275_\353\262=(D`\276]m\245\276\367\257L\276R\'\240\276;\217\212\275\017bg\276i7\272=\223:\221>\337\025\241>\231\360\353>D\276\313\274\"\216\025\276\253\354\233>\371I5>\306Q9\274y@\211>\323\365\004\275?o*\276\034\316\034\276\211)Q\276d\314\235\2766\315{\276\024\321\257=\370\374\360\275\201#\201\275\222\2569\276\316\302>\276\302/5\276\350\244\227>\341@\270>\217\275\003;\303\266\305>\'\367\273>\037\275a\275=\325\261\2764\330\224\275(bQ\275R\325\224\276\224\211[=\353t\240<*\035,>!\223\214\276\311\005\307\275bf_\275\253\347D>Uj\366\276\270\351O\276\rTF>\261\242\246\276\311\253\023>V\016-\276d\257\207>\034\261V>\256\016\300\275Ae\024\277\005\246\263=\330\273\'?\311\001\273<\370\026\226=\361\241\004\275iU\313=\r\340\031@\322\343\367\276W&<>A\274\016\276\257Z\251\276\306\244\177\275\263\014\361\275\2716\024\276\247\350\200?\3225s\276\334\364\347=\342#\002>G8\235\276\253\262\257=\242\r\240\275(\233r\276k+\306>C\222\271=\265\303\177\276yX\010?U0\352\275\025\035\311\276s\235\006\276\356B\023\276\2445\006=\226\262\314>V\202\205\276\240\302\221\274\225+\034>\276\301\347\276[\316\245\276\361/\202\274\267\177\205\275\243\351,>\313g\231\276%\316\312=\217\344\362=\241h\036\275tA\035\276M\370%=\230L\265\276\370\337j\276\005\333\310\275\027\202\334\275\254\305\207\276\327\244\233=\251\371\312=D\206\005\277!\345\267\276\025\312\302<\242]\005>\016\370<>n\335M\277_Fq\276\347\373\311>\363vd>`\352\207\276E\360?\276X9\024>[\t\275\275\213q\036>\200I\252=\210\200\243>t\007\021>\202\312\230=z\031\265>s\272\274>|\363\233<\261\277\024\277\360Q\377\274m\250\030>\266\204\374\275F\261\374>-\354\211>D\213,>\341\013\323=H\303\211\275}AK\275\210\327\035?\013\014\351>\241J\r>\331\'\240=\311\345\377=\204G{\276\261\025\264\275\303\021d=#.\300=\206\377\364<\030}\005\277\371\3323>)\256*\276\211)\021\276\322\343\367=y\\\024\275V\177\004\275\224\023\335>\362\014\272\276\227<\036\275\236\352p\276k\232w>k+\026>\334\272\313>\371f\023\277\335\352y>\332\004\030\275<f\320>\230Q,>q\314\262=\251\300\311<\377\0047>K\260\330\276\356B\303>\366\316h\275\256*\033\276\\V\201\275?\251\346>\t4\270=?U\205\274~\214Y\276\007)\230\275!<\332\275/l\315\274BO\271;\236^\231\276K\037Z\276\231\201\252>\216[L\275\0054\361\276\270X\021\276\263@\273\274h\224\256\275\362\322\315\277S\320m>.\374\005\274\272\332\252\276GZ\232\276\257\353\347\276\323\331)\276Q\273\037\275\247\263\343>\177\373\372\275\234\026<\2764\205\236\276b\370(\276E\330\200\276M\370\305\275b\025\277>\257%\204>L\213\232=\300\226W=\311\002\006\277\243\257\000\276\221\322,\275\305\346C\276\261P+=tA\315>\3544\322\276\365\234\024\276k\324\303\276\2279\005?\035U\r=\360\026\010\277\316P\334<\n\200\261\276\325\354a\276\232\266\177\276wL]<\270X\021\2771BX>/\335\344=A+\340>/\304\252=>\"\006\276\"7\303\276\026\244\031\276\272\367p\275\340J\026>\227s)\276Edx\276\010\310\227\274\"TI\276\265\375k>\237\315\352=a\216~>;S\350\275}\005\351=\214M\313=xz\245\272\363r\030=qZ\260=M\365\344\274\362AO\274\0319\213\276\256\323(\276\376&\224\276\027\324\027\276\216\256\262=\324\017*\275\307\234\307\275\301Wt\275^\245\026\274\305\033y\276\r\211\333\276\370\304:\275\207\277\246\276\315\261<=\031\222\023\275\266JP\276\342u\035\276U\207|\276\240\032\317\276\266-*>\337OM\276\033\365\220<\271\245\345>\275\214\302>!Y\260\276,\324:\276\362$\251>G8\r>fk\035\277(IW\276\274\313\005>\027H\200\276\352\312g>\344\203\336>\3274/\276\016-\342\276\265O\207\276m:\202\274S\221\372>`\260;>\230n\322=\217\306a\275\\\346T>\233\377\227\275~?\020\274\010\311\002\276\344\203\036>\220\333\257<h?\302>\362\3156\276\371,\027\277\024\262s\274\017\271\031>\202\250\373={k\000\276\263A\306>\263]a=W`H\276(\017k>\302\022\017\276RD\026?]\334&?zp\027>\202\213\225>\255\027#\276\252\272\007=\010;\005\275\r\211;>\315X\304>\260 \025\277O\257\204>;\252:\276\233Z\306\276F|\'\276\326\305M\276\240\032\257>\250n\216\275\275\365\253\273(~l>\332\311\220>*R\261>\244\2452\275v2x>\255\206\244>\220\203R\276k)`==\270\373\275\373\312\203=*\254\264\275D\206\305\276\310\315P\276m\312U>\375M\370\276\'f\035\276=\'\375=\262\200I\2765\357\370\2751\275\263\272\013A\016>\261\247\035\276\033L\243>f\203\014\277\252\361\202>N(\204>\n\334z\276O\231\366\273\303G\344\276\025\214\252\276\331_\"@>\256\235\276\204*\245>9\013\033>\305 \360\276P\374\230\276V\360\333\273&\307\035\276vqS?\3272\271\275`r\303=\236\352\300>0\r\303<\240\032o\2760\273\207>J\265\317\275\246\t[<\r7@>\243\225\373\274\320~\264>~\251\007\277\274\313\005=\372\233\360>\037h\225\276\225\362Z\275u\037\200<`W\023\275\320`\323\274\344\206\337<\360L\210\275o\323\277\276\027\267\241\276CS6\2757\032\240\276?\035\017\276\376+k>\215b\311>\225\361/\276\317\2762\275R\0171>\236)T>\373\255\275\275T5A>zR\306=\252a\277<\026\244\031>p\224\234>W\t\346\276\0007\253\275)\005\035\275k\202(\2755c\301\276Cr\262\275\037.y\276u\253G>\017\356\256>1\224\023\276\277\234\031=\357\347T\275\r\246\341\275c\013\321>n\336x\2751]\210<\211A`>\023\020\263=\355\2016>|D\274>\276\023\033?\273\355\262\276\263$ \276\223\343\356>Z\204\275:\024\321\257\275\363\002\314\276@QY\274\022\275\014>\242z\233\276\333m\327>\341]F\277\356\224\036?\364\206\273\275[B\256\276g\355\366\275y;\"\276\371G\204\273G\313A=\r\032\332>0\236A>\231\r\242\276\301\345\221\275,\016\007>0\326w\275V\020C=\227\310\205\275;S(\276\265\025{>#\363\310\2768\333\234>\223\251\">P\337R\276\376c\241=\313\271\244>*\251\323\276\367X\022?\240\334\266=\266-\n>\215\356\200\276\366(\334\275\020z\206\276\223\251\322>\310\'$=/\206\262>\014\315\325\276#_.;\330*A>\361\200\242>\205\322\027\275\237\337\234;,\017\022\275c\nV\274\273\232|=\376\266\247\275>\\\022\276fN\307\276\244\215\243<\352\312\007>)\010\236\274\267^\023\275\260\217\316>\350\202\212\276\267z\016\276\216\0060\300\3019c>\340\020*;\301R\035=\001\\\3739b\201/=\025\000#\276\251\274\215>\367\3518\277\253\317U\276a2\325=\021\374\257>s\200`>\315\006\031\276\0048=<\331$\237\275\353\310\221\274k\267\035\276\270;\353=\345\270\263\276o\201\224\276\223\031\217=\r\303\007>{\241\300\275\201\352\277=\3644`=\020\221\232\274\245\021\223=\361c\014\275\255Q\017>\022\275\214\276\227\342\312\276\'k\324>\327Q\345\276\331\231\035;\3024,>\022i\233\275\263\357J\276g\270\221\276\372\361\227<c\234\237=\022\277\242\275TtD>\205U\006<\270#\354>\312T\001\276Q\210\300\276\304\317\377\274\376\361~>\0049H>\343\031\204>\023f\252\276xE\240\276\023~i\276g\362M<*:\222>D\212\201=\001\030\237\276\201\354\245>O\006\007>msC\276\3122\264>\367X\002\277\325\010\375\274\035\260\253<\010w\207>\366\321\001?\032\335\201=\273\357X=\002H\r>\241\273\304\275\354/\353\276Fr\036\274\337\246\037\276^\364\325=\177\274\227>\327\370L\275s\021\337\275\010\252\206\275e\302O>\225\202\256\275\363Y\256>t\357a\276\314b\222>r\334)>Y\027\027>C\254\236\275\264\216\352=/n#\276e\031\242\276\0162\031\277\272-\221\275\247?\373=\227\256\240=\320\233J=\006\273\201\276\207\371\022>ff&=\325%c\274(D\240>\232\224\">\313\241\265>w\017P\275\216u\261>)?\211>\357\346\251\276\371I\365=\240\246\026=4Il\275\252H\325>y\314 >\351\361\253\276N\013~\276\223o\226>\374\336F>\262c\243>{0\311=\255\243\232\276\345b\214<\013\0149>d\006\352\275\267]\000?IM\233\275\372\325\334\275ZG\225>\027\202\334\275\000\343\211>\nh\202>\266-J>\313\274\025=7\375\331>Z\360\">-\371\216\272\325\354!\276\233\311\367\275\277`\247>\024\262s=\374o\345\276\320D\030>\002\267\256>\016J\030\276\265o\256\275\200\r\010=\306m\264\276@\301\245\276\276\301W\276{k(?\272\332\272\276}\007\277\275\353\250\n\276\237\037\246\275Ig\300\275\366\013V>\244\374D>fI\360>z\245\014\276[\231P>o\236J>\"\231\304;\203T\345;35\251\275q=j>\237\003K<\212\315\007\276\2132\333\276\'\332\225\276\2451b\277w\241\311\276\305p\265\275\251\023$@\352\312\'\277d\351#>\023~\271>\2451\272\276\213O!>\231bN\275\372\263\337>\0358\327?\314_\241\274\377yZ\275\261\341I\276\321\256b?bg\n\277\342\376\310\273xE0=\260\033\036\277\322R\251>\\ a\276\255L\330>\234\026\214>\207\334\214\2761%\322=T:x>\326\220\030\276\220\024\t?e\252`>\273\n\251\275\345\263\214\276\372a\324\276 A\241>\316\307u>\214\271\213>sh\021=\317\0219\275\377\317\341=\253\007L\274\254\305g=\320&\207\275~\214\371=\222\314\212\275=\017\356\275\263A\266> A\261>u<F\276]\277\300=\n\201\234\275\265\211+?\026Mg\276\035Z\364\276\007\360F\277C\034\233\276c\3214\275\241\363\232>\310{5\276\260rh>C\345\337<0\330\r>?\221\207\275?\307\247=$\326\242\275\341\321F\2774h0\277q=\312\276\277\177s\273F\010\017?\337\025\221>#\240\202\275@\030\370\275&S%\276\244\307\257><NQ>\206r\"\277q\223\261=ms\343>\236{\377\276\241g\233\277\221DO\276}\313\\>V\232\014\277)\320\367>\252d\000\275\241\020!\276nL\017>}\350\022\277 \n\206\275)\350\016\277\'\332\265>\235F\252\276\246\017]\276j\244\025\277\030}\365\276eJ\020<\377!%?\250\216\265\275\233\346]>>\350\321\277\300\222\253\274\005\300\210\276w\241\231>x\321\207\276\001\3001\274e\252\000>\274t3>v\032\311\276\003\t\232\276=~\217>O@\223=\321\006 =]\341%?\322\343\227>9\320C\275]m\005=\301\254\220\275W`\010>`X\376<\224\373\315>\301\305\002?\304w\342\275\340g$?D\300a>a\030p=\364\211\234\276\n\200\221\276\236A#\276\321\2232==\233\305\276\276\331f\276\254\312\216\2768\025\351=\346;\370\274\301\377\026\276e\245\211>\220f\214>i5D>\031\255#>e\245\271>\3127{>Z\3659>\261m\321\275#\242\030=\242E\206\276\010rP=\265\375+>\207\376\351>|\322I\275i9P<R\355S\276\302\027\016\2772\254\"=\302\243\235>\335A\024?rP\262\276-\225\207\276\324}`\276\317\024\212>\362^\265>\010Z\021?\377!=\276$(\376\275\263^\014\277\016g\336>\375\207\324\276Gr\371\275\246\017\235\276\325\262U\276\331\353}>\203\300\n\276\370\252\325=\026\366,?\035\311\305\275F_\241\276\253\355\246\274;\307\020? \357\025?\331\224\013>\335\014\367\276\212<\t\2766\2605\276\213O\001\276\342u=>W&l\2775)\005\277\221\270\307=X9\244\276!;\257\275\332\311\010?\r\216\322>\266\365\323<\317fE?%\257\256\276\215\2345\277\221\355\214\276<\332\370\275\355\203l\2750\022\312\276\032\027\216>\260;\275=\376y\277\273\363<\310>\364\032\233>\276\331\266\276\350\336c\276~\000\022>\245N\260\276\023~\311\276\027\267\201\277\373y\023\276\215\264\324>\222\256\351\276\320D\270\276\214-<\277\356\223\243\274\260 \035\277\020](\277[\231\300\276\370\031\007?\371\024\320\276\207\3712?\301\220U\274\245k&>\265lM\276\035\350\241<\'\203\323>\345\320:\277\006G\311\276\341\013s\276/\2062>\302`\n:\027+\n>\032\367\246\275W\tn\277\027\361\335=\264\345<\276\006\365\r>\271\337\221>\371\017\351=\007%\314\274\325&\336\276+\023\036\277\031 Q\274\204\360\000?%X\014\2778\370B>c\322\337\274\313\204\177>8J\276\2765c1\276cz\002\276\216\314\343\275\273\233G\276?\035\317\276\271\337\031\277E\022\255>N\3211>\273\'/>\302\372\037>\247\005\357\276\236^\271\276\t\247E>3\305\234=\245\203\305\276N\177\206>\"\303R\277\300\010Z=Kv\214>D\250\262>k\016\240\276\347\306\244>\031\312)\276I\272\246>eS\016\277\321\256B\276[\261?=\255L8\276\000t\000\277\311\253\023>a\3744=\226\317\222\2766\223\217\275\237q\261>4\277\"?\305Ue\276\023I\204\276I\242\027\276\003\354\343=\302\331\255=B>(>[B\036>\001\336B>\265\032r>+\023\036\276G\004\303=_^\200\276\260\221\204=\321\350\016\276uY\254\276\016,\307\274\016\335\254\275{\240\225>\245\275-@\266\206\322\274\260=\263>m\347;\276\310\265A\276\020]\260>\373\222\r\2752\254b\276\353;?=\'\333\300=\377\262;>\252C\356\275oG\270\276\t\371 >\340\271w\274=,\344\276\034\261\226=\340-0>\310\265\021\277V\324\000>3\334h\277!v>\277/\206\202\27677F>*\251\363\276\227ph\274%\257\316\275\346?\304>\010\346(>T\306\'\277\241g\223=%\222H>\353\305(\277h\\8>\321y\315\275\326n\313\276\\8\260\276\315\036\270\276Pp\321>\027g\214<\010Z\301>\345\355\310\276\223o.\277\005\243\322=]\212k\276\256\323\210\276\221~\023?\372+$=\213\213c\275\335\322\352>\033\365\020\276\314\227\227\276u\"\001=\250o9\276\214\271[\277\333\337\271=\275\343\204\276b\370H\276\324\016\037\276\010U\n>M\367:=n\372\203\276C\347\245\276\314\264\235>1Bp\277K\315\276>2i\035\274h$\202=\006/\n\277\0363\020> Fh\276\363\223\212\276\2407\025\276\306\334\225\276\004\255 >@\030\030>\"T)>\206\254\316>{\275\313\276\r\246A>\037\277\207\276\201\004\245\276!\007\225>Q\203\001\277\360m\032\276\361\272\006\277\221\233a\276\'\365\305\275ni\205\276n\300g>w\2368\2756\315;\276\234O\235\274\243;h>\030&K\277\214f%\275\010\254\344\277\326(\332;\364O\300\276X\312\242>\362\357\203>q\003\216>\331\261Q>\361K=>3m\'\277\034\010\231\276\366\356\017>\2608<\276\320a\256\276r2q=P\304\202=/\210\010=\312\375n>\n.\326\275\362\014Z\276\n\205(?\324\361x>\233=\240\276\252DY<@\331\244>\335\231\211\275\211\014+\276\262K\264>\313g\311\276\275\035\221\276\313J\363>\345z[\274.\343\246=Z\022\220>\262\200\231\276[|\372>(~\204\277\363Tg>\226\354@\277\344\275\212>W\t\326=B&\231\276\204\022&?Ttd>\316\250\371\273\232w\204\277\027e\246\276\303GD<*t\336\275\326n\213>f\237G<x\010\203=\027\234\241\275Nb\010\277\315\314L\276\"\032\315\276mt\016\275(\322\375\274r\026\306>\306\242\t>\303\330\002\276\320\3256\277\273\017\360\276\226\350\254=~R\375\276<\024e\276\345\362?>rP\022\277]\210\025\275\216#6>E\r\326>n4\020\277\236D\244\275x\266\307<1\261\271\276\360\277\025>\030!\034\276`v\317>\324`\332\276o\273H?\335\352\271>\025R\276>\344fX>\316p\363>\264V4\274\t\033^\275H3\206>\362\265\'\275\020\261\001=\210Fw>v\375\202=h\\\020?\332r\256\276\242\177b\276\263\007:\276%#\007\277jj\331=\261\336(=\357\217\367\275\332\217t>\344\275\252\276\2657x=t\357\201\276\315\312v\275\350\301\275>\240\306=\275\361c\234>\357\346\271\276\025\343\234>\367\"\032\275v\303\366>\205\224\177\276\324C\244>\326\034\200>g\n\275\275XV\272\2761\010\234>\267\321\200>r\247\224=Uj\326\276\221|\245\274\177\366\343\276\325x\231>f\275\330=\354\246o\271*\343\377\276S\350\354\276#\2763\276\337\246\377=~\343\313>\005\372D>\027+J\2760/\320>\t3\375\276\364lv\276\316\307\365\276u\003\305\275\251\336\352>\331>d\274.\037\311\274\003\262\027\277Q\210\240>\222\350\345\276\357UK\276,\202\337\276\204\201\307>m\347\253\276e\252\340>H\341\032\276WC\242>\235.\313=\010W@=@M-\276\320~\244=X\377\207=\323\336P?\t\026\007\276\013\322l>\032\213\346==D\203\276A\202\362\276\"\375V>\022\203\000\277\276M_>\353\213D\276\361)`>\365HC\275\021\036M\277M\363\336\2769\321.\276\333\026-\277\330\362\212=\260r\010>^.\322\276\262.F\277E\r\306=p_\007=\251M\034\276\374\2511>=~o\276\323\336\000>vT\245>\006L\340\275!<\252\276\r\215\307=\355\r\216>Lm\311=J\007\253\276D\250\242\276\202\221\027=\016-\022>=\233\325=e\307\006=\3543\'=\020\314\301\276\323\365\244\2754hh\274[\264\200=6v\t\276n\213r=\344\367\366\275O\262U\274\341\264\000\276\031\255C\276\260\254\224\276\037\205?@+\030\025\276\334f\252\274\310A\351>z\344\017>\366\321\311\275\354\206\355\275\351\'\274\275\027\2372?\241\333\233\276\237;A\274\355\274\215\274+\366\027=G\216\364\274\372\200\000\275\240\340\002\276\004\312\246>\034\227\221\275\'f]\276M-\213>\315\344\213\276,H\303\276\364\372\223\275o\235\277=I\3642=T6l=\317\203{\275$bj>fI >333\276\312T\221\276\345\325Y\276D4Z>9\235\344\274\363T\207=\253y\216=WC\242\275>\"f\276\220\203\342\276~r\224\275\225\016V>\257\224\205\276\2132\333\275\372\362\002>>\355\020>\335\322\252>\317kl\276\021\225!<\267\264\212\276n\243A>l\315\226=\214\334\323\274$\177\360\275\355G\n>2\003\365>\010U\232>^K\250\275/47\276\361N\031\274\367;\024>R~\022>\343\215l>\000o\001>G >>\317\240a\276}^\261=y\252\350\273o/\351=\200\202k\276N\234\214\276R\362J>\276j\245\276\344\204\211<\274\221\271\276\026jM\276\221\272\235=mV\255\276\215\356 >\177\207\242\276Ve\277>\345\355H\275,\236z\275\220\330\356<\377%\251\275L\211D>\020\257\013>Q\240\317=\264\314\302=:]\246\276t\013\335<\244\031\333>\313J\303\276\221,`>\247\"\325=\036\341\224>\311\037\374>\343\307\230\277\301\031|=\235\177{\275KYf\276\316p\363>\352>@>\335\352Y\276j\336Q>\242c\207<\232\262S<\247\222\201<S\320\355=%\314\244\276n\372\023\276\340g\\\276\037\021\323=\236^i\276\326\213!\276y\220\236\274\267\234K>%\006\241=\t\376\367=P\001p\276\245,C\276\261i\245:9(A>xb\026\276\363\377\212\275\257w_>\000W\362=(>\010\274E*\234\276\255\243J\2768fY\274\300\t\005\276\251\023\310\277+5\373>\373\"\341=\303\273\\\2762=!>t)\236\276\210\201\256\275O\037\301=0\327\242=\007\232O=S\313v>~\035x\275\0162I\274H\371\t>\340\241\350\275Y\206\310\276\273\013\024=B{u<BC\377\272y\002!\275\335[\221=\310%\256=\263A\026\277\203Q\t\276\010\216\213=\344\022\307\275e\344\214>6\352\001\276\373\313\276>\223\214\334=\201\355\240\275\247y\207>i:\233>\354\300Y\276\345C\020=O\007r=i5\224>\2271\252;z\337x>\304w\342\275N\013~\276LO\250>\375\260\357:\001\027$\275T\343\005\276d:\025:\\\253\275\275\2017n\273\007\360\206\276t{i>Z\275\003=\260\217N>\235hw\276\341\'\216\275\317\024\032>\343\252\362\275{k\300\276\027H0\276\307)z>&S\265>\n\2001>{NZ\276-]A\275\200\324\206\276X\255,\276\311\036\241\275\212[\305\275\373\005;\276\010U\352=\343\373b=d\222\021>\025:O\276\371f\033\276j\373\327\276\304?\254\275\372\322\333\274\333\030\273\275%z\001?\033\273\244\276\030C\311\276\315\314\314>\343\251\307\274\377[i\276m\312\025\275\210\364\333=]n\260\274\000\306\023>\264q$\276\031s\307\276\0260a\276\270\257\243\276\003`\034>\367\307\233>\220\332$>\276\207\253\275B&\331\275Ov\223=\334h\240\2762\311\270\276\320\233j>\324}@>^h\356\275\020\\\345<\007)\230=@\331\204>\366#\225\276\032\244\240\275\003\351\302\275z\245L\276Q\203\231>\020\256\000=\333\026\305\276o\361\260\275t\322\373=\346?D\276?Vp\274\223W\007\276o/I\276:#J>2Z\'>\222\2213>8\025I>\357\315\312;\270\344x>\376\324\250>\261\334\002?\\\307\270<W!\245>\335\357\360>\224\336\247>\350\301\215>aO\253>\302\022\017>\r\216\202\276\272k\t\276\302\331m\275Y\335\352\275\341)$=\347\035\247<\245,c>\377\312\212>\"7\003\276\201\317\237>n5k\274\364\251#\275\211\014\013\276\364\375T>M\020\365<\353n\236>\036k\206=\301\255\353\276R\017Q>\356\010g\276k\361\251=\344\240$>1\231j>\3127;\276\331Z\337\276\340-\020>\311\036a\275\271\210\317\276;\307\360>\033f\210\275\243\311\205\275@L\302\274(,1>s\327\322=<NQ\276\372\'\230\276\000\221*@w\235\215\274\002\274\305\275K\316\344;\212!\231=\241J\255\276\325!\027\276\301s\017\276zSi?+\023\376\276{\026\004=\216\007[=\350\025\317<\223S\273\274\303\r\000\277\257w\277\276\244r\263\275?t\201>\325\313\357<\260U\262>\343\246\006\275\341\0133\276!\310!>\346W3=q\254\213\276\266\363\215>D\213l\275\363\343/\275f\367\344=RGG\275\016g~\276\353p\364<\224\373]>\357\341\322=>\"f>^\242:>\364\335-\274\373\226Y\276]\371,\276\206\036q=&6?>\264\216\n\276s\235\226>\352\354\004>\372cZ\275~\000\262>\226\316\007=\325@s\275W\317\271\276\350\2071>\356\224\016\275\033\2018\276b\2416\276\006G)\276\243\006\203>q\034x=7\216\230\276\211zA\275~\030\261>}\\\033>\013\014y\276\260=s>.t%=\"l\030>\022\330\274\275\352\263\303=Qf\363>\261PK>\323g\247=x\355\022\275 )\002?D\206\305>\250\214\237=\225FL=\235\275\263\274\n0l=\020;+\277\024\\,\275g\n\315\276A\361\263>\253\347\304=O;\374\275\n\203r\275\256\330\257\276\022\245\235>\301\377v>\023~)>9EG>\364\356\331\273\257BJ\276\202\253\274\274\333m7\276$&\210\275\361\021\241\276\273b\246\275K\002\204>\177j\234\277\310\007\035>9\264\010\276\210c\035\276\374\214\013\276\357\215\241<=~\277\276\373\"\201>\'\245 \276\367\216\032\275\353\214\357\274\226>\264\276h\313Y\276\3603\016>K\"{\274\235\021\205>\345B\345\274PT\266<j0\315\275M\325\342:f\332~\274\342u]\276lx\372\275u\255==9\177\323=\333\247C\276\003\2627\276S\221\n\276\361\326y<\316S\335=\021\341_\275{k\340\2753\371f\276\3377^\276\334\364G\276\025\035\351\277!\002\376>Ll\256>:z\034>\021S\"\2751\010\004\277~\000\202\276\030}%>)v\264=\320\362|>\232w|>\312l\320>\345D\213>\207\3408<N\264+\276%;\246\276\236)4>l\n$=\253\t\"=\346\"\316\276\020x`\275=\017N>|\0177\276\034\266M\276nQ&\276V\203p=\212\002]>\247\313b\275\360\242\237>P\337\022\276\253\007\254=q\255v\274&\2151>A\237h\276Ym\376\274\270\221\262;\025\343\214\276C\306\243=\322o\337<\315\314\214\275F\013\020=x\227\233\276R,w\276\326\214\214<\031T\033\275)\350\366\275\353\341\253\275e\374\233\276xz\345=j\274\224>\017EA>\0049(>[\224\271\275\006\201\325=\342\005Q=C7\273\2759\271\337\275Oyt\275\323\275\016=\252`\304>\277\356\264=\215Ag\275\266\333.\276\204)\312;q\033m\276\025p\317<\222t\r>\223\214\214\276r\304\332=\232\373\365\273/\300>\276_^\200\276\334\327\001>\253&\020\277\000\221\036>}?U>\312\303B>`\"\236\275\314`\214=\022\335\263=4\200\307>*\306Y>\340\326\235=\272\202\255\275\347Q1\275\2240\203>\377\0047\276J\n\254<\277\200\236=\032M\256<k\324\303\275\360\247\006\276]\245{=E/\243=\321\221\034>1(S\274\260U\322>]\244P\275\010\216K\275\223\214\034>UP\261=\374\3067>I\021\331\275C9q>]\304\267>b->\276\304%G\276\\Z\215\276\204\375\r<\324D\277=V\237k>\340J\026\276\016\275E<\310A)\276\237\002\340\2754\235\315>/\335\344=@\366\232\275+\244|;<\245c>j\023\007>\360\277\225>\023\n\321\275\311\345\257>R\n\372=\254Q\264;\214./=+\244\374=M\241\203>\303\r\270>\2235J>$b\n=\013^t\276$(6\277\301\213\036\276\3268[=I\2051>\317\024Z\276W\317I\276\227s\031?\310\323r=\300?%\275\033\325\351<\\\035\200<\352\004\024\276\222\2244=\207\371R>J)\010\277\274A4<\362\007C\276\352[\346\276\033\017\266<\311\313\032\275\035\314\001<\027H\240>g\325\'>\027\202<\276\270#\214\276Y\337\300<ff\206>\213\032L\275\366\227\335<\346\226\306\276Ic\204\276\362_\240\274\323\245?\275\215E\223>\357\341\202\276\226\317\022\276\230\3353@C{\253\273&\217\'=3\213\260=\373\256\010<\205|\260\276\370\215O\276s\242\035\276\243\222\222?\030&\223\276\001\366\241>>\3550\275\310{U\276KX\233<\037\2777<!\002\016\276\324\362\303=\263\315\275\276P\001p\276\267\013->\317\367\023\276\254\312~\276\345+\201;\353\252\300\274m\032\033\275\220\367J\276\232\225m\275\214,\231\274\3232R\275\024\"\000\276&\375\275\275\235L\234=N\321\261>yXH>\357\003\320=RI\335=\014\352\033=$b\212\275\'\3325\276\004t\337<;\031\334=0/\340\276B\0062\275\330e\270\275\021\374\357\2751|\344>/\243\330=.V\324\275TR\347\276\020u\037\275\336\253\326\275k\233b\275\342\257\231\276\3328\302\275\325!\227>\320\263\331=\252D\031\275\275\251\010\276\304w\302\275\212v5>\257\005=<\213\3039>\215\264t>Ve\037>\362\014Z\276\271\245U>L\2526<\\\222\203\274Uh \275\203\027=>\351C\007?\2073?\274\010\260\310\275\341\177\313\276\215b9\275\236_\264=\307\364\304\276|~\250>\017\271\371\276\336<\365>\307\272\030\276\030!\254\276\271o5\274\225H\202\276E/c>\223\343\216>\245kF\276\345\362\337=\301\034\375\275\256\2739>+\354\263;k\020\206\275w\025\242>\231\365\"\276[\261\377\275\277}}>\342X\217\277 )b\276r\304\332=\371\364\030= $\213>?\251V\2763\303\246\275\230l<\275)\320\247\276#\330\270<>y8\276\376&\204>\303\330\202\276A\237(\276\020X\271\275\324}\000\276A\267\027>\033*F>\345\233\355\275~7]\274L\250`<\363\313\201:\023,.\277\001\337\215\275r\213y\275eS.>\271\301\320\274\255L\210\276{\024.\274Oi\016<1?7=I\235 >d\222\261\276\371\024\300=/\372J\276\264Y\235\277\'\245\200>\224\331\300>\030B\016\275\374\214K>\306\277\317\275\037J4=\333\026%\276\373\\\355<\200(X\275\025t{>\237\223\336=QL\036\275j\030^>\251\333\331\274\265T>\276 \014\214\276\205\224?\276&6\277\275\202\255\222\274\354\302\257\275;\302\311\275>Y\221\275\r\340\355=\270\222\335\275\370\215\017\276\352\222\221=`\037=\276iWA>\377@\271\274,\016\347=F|\347\275:X\217>\200`N\276\025W5>_\007\336>\236Ac>0\3622<\323;l\272\334\332\302\274\317\272\306\274-\356?=\321t\206\276\335{8\276\334\021\276\276Dn\006=\212\002\375\275\351\233\224=*o\207>\013\230\300\274t\231\232\274\271\337\001>\201C\350\276\310Eu=\232\261\350=S\263\307=*\254\224\275\273D\365\275o\236\352>\207\376\331>\261O\000\2755\322\322=\270\350\304\275W\351n\274\250\306k>~\343K>\361c\254\275\203\023Q\275~t\252>\336v!>OZ\230=\206rB>\332U(>v\375\262\276v\246\020>\363\257\205=\n\334:\276R\362*>\223\030\364\276\353\220\333\275\023\357\240=uv\022>\252c\265\275=\201\260\274W\262#>t$\327=\017\326\177\274B\226\205=\241\276\005\276\3748\232\275\332\003-\276\213\207w\274\2240\223>\251\274=>\022\373D\275e\250\312\275\265\025\373=@\023\001\277x\271\210\276\271\000\224=?\2140>\034\321\235=Lp*=6\260\205>:z|;\036\304\316\276rm\350\275_A\332\275\204\273s\276\303\236\206>\3726\263\273\221,\240=\212\037\203\276\202\034T\276\034D\253\275H\334\003>\207\027\304\274\226x\200\276g~\365=0\365\023>\254\034\232>uvr>F\261\034=\256\323\270>|{\027=\226\317\302>\361K}>Bx\244>\025\3066?g\330E9\337\370\232>\365\'\026\274\354\333\251\275M-{\276\247\003\231=\267b\037>\370\001\243;\356_\331=4\202M\275\320\320\217>U\023\244>\222^\024=\"\216\265>\371S\231\273\336\037\237\276\322\214E\275b\3631\276\323\207\356=\306\341\274>6s\210\275\310A\251\276\335\323U<\024\263^\276\036\026\252\276\263\230\210>\244\344U>\215\227\216\276\326n\233\276\276\237\212>\202\3128>\r\245v=\3058_>\377\t.\275c\271\305\276\270\222\035\276n\335\r=\261\304c>od^>\264g\340;\000\000\034@Ra\214\276/\372\n>\013)\237>&r\201\275\272h\3109\353n>\276M\370E\276\356\353\270?vT\305\276\277+\222\276T\342\232=\214\272\026\275@\336\353\276\216\351\211\274\220\367J>\235\361\275\275\306\026B>g+\253\271\321\350.\276F\353\000?\252\324\354>\256\273\211>\275\000\373\275\246\017}>\310\357\215=\251\301T\276\257%\344\276\344\275\232>w !\274\352\312\247>\351\016\342=\272N\323>OX\"\276\002gi\275\232B\307>m\250X\276\201C\010\276\364\340\316>\374\0303>\240\371\\=\313\363\340=\2721=\276\311=]\275{L$=Nb\320\275\254\250\001>\230\303\216=\257|v\276\"\375V\276\342tR\2755{\220>\213q>>\367u\000\277,+\215>\307h=\276\340g<\276\037\272 >uw\035\275\262\272\005\277\240\375h>K\\G=Ku\241\275\232\t\206=\340g<>]\341\315>A\202\002\276\351\361\373\275\261\026\237>\313\364\313=\005\246\023=\361\327\204\276\261\371\270>\036\212\002>l&?\276\001\373(>^K\310\276\352\354,\277\\=\347=\"\342&=\331?\017=?\221\'\275\343\373\"\275\325\225\317\276\203\373\201\274\331\261\321=\251\370?=w\206\251\2755\354w<\326\220\030\276\327\243\200\276\321?\201>_\265\362\275\361\272\256\276\220L\207<q\254\233>\372~\n\277\366(\234>G\003\310>\270\344\330>\215\234\325\276\0322^\275\0221\205\276\375\331\017\276R\017\021\276\rq\254\274\273*P=@\332\237\275\342\036\353>\03244>I\235\200\274\224\274\272=\\W\014=r\371\377\276\005\024\352<\023\'\367=\264\216J>\317fU\274q\217e\276\335\007\000>\366\013\026>\361cl\276\232%a>\224\372r\275\363\221\264\275n4\000\276\203 \366;N\227e\276\022\024\037?\273\270M>p|\355\274>\226&\277\026T\257;JA\367\275\310\352V>\rq,\276\275Q+=`\221_=\363v\264>\026jM>\270\254\002=qXZ\275zS\341\276KYf>\001\301\234\276\2657\250\276\366B\201\274\030x\016\276~\251\257>R\362\n\2763\033d\276|a\022>*Ra=jj\331\275\037\242q>n\372S\276\323\207\236\276\327\206\n>\207P%\276p\010\225>\253\354\373=\016-r>C\347\205\276(\325\236>\037\021S>V\237K\276\243\257\340=,\243\354\272\023\270\025>\230i\033>\370\302\344\276\346\366\334;l\314\353\274\354\206\r>\306\242)\276\013\014\351\276\365,\210<\2132\333=\212\315\367\276\245\371#=\226CK=\311q\207\276\275R\026\276G\311\013>\314E\034>\371H\212=l\t\001?\347\000A\276\2608\034>\2029\212\276\302\245c=\320\323@=v\3036\276\360\334\253\276,\361\000\275\333\247C>B\262@>fI@>n\206;>5^\272\276\005]\261\273\302i!\276\352\312\'>M\272\255\275 $K\276\336\037\317\276\'\024\322>\242\356\323\276P\342\363<\355\360\327=TR\347\275nk\213\275\333\026e\276\220kC\276\023d\244\275\217S\304\276\272\207\204=\032\250l>\3127[>\370\215\217>\200\237\021>R\355S\2761\n\202<\303\201\020\276\377\007\270=x\177\\\276>\263\244\274\215zh>\272\332\252=\031s\227\276<\300\223<V\237K>\34756>E*\014>&\374\322\275\247\346\362<\212\001R=<k\027\276\216#\326\276Tn\242<Y\027\207\2762\344\230\275\t\303\200\274\305=\366>\017\326\377=\005\250\351\275\034\316\024?\252E\304=\203m\304\275\366@k\275t)\016>]\026\323=\037\241\246=\204\r\357\276\007\316\001?\276\244\261<\024\257\222\275\273\267\202\275\025o\344\275\0010\036?\3063\020\277c\013\301<f\2758>]\376\203\276\206r\002\277)\350\026>hw\010\275\343\304\027\275\027ev>\237q\001>\362\355\335\274\373\313\316>;S\350\274-&\266\274k`\353\275\347\373i\276-[k\275t$\227><f`\276\201C\010\2761%r\276\241\204\331\276\336\260\355=6\267\235;\206\346\312\276qU\211\276\347\214\250>{14\276\342\314\357=\024\355*\276\243\257\300\275_\265\262<\007\231\244\275v\341\207\274\231\330\274>\313\234\256<\254sL\276\257w\337\276\031\222\223\275\rc\034\274\200\267\034@?R$>\200\267\320>\014\037\021=\321\221<\276\257\314\333\274\212Y\217\276[\224\331\275\340\204b?5\231\261\275\271\245\025\276\261\304#>\022k\241>J\265O\276\351)\362<\177\244\210\275\331%\252\276\207\247\027>\214\363\307\276\0258Y<\200\265j\275\203\206^\276.\347\262>M2\362\275I\024\032=\322\214%>Q\210\220\276\205\224\237\276\267zn>v\033\024\275\333\212==v\337\261\275\246Fh<dv\026\275\367\221[\275%]\203>\273DU>\306\247\260\276\"O\202\276\304\316\304\276%\315\237<\301\213\376=\256\237\376\274\211\360\217=\024\350\033?\034\3609\276R\231\302\275\211\352m\276\t\376\027\276\331\231\002\276\275\035\321\276}>\212\275\340g\034\276i\253R=\275\214\242=2w\335>\0056g\274\327/\030\276\032\213\006>Y\300\244>\023\'\'?\230\372\251>\203\206\376=\274?\036>\223\030d>\2652\341\275\362\2600\276_\014\225>\2303\233\275\350\022\216\275\334\202\205\275\250\214\217>9^\241=R\233\250\276\201&\002\276\273\354\327\2732\3072=\2721\315>\211\357D>\235\364\336>\220\240\230>\300\317\370\275#\363\270>fk\255>a\032\006\276\037.\231\276\275\212\254=\000\306\023>\215\356@\276X\255\274>\260:2\275\024\010\233=\304\tL\275\305\311\375\275[\231\240\276\215\321\372\275\2304f\276\016\363\345=\253!\361=\301\032\247=\307\022\026\275G \336=\n\235G\277\265\246\371<\345\'5>\303\364=\273\204\020\020=\r7\000>\025\306\326=\305\311\375\275\3745\331=\232\266_>\367\027\013<\354\370\257=\224\210p\274\357\376\030\276\312\371\"\275\350\023\t\277\217\344\022?\356|\377\275TR\247\276zp\207\276\340h\307\274\376&T\276T\304\251=\213n\235=\342\253\235\274n\300\347=\244\374d>\300[\340=\243\221O\275d;\003\300vlD>\306\212\272>}\350B>\016\333\226=\037\205K>C\342>\276!\260\362>\303GD<\212<)>\355\365\356\275j\366 \276&6\037>\2652\201\276\364\244\314\274\364O0\276\327\022\262=\200\324F>\367\344!>q\310\306=\274\010\263\275\327\3006\276\306\340a=\'f\375=\213\026\240=MJ\261\276\210HM\275\310A\251>\217St>\016\025#\276F\322\256=\357\033\337\274\013\322\314\276\"qO\276U.T\275T\251\331\275\201\262\351=\200\267\000>\276\0233>M,0\275\356\226\344\274\036\265S\273Q\275u\275\020\3517\276OZ\230=\024\320\004>\316\376\300\274I0U\275U\373\304>r\212.>(\017k>2\2537\275\372aD\276\275\304\230=8\333\\\276%#\267>\017\264\002\276XW\205\275ob\210=\177\274\027>4\017 \275\325\2625\276\035\001\\<\373\350\204>\312\025\356>|\3620>\t8d\276S?/\276/Q=>&a\225\273\302\022\017\275.\313W\275\276\240\205\274\314\270\311=d]\\\274\210\200\003>d;_=\237v\230>\001\373\250\276\323\300O=\317\240\241\275\021 \236\272\347:\235\276\327\206j\276\207\245\301=\n.\036\277\272I\014>\251\237\367=\205_\n>\316p\003?\265\025[>\005\250\t\276\264\223\031?b\331\254=\202\220L>+\373\236\276\211)Q>\376\016%>\200\267@>\322\034\231=,\232\316>\236)T>%yn=\263\265\216>P\217\255=\022\203\240\276\344\332\240\276yX\010\276\377\3135<X\312\342>\244\337\316\276\0216|\276z\216\210=\013\324\342<\211^\246>\206\033\000?\373\351\177=\336:\177\275xze\276\316\374J>\331B\020>\033\365\020?\3642\232>\265\025\213\276h\320H?\273}\326\274\366\'\361\274\222\\>\276\314\t\232=2\217\354\276\213\375\345=y\004\227\275M\326\310\275vO\336\275\223\214\234>\372a\244\275\021\252\204\276\344,\014>\353\034C\276\004\342\225>\202t1<QJ\210<l&\037\2766\352!?\277`w\276\312\211\366=\342X\027>\2755\010\277\350\245\"=)\226[\276\2034\003\276\210c\335=\221\233\341=\001h\224;7l{\276l\225@\276\017\272\304=B\317\006>\326\213!\276O@\263\276d\006j\276\200`\016>_\007\276\276x\321w>q=\002?\022\024\377\275\323\024\001\275\364\340\356\276\374\373,\276\036\026\022@\371\017\231\276}\3203>\240\025\030\276\302\022\277\276\362\345\252;\242\361\004=z4\225=\262.\326?1\231\312\276\013\322\314\275K<@\276\247 \277\275\351`M\277\214J\212>w-\321>\220\367\212=\327i\304\276\020]0>k\232\327>N(d\276\214\276\">O\224D=\250o\331\275J\231T<\2179O<\211\357D\276\223\000u\276\004\377\273=\372aD>\251\370?\275F\353\210\276\273\n)>1a\224\275@\024L\274\003^\306=\354lH\274\006L \276\277\213-;\203n/>T\247\003=\032n@>\361\272\376\275J\265\237>\244\031\013\276\363\000\226\2740\203\261<\345\263\374\275\206\311\024\276\350\336c\276qu\240=d;\337\275u\260\376=\024\\l>\177\3315?\340\326}>\350\301=\276\037\200\324\275\320\266\232<{\210\306\276v\375B>\031\257\271=o\365|>\357\254\215>\366]\021\276T\254\232<\0366\261=\372&\215=\244\030\240\274\227\342\212>\204\236\235>\225\267\223\276M\025\314\276\325&\216\276z\215\335\275W\314\210\274c\271%\276\261\304\243>\310E\265=\363\037\302>\320\362\214\276\205\224\277\276\233\217\353\275\022\275l>i\251\\\276\026\373\273\276\010w\'>(\n4\276\313\271\244>\200\361\274>\276\274 \276\347\251N=\0260!>\'g(=\330\014\220=\323\207\356>\232\261p\277x\177|\276\304\261n>\361\235\030>\204G{>\027\232\353=a\216^\2761\224\023>\017\267C=\312\375\316\275S\256p\276\374\214\253>VEx=\350\206\246<\0054\321>l\352\274<B>\250>\026\2073>\230\301X=Sy\373\275Pp\221=\320~\344=\264q\304>\305\004\225\275\306m\244>\236\263\305\275s\205\267\276%\006a\276\232#\313=\030|Z=M\323\014<M2\242>\027\237b\2769|\262\275x\223\204\273\001\336b\277\220gW\275Q\203I>\277\267\t\276\020%\272\275\037I\311\274\357\033\027?\177\373:\276\226\261\201=\336\002\311\275\t\247\325>\363\037\222>h?\262>X\250u>\025\000\303\276\227\377\320\275\217\374A\276\202o\032;\270\257\003>\222\\\376=\251j\202>\241\204\271\276*:\322\275nn\014>\374\0102\2737\211\001\277\3331\365\274\223\306H>\315\003\270=\344\204\311\275\356|_\276\304@\327<\256\r\345>\373\007\221;\226\354\030\275\345%\277=qVD\275\237Y\302\276\034\231\007>Lq\245\276\201\320:=\247\"\025\276\032\250L\276A\267\247\276r\026v\276t)\006?\201\262\211\276\3171\340=\366E\022?\020?\377\273y\351\006\276\217R\251=\266\330-=\265\3410=g\357\214\274\032Q\"?\301\312\301\276 \322\017\276C\0031\275\342\036\353>\252`\024>i\220\335\270}\006T\275\334\272;\276\024\226\310>r\341\220>Y\375Q=\243\036b\276\000\214g>V\016\255>\343\026s\274\225e\250>{\367\007>\023fz\276m\376_\275\210\200\203>,\237\225\276\321t\266>\322:\n\277\rm\200=\001jJ>\247;\217\275\276\0233\276\365g_\276\365\276\361\275\336\223g\276\026L|=\2505m>\036\371#\276\333\031f\275tA\355\276\221\321\001=V\202-?U0*?\323\207\016>o\024\264:\017\013\205>nn\014\276\374n:\274\317M[=\2173r\273P\302L>\245j\273<q\033m>\255\372\234>\323\366\257\276S\t\317<\3711\346=\244\210\254\276\204\273\223\276\217p\332>\250\250z=V[{\273h\224.\275.\255F\276)?\371>\002\021\342<\363<@\277\354\022u>\025\000\303>\236\265[\274\'j\251=t\007\221=\375\021F=\025\251\320>\315u\n?\244\2452\276\322\304;\275\273\355*?\013F\245\276\251\2070?\304\262\231<\306\205c>Ae\034>F\261\214\276b\326k>f\244\336<Xs >\003&0\276:\351\375\275[\224\331>\033d\022>L\340&?%;v\276.\342[>b\204\200>\270#\\>\376\016\005>\000o\221>\271p\000\276gaO\276\004\350w\274W\225=>\354\300Y\276#\025\266\276#\204\247>n\300g\276\2608\334\276\005\243\242>t\265\025>\276\2441\276\017E\261>`V\210\275\326n\003\277I\205Q\276)\320\227>Z\0215=\245\024T\276\262c#\277\324\232\246?\203n\257\276Z/\006>A}\373>J$Q\276\277\324\017?g\270A\276Z\273M?.\377\211?8\370\302<l\262\226>\276\205u\275\214\333\200?\357\217\327\276\025\214*>L\211\244\276\007\010.\277\013\014Y>\t\304k\276\337l\323>\236\322\301>ka\026=\014\3510\275\277\324O>\226>\304\276\240\246V>e\0013>\210F7\276N\265\226=\207\341\003\276n\243A?\273~\241>,+\275\276\346t!?\247x\334\274z\302\262\276A\202*\277\250\032\235=~o3\276=\n7>\000pl\274\316p\003>\276M\037>h\"l>\356Z\302\275\224\331\260>\3333\313\274\246D\242\276\320\n,\276\212\037\343\276\362{k\2770\360\334=\3127\253\276\210\272O>\250:\344\275Nb\240>a\250\303\274H\304\324=\335\t\226\275\027\016d\276P\307\323\276\325\312\244\276\\r\334\276\236\352\300>\266\237\314=o\rL>L\303\360\275\365\363\366\276\2235\312\276\362\260\010?\334.\024\276RD\266>\037\205\213\275\207\247\347\276\325>\025?\270;;\277=\nw\277\332\346&>`\260\003?=\n\247\276m\220\021?\226>t\276\322YA;Bx\204>2\311H\277\211\265\270>\226=\311\275<N\221?\223R\010\277\246~>\276\257\224\005\276\220N\r\277}v@\275\n\327C>\tP\223>\032\031\204\275\364l\016\300\\=\'\276\272f*\277\021\030\213\275\\Z\315\275\315#_>M\020\245\276\236\265\353\276\020@\312\276\315;&\277\220i-\275^\364\245>x\013\344\275\205wQ?\313\363\240>V\237\013>\352\262\210>\341\263\265=\030\317\300\276\303\r\030\276\235\2059\272\3750\202>u\260\316>\0265\210>3\030\243\274\337\370\352>R\2706\277J)\350=\330d\255\275\253\317\245\276\343pF\276\214\326\341\276\233\257\222\274\007\323P>\323i]<\223\306(?\235h\227\276\316\031\021?\302Q\242\276 \014\374\275T\031\306<\2279\335\275\260U\002\276\300\347o?\022\332\322\276\037\277\367>\255/r\276\262\327\353>\013\355\\=k\237\006?\220\020\245\275\234\242\363\276H\337$\274\255/\342\276]\026\223>=\'}>\261\304\203\274=\2335\276\277\202\244>S\256\020>\312\303\342>_F\361>\020\025\364\273\"\246d\276\340\271\307\276z\215}>\225e\250\276\215%l=f\203L>`\345\320=\t\371\240\274\351}\343<d\317\236<>\226>\276\025\000\243>\314{\034\275\372\263\277\276^\200\035>\205_\232\276V\270\305\275\371N<\2778\333<?\266\241B\276\326\342\203\276S?\317>(D\260>G\254\265\276\227\377p>X\2554\277f\334T\274\234\026<>\326\213\301>\275\000\033?{f\t?)\"\203\276\n\305\261\273k`\013\276\264\260\'?\201>\321\275\017b\017\277p\266\271>a\375\277>\200\267 >B[\316=\2132[\276\361\272\036\276Y\300D\277\331\353\335\275e\374\373<gHU\275\320\'B\277\307\200\354=Z\201\221\276\340\020\232\2761|\224\276\031V)\277\267\234\013?)\355\275\276v\032I>\010\311\322\276M\363n>\276\026t=sK+>\234P\000\277\314(v\276\317\024\372\275\305\217\361\2756\006\275=\334cI\277\010U\n\277\300\317\230\276\217\341\221=\314\t\332\274\\ \001>\026\301\217\276\2554\211\276S\320\r>\334\364\007\276\212\216$>\032n\360\276\004\220\272>\232\225m\275\005n\335\275\333\247\363\276(\017\233>s\242\255>\375\023\234>\211\0074>\302LS\277l\262&?\0054\021\277\312l0\276\345D\003?\356\353\020\277y\001\226\276\243\311E\275\222\256\331\275\276\336\375\275;\374\245>\375\274\001? \357\305>+\030\025\276\370\252\035\277\325>-?z\337\210\276\344\240D\276\244\3445>$b\n>!\352\336>l! ?d\351\303>=\362G\276\374\306\027\276\356\2614\275\332\313v=\003>\357\276c\013\001\276]\373\002=\305V\220=\000\344\204\274^c\327>\331B\220\276\237q\301\276\341E\337\276\354/[>S\261\261\275\242b\234\276\0015\305\276`\352\227>\335^\032\277+\336\000\277\340\276\236\276$\3561\276\024\\\354\275\371\017!?CV\207\276u\002Z>3ki\275aTR\276U/\277=\215\230\271=\250o\031\276\t84?\034#\031=\315;:@bgb\277b&\366;P\374\310\276j\335\006=\350\207\321=\014Y\035>Ho8=\265\246\231?\331`a\275\317\367\023\277H\026\010\277\334\364\007\276\007\007{\275|\270\004>\355\365.>L\216{\276h\",=\242b\314>\344\203\276>\n\334\252>k\232\347\276v\2460\276\235\021\005>_\322x\277]\304\307>h\227\257\275V\274\021>[|\232\276\013\230\000\276sK\003?\214\367c=r\247t=\036\032\226=K<\220>\271\337\361>s.%\276\314\227\247>\341b\365>\227\305\364>x\177\034\276\005\243\n\277\327\303\027\275v\246\320\276\013^L\277X\305\233=\354\206\r\2766\315\003?\347\315\227\273h\2563>\002~\215:\316\340\217=\rlu\276u\315\004\277`\223\245>\261\242\246\276\260q\275\275:\257\301\276\266\276\310\275D\340H=O@\323\275\223\032\272\275\235Fz>H\341\372=DQ@\276*\343\237>\031\342\250\276\305U-\277\330*a>\374\035Z?\025\001N\275\267EY>\303\201\020>#\370??\345\355\230\276BC\007?\034%\017>\322\251\003\277\250o9\277\201&\322\276O\350u=-\354\t\277\367\001\210>\340+\232\275\017\356\316\276s\235\346\276\362\260\300\276\204d\361\276\273\n\351>\321\256\002\276\005\213c?F|G\276\201\354\245>U\334\230=\007\323\240>K\313\250\275\210c\005\300nQf\276TR\217\277\351l\267;R\'\260>M1\307=[\333\312;\202\255\342\276\224\333\226=2X\221=\221\362\323=\0260!\276\327\027\021\277 \357\225\276\371\240\207\276\203\372\326\275\227\255u>\356%\r>3mg\277\342\314\257\276K\222\307\2755)\325>J\265\277\276\260\346\000\276\351C\327\275\024?&?\241e\235\275\024\"\260\276\367wv=\371N\234>\207\304\255\276X\377G>\222ux\275;\337\237\276\033L\023?\241\363\252>\213\303\251>\0324\364=\016\241\372>\260\254\244>qU\031\276\251\244N=W\317\311>\020]\200\276H\036\343\273\351\267\277\276\225\237t>r3\254>\215\356\200\276\010 U\277\221\201|=\t\304\313>\260\033V>\235I\233<\235\021\205\275\213\303)?\253>\227>\350\244\367\2756\223\277\276\342\257\021\277`v\317>\377\347\300>\030C\031\277\376\016E\276x\233\227\275\315\001\n?\374\000d>\217\302\245\276i\035\325>\344\024\335\276l\317\014\276\010\220\241=\365\270\257\275\364O\030?^+a\275?\251\206>\377[\331>\344\024\235\276mV\035\277PSK>\230\030\313\274\234o\037;\036m\234\276\246\271\225\274\2505\r\276\251\336\332\275x\321\207\276y\2255\275\340\020\212>\3377\356>\224j?\276uVK=\227\312\033=\207\340\270\275e\374\333\2766=\210=\023\n\321=\\V\341<~W\004\276<N\221>L\032\343=Hmb\276\201C\210\275,e\231\2765A\024\276\271\374g\2767\216\330\276(\325\016\277H4\201\274I\242w>\304\316L\277Q\367\001\277\325>\025?\341\177\023?\342\036k>N\325}=\037\2004>\311\037\014\276(\017\203\2772\254b\276\205%\316>E\360\237>\302\302I=\307d\261=\204\365?>p_\'>\335\322*>:\222\253>\353\305P\276\036\247 ?\245N0?\300\3147=8g\004\276 {=>Ih\233\276\305\346\003\277\001M\324>\207\341\303>\310\322\007>5{\000\276\235\200F\276.\342;?4\367\020\275\354\373\220=\031\347o\276.\220\220>\000:\034?\030[(?C\255\351>\240\031\204=\314\227/?\010\224\315=y\222\204\276\242\264\327>X\034\316\275\257B\212\276\'\203\343>t)\256<\3441#\276\254\250!\276\320\270\010\277\350\244\027\276\265T\276\276\003\'[=\345\263\254>\207P\345\276\205\231\246\276\024\354\177\275M\363\336\276\351\327\266=g~\365\276V\017\230\275\263\2308>\225\267+\277\363WH\2757\374.=!\260\202?\251\373\300\276\273\355\302\276\335\014\027\276\354L\241\275\307K\267>`Y\211\276\177\274w\2763\244\252=\2451\352\276,\016\327>\322\251\013\276\332\311\220\276\311<r>\254\213\233>\336\002I\277<O|=\'\210:\277\207\334<\277\212\253\312\276\256\360\376>N+\205\275\373\350\024\276\240\211\240>\272e\207\275M\363\016>5)\035\277\250\036\211\275\270\036\005@\226\347\261\276NE\332>\017b\307=\201\354\265\276;pN>\361K\255\276\205\261\265\276\362\260\200?9\326E>\306l\311\2750\365s\275\267\356\306=\314%\325<\344\367V>k`+\276\376` \275\371\240\207\276\200\267\320\276A\016*\276.\305u>\212<\t\275\017\321H\2767l\213>N\264\353>\225q_:\270;\253=\372\nr>\341\227Z>\236\230\365>\332W^\275\224\274\312\276v\375\202>\311\345\257>\007\010\226\276I-\264=\313J3>\000\343\331=p_\267\2765\270\255\274\313\271\224=\276\023\023\276Pj\324\272b\334\255\275\r\375\303>\327\206\332>\277\361-\277-\354\251\276H\371\251\276\341\177\353\275\0220:=\3539)>/\213!\277W\t\346\276\245\275\241>\214\025\305>\366\264K\277\255\243\272>[y\311\274\325!\227\276\312O\n\277\025V\252<\377\225\325=\236\352\020\275\246\325\320=${\304\275%u\222\276\364\340n>fK\326\274i\034j\275\343\307x>\330\236Y\276K\2608\276Lq\025>\201\314\256\2750\236A\276\374\343]>\033\330\232\276}?5?\211\357\004>\274\004\307\275\204\331\004\275F\231\235\276\"\250\032\275\340\363C\276\203n\277\276\203n\357=\254U{=\035\312\260\275\362`\253\275YQ\023\277\330\273\257\276\351\017\r\275\240lJ\276\271\031\276\276B[.>C\034#\277\325\312d>\266\237\214\275;\031\334=p|-=\"l\010?r\334\331\276al!>\n\277\204\276\345\362\337=\2613\305=\302\027&\276\303\201\320\275\217\337\013?l\225\260>\3171 \275\263^T?\330\323.>\267}\017\275l&\237>\310\265\221\276y\221\251\275\t\341\321=N\320\246\274\031\312i\276\014\260\217>\217\374\201\276\226>\204\276\006d\027\277w\025\322\275r\341\260>\260\254\364\275\242b\254>\371,\317=\347\030\320=\304\261\226\277^\364\025\277\r\032\312>rP\032\277\023f\352\276\213\211\235\276>\320\352>\361\234\255=\322o\217>\255/\267\273*\035L>\361\235X>\243Z\304\274\322\306\321\275\352\257\327\274\232w\234<$\356\021\276\265\025;=\003\225\341\276$+?=3\212\025\277\266\363}>H\277=>\226\317R\276\336>+<\367\222\006\276u>\274\274^\242\372\275aq\030?@\244\237\276\314\356I\276\352!Z>\332\003\255\276\372\355k>\207\376\001\277\207\341\243<\261\371\010\277\'\203\203>\032\372g>F\2663>iRr?\270u\247\276\010Z\001\276\t\376\037\277pw\366\276\357:[\275\321\350\256>n\335\r\277H\304$?\027\363\263=z\302\302>\313-m\276\312T\241>T\247\303\275\276\243\206=\024\262s\275nL\017>\007\353\217>M\363\216>\220\024Q\275\023\017\350>\352>\030\277o\273\320=\303d\312\276\357\311\343\276u\216A>r\304\032=\336\260\r\276\225\324i>\346?\264>\244\210\014=\366\013\246\276\002\330\240=\323\274C\276\222\350e>\230\372Y\276\252\016\271\276%\006A\276\237\260\024\277\213q\256>Z\273\235\276\343\374M=\230\276W\274J\322E\277\236^\251\276-`\302\2761_\036\276\223\214\374>\334K:\276\200+\251\276\013\263P<|~\230\276\000\306S\276\215\321\252\276m7\201=\235\364\276\274\376\324\350>\257|\326=\315\222\300\275_\230\014>\366\356/\276[\266\206\276\235h\027=A\232Q>\2408\240=Id\237\274\204G\373>\035 X\276\256\236S=\002\324\024=\377@y=\304\316\264\276\347\343\332=\"7\003>\2343B>$\177\200>\307F\000>\300\254u;}\256\366\275\233=p>\247y\347>\005\2432>\\8\240>\334F\013?\270\006V\276\317\332\235\276\310\0144>C<\222\274\360\304\334>\300[\000\277\242\177\"\276\035tI\275\3646v=\361.\347\276\303\326\354\274C\034\023\277r\341\010\277\320\nL>\366z\267>j\373w\276\212v\205\276\006*\263>P\307\223>\260\255\237=\236y\231=!\007\225>sh\201>.\342\033\276\017\177\335\276\256\233\322\274\025\000c\277|\270\344\274\365d~\274\300\006\204\275(\233\002\277\261\242\246\276\377\312\n\276>\226\336\276:#\212>L\340\006?J\265\357>\355*\004\276\232`\230\275\001\373(>uv\262>\235hW\276\326\220\010\277\014\315\305\276\177\207\242>9\326\021@wg\335>B>\270\276\240l*\277/Q\275\276\237v8>y\351\006>w\241\371\275\3333;?\360\334[>\337\340\233\276\237\260\304\276\336\260m>\345\t\304=\207\277&>\236$\255>\351\324\245\276\200H\037>V+\203>\t\033~\276n\245W\274\365\326\320\276\206\033p>\036T\242\275%#\347\275\257\265w<.\342\213\276\247\"5\276\256\233\262\275 ^W\276\301\037\236\275\213O\001?\2451\032>\204\203\235=\343-\374;\001\366\341>\354\372e>em\223=\260\254<\277\334\327\211\277hv\335\274\204\236\315=,H3\275`vo\276&\252W\276\010\346h\276\001\301\004\277\'\206\304\275\034\010I\276\242\2271>\257\2626\274\303\326l=\251\237w>\240\340\">\373:\300>\036\212\002\276\326\213\031\277\304\353\n\277\322\3437\276\352v\266\275\313\241e>\242]\r\277|~\010\277F\353H>*R\301>*\251#\277\016-\202>\375\244\332\275\"T\t\276(a\306\276\255\300\240\276\310E\265\274\\\033\232>\376|\333\274\304%\'>\353\213d\276~t\252>\366]9?/\2507?:O\206;\207Y\303\273\367;\024>P\252\215>\211A \276\226\354\350\276apM=2r\206\276v\246\260\276\220\367j>B$C\275\356\350?\275\266\271\301>TV\023\275\303.\252=-\317c>\345\n\357=N\354\301\275\025\035\251=}\316\235\275\212\310\300>\030`\377\276\306\304\306>!\345\007\276\342\006|\276\355\273\"?w\020;>b\333\002\276\354\243\323\276\265\375k\276\325\004\021\276\205\317\226\275A+\300\276\363\223\n\277\227W.\275\303dJ\276\"O\322\275\031\377\216\276\356\316\272\276r\304Z\276\032\026\243<BC\017\277\273a{\276\275\030\332>ZG\265>|\'&>\225G\267\274\317k\214\276J\230\351>\312\371b\275g\321\273\274*SL\275\376C\212\277_\316,\275\022\245\235\276IK\205>\014\001\300=\202\037U\275\301\215\024=\333\304\t\276\"\032\r?\0324\364\275$\227\277\276\210\020\027=\302\024%=\321t6>O;\234>1\266\020>\316\302~>H\277\255>\364\3754\2760c\212\275\365J\031\276\332\346\246>\273~\001\276CV\367=\254s\014>\376}f>\016\363\325\276\224\274\212>rm\270>\3603n\276v2\270\276\330(k\275\310\006\262\275&\251\314<\226!\236\276\3441\303>\243\200\243;\323\244\024>x\321G\277uYl\276\267\177\345\275\020z\206\276\275\225[\272\r\216\302\276\204\236M=6X\270\275\017\177M>\241Jm\276\200\016\023>\3641\277=\377x\337\276\021\215\316\276\356=\314\276\205}\273\275\374R\037\276j\274T\276\256gH=\243<\363<\254\342\315\276\232\010\333=\023D=\276\310\230#?\305 (\277\017\234\263<V+\223\274\311\252\210=\033\r\005\274->-\277x_\265\275<k\'\277\353\255\341\276N\264\373\276\211\265\210\276\375\237c>\304\353\332>N\234\354>H\277\255\2760d5\276\026\2073>\332\221\312=\262\327\373\276\260\222\017\275\3122$>\275:\347>\367\036\276>\004\002\235<\377G\001<g\323Q=\375\202=>\203j\243=<\026\233=-\252\017<*R\001>\215\234E>\014\256\231=&\344C\276`\037\315>\312O\212\276\360\242o>x\2672\275\014\345\004\276\273\'\217>.\312l\276j\366 >\315uZ\276\357\311\003\276(\233\222\276\337\375\341\276\272I,>\335N\021\274\034\264W=\0221\345\276\246\325H?r\376\346=G\034\262\275w\276\337=\022Nk>\346W\243>\337P\230\275\036\212\242\276\022\275\354>\204K\307\275|\325\n>\314@\365\276\271\215\346>U4V=\244p\355\276\024y:\277\355\201>\277\224\274Z>\373z\031<B\t3\277q\310\306=\013\322L\276\010\224\275>i:;\276Z\365\311>\271\261\217;\263?\320<,H\023\277I.\027?\020\351\027>#J[\276\356|\217\276\350\336c\276al\221\276\264\254\233\275\217S\304>\342\260\264<\307+P=\332\311\000>\260\222\017\275\247]\314\2745\230\266\276\221\320\266\275\364\3754>%#\347>\307\363Y\275\314\r\246=\325x\001\277\340\273\215\275\316p\203<\025\306\326\275\233 j>\300\214N;\271\215F>H\376\240\275\234\334\257\276\326\376\216=\322\000\016@wg\r\276\334\332B\274\021\305\304=\362\322-\276\224\275\245\275\n\206\223=\345D\253\276\027e~?\206\004\014=\322\337\213==\014\255\275\376`\340=\260\003\207\276\364\211\234>\241\367\306\274\252\231\265\273\026\244Y>E\022]\276\354\206m>\221\325\255\276\204+`=\205\261%>\343\3758<\216\222\227>q\033\235>N\354\201=\327\300\326=:\222\213>DQ\360\276\016J\250\276\375\024\007\275\233\033\263>&\035%\275\010\260\010\275[\231\240>\t8\004\2764\200\227=\332U(>R\267\263\274<\026[\273Ad\221\275tB(=7O\245>\372\nr>\034#Y\274\020\317\222<\014x\231=I\364\242\276\3377\216>\200}\364\275\364\250\370<(*\233\274\377\312J>*\000\246\276\267\356&>\243x\225\274\007b\231\275\216X\273\276\362$I\276x\177<>Z\022\240> $\233>\327\210 =j\224\344;\257\353\327=\2073\377=\340g\334\275$\232\200\275\265\025\033\276y;\242>\006*c\275PS+\276\320E\303\274hy\336\275\3641\237\275\367\036\016\276S?\357\275\323\026\227=\226\t\357>g\'\203>\017\264\202\276\373\226\211>\227\305\004\276C9q>\250:\004>\261\3342>\310\357\255\276P\253(\275\032\027\356>\277\267I>\372~\212\276\313\205J\275E/#\275\313J\203\276\231\330<>W\354\307\277p\\\306\274\340I\013=\262\361`\275\233\254q>\354PM=p|\235\276\251\243\343\274s\200@>~o\323\275\264\310\266>\336\216p\276@j\343\276\024\005z<\321\226\363\275\231\267\352\274U\023\364\276\364\375\344\276\037h%>\242\321}>\343\252\262\274\237\366\245\273\313\241\005\276\362\320\227\275?t\001\275\273~\201=\006\307\372\271\246\233\004\276\277C\221>\360\242\357=R\017\221=\272,\016\277C\312O>\336\310\214\276j\334\273=j\274\374\277r\026V>g~\025>\366@\233>p\3173\275\000:\274\276D\210\213=\256\330\217\276\355\236\034>\003>?\276\177\023\n>\037\242Q\276W!E\276\226%\232=\250\000X=\000t8\276\24075\276\260Ub\276\"7#>\346=\256=\346W3\276\307\272\370\275\037h\005>\224\365\233<Ll\256\276\024?\016\277\353\377\\\276\367X\232\275\235I\233\275\026\207\343\276\327\300\026\276bJ\304>To\315\275\371\370\244\275\340\326\035>\244\252\t>\315rY=\202U\225\275\234\304 \276-C\234\276\016\333\226>\321g\366;j\331\032\276\207\277\006>/\372\212\276\324\267\014\276\350\336#\276b\363\201>m\347\233\276*:R\276%u\"\276\300>z>M\020\025\276\274\2260\276\025\306v>\326\252\235=q\033\235\276\236\007w\276#\363\210>\330\365\023?\200\361\214\274\337\376\234\275P\252\375\275w\020\373=\236\230\305\276\037\235\372=\332\217\324\275Yn)\276;\252\252>\345\263|>G=$\276\'\210\372\275\265\305\265<\250:\004\277m\215\310=@j\203>9\177\203\276\262\327\213>\354/+\277\2341\014\275\004s\224>v\340\214>\017\356\316=}\350\202>\221\362\023>\\=\007>\254\305\007\276n\367\362<\246\n&\276m\342\324\276\034\273\037\273\021\215\276>\252\341.:\374\336\346=\233\217\313\275^\274\277=\241-\'\275\333\247\003>x\320\254\275\n\242\316>y\351f\276\371\275\r>\252\360g=\003\315\347\274>\005\000\2760\021/=\275\251H>\020@j\276l\020\034<\225Hb\276\016\274\232=!Y\360\276:\225L=\223:\221>@\030\210\276,\357j\275,}\350\274\353\307\306\275\307K\367=\2235*>\321t\346\276+\244\214>\267b_>\t\250\260=\317\332\335>\211\352\275>Ll\376\275\366\013\366\275\353n6?\351\324U>Uj\366\275\324`Z>)y\025>z\344/\277.\255&\276\364\025d>\213\246\363\275\201!k\276nN\205=\022\332\322>\267\227\244>\010=\233\275\300\t\325>0\022Z\276r\334)\276~W$\276d\0369\276#2\214\276\361\203s\274\236\322\241\276\342X\027\276\307\270b=t\352\212=\t\341\021>&\375}=\312\032\265>\2244?\2755\245+\273~\2504=\234Ph>\333\304\311=P\001\200>\010U\212\276\265lm\276\021R\267<\203\2429=\205\317V\275\206\036q\275_\320\002\275?\306@@\336\254\301\274EK\236\275\'f\235>\226\260\226=\345\325\251\276r\334)\2761\265\245\274H\341\212?\367\001\330\276^cw\276[\010R>\326\217\315<du\353=p\321\311\274\327Q\325\275 \265I>\334\021N\276\234\371\025\275\367X\032\276\327\243\200\276$\264%\276\027\237b>\"\306+\275\266\332\203=\360\340\207=\205\252\342\273c\271\005\276\rS\033\275\305\003\n\276V\177\304\275\347\305\211<\003[\205>\224N$=d@V\276(~l>\351\233t\275\262K\304\276Y\213\317\275\2176\316\275v\212\225=\364\370\215\276\264\037\251=j\365\225\275a\032F>\360Pt>\210\020W\275N\227\005>^\272\t\276a\341\304\275i\306\342\275\306\245\312=\342\361\243\273\225\232\375\275\347\035\267>\007B\362\275M\370e\276\3434\304<\303\rx>d\003)=\266\271\361=\350\3770\273`\313\253<\356|\237>\306\024\254\274\000oA\276\016\276\360\275\030\225\324\275\"\340P\2768\241P\276a\375\257>\275R\326=\314b\002>\330\273\257\276\224\331`\276\026\301_>\006\365\355\276\254\305\007\276\177\331\375\276\021\001\227>\022\026U=\312\376\371\274!\217\205;\210\021\002\276\024\256\227>ni\025>\264 T=\242C\300\275\313\237\257\275\255\372<\276\226A5=I\205q=u\002:>\254\034:\276\371\024\240\275\377u\216=\341z\244\277\207\375^\275\265\246\031>\027\232+\276\244\374d\275?\251\366\274\006\273A>\261\212\027\276\326\213\341\275\315\"\224=\364\251\203\275\031\034%\276o,h=\256\360.>\025\035\t\276\314\270\211=\345\no\276\350\364\274<\362\352\334\275\247A\261\275;R\235=\321\255W\274R~*\277 \233\244=\034\265B<9\356\024\276\351Em=czB>\235*\037=\320\r\r=\240\2110>\357t\347<\342X\227\276 \014<>\n\007\014\274\216u\261\277\330\330\205>\001\366q>\340\234Q>\205\227\200\275\305r+\276\255Q\017\276\355\3262\275Na%\275\232w<\276\256\201\r\276\034_\033\276i\320\006<\025\220v\275\260\221\204=\006d\257\275\367\257\234\276 \322O\276BC\177\276\352$\033\275\301\213^\276Mgg>\243#\371\275\231d\004\276\273\3253\276\374\305,\275M\326h>\300+];s.e>w\276\337\275\371I\365=L\215\220\275z\215\335=\374\343\035\276\333l\214\275,H\363=Z\275\003=%;\366\275\352<\317:\270\254\002\275Z\rI\276\303\232J\274\024\350\323\275\177\023\n\276\261mq\276H\261\222\273Z\365\371=\24492=\342s\247\274\257_\020>\322o\337=\035\346K\276\320\355\325\276\230LU>\232\224\002>\340-\320=M-;\276\240\340\002\276\254V\346\275\0358\247>\247?;\276_\264G\274\2074\312\275i\214\026\276\314\321C>Nb\320=g\325\207=\231\326\206=\363M\344\273\255Q\217\274nL\317\275\034|\001\276\204*5\276OZ\230\275~Rm>\274tS>#-\245\276\341C\211\274\006Gi\276\363\253\211\276\240\250\354<\356\010\347=\347\215\263\275\302\206\007>\026\366T>*\306y>\341z\264=L\375<>\324~+\275c\234?>\225\232\375\275qU\031>%!\021\273\263$\300<\337\301\217\275\347o\302<\254\305\'>\200H?\274.\004\031\276\255\300\240>\236\014\016>\020\311\020=\211U\315;\302\022O>\032\213\246>\350\336\303\276\265\324\013<2\003\325\276\235\331n\2755^Z>\317\371\311=AH\206\276A\253\202\273|\262$:\272Nc\276G8\r>\274t3>\2242\251=\274\\\204>\rpA\275\377\t\316>\322\001I=\351\232\271\276pC\314=h\256\223>|\'\006>\313\016q\275\3274\017>it??\360mZ>k+\026>\377\007\230\275\2237\300\274\030\354\006\276\242|\301\274\r\213\221\275%\222(\276\357 \206>BC\277>\337\340+>N\013\036>\030!\374=m\002\214=q\350-\275t\264\252\275F\224\026\276\201\004e>]\247Q==IZ>m9\247\276|~x\276\232\353\364=\243\254_<\263A\346\275\257\265\267\275\355\330H\276\224\274\212\276\340H\200\275\r\032z>\225\0166>\324H\213>+\023~\275\356\353@\276[B\276<\026\300\224\274\274,\334;\271\031\016\276vT5>\025W5>\022\245%@\322\035\264\276_F1\276\204\236\335>\302L\333\275T\251\031>\235\235L\276\'\203C\276\345\362\227?\256\365%\276t\007q\276\270\037p;N(D\276\217o\257\275!\217 =j\026\210\275\220f,\275-\317C\276GY?<\205%\276\276\326\034`>:\271\225:\377!\335>\216u\021\276\261\334\302>\320\362\234>D5\245<L\216;\276\373\231\325\273\263\370\003\274\335\014\367\275\\V\341<\223\306\230>~tj\276\312Oj\276%;\026>\263C\234\275\334\327\001\276\351f\332\273\222?X\275~\000\022>\256\330\037>t^c=\242]%\276\2613\305=U\275\234\275d\256L\275\356\010\'\2746#C\275\377\312*\276F%u\276RM\244;\272kI\275\240\207Z<Q\245\326>\017\356\316\275!\224w<S$\237\275k\361\t\276F\266\363=\2279\335=&\252W>J\231T\275k\267=>o\3306>\331\")=\020\257k\274\343\030\251\275\237V\021\275\227\000\234\275\277\3229\275\365\330\266=\220f\254>4Kb\276\\r\334\273\377\225u>y\006m\276\247\313b\277\354\371\272=\214\237F\274:\317X<D\027\204\276\\w\363\274\257?\211<\006L`<.\305\245>\375\372!=\273\177,=\277\270\264\275i:\233>\263\264\263=\017b\'>\200H\317\276\321\2263\275\346\261&\275xbV>\273\'G\277Gr\231>i\000o>\335{\030>\224\336\307\276\265pY\275@\335\200=Sz\206=\277e\016\276B\350\300=Z\330\323=\3274\217\276]\376\223>\021\252\244\276\311w\251<P\213\201=\325&n\276\211\322\336\276X\252\213\2747\246\247\276.\306@\275\270\347\231\275\235c@\276\335\tv\274\242^\360<\030\225\264\276\331\\5\275\312O\n\276\030x\356\275=\233\325\275r\212\016>\201r\200;\001\207\300>\021\251\211=\340\204\302\276\202\342\217\277,\357j\275YL,\276al!=&S\205>\241\202\303\274\355\3607>`\310\n>\232\010[>\263\225W=A+\200\276?\221\347\275\031\255c>\002d\210=\311\223\344\275\375\276\177=v7\217\276\374\214K>T\251\271\276q\337\'\267L\3030\276vT\225>\347\000!\276od^=\237\345y=Y\206\310\276\204\236\215>x\320l=aO\313>\014\255\316<+\244|>\331_\266\275\013\230 >b\241V\276{Ic\276\027\233V=K\037:\274\016\202N=t\230\017\276Di/\275\025\312\002\275\013{Z\276\236\352P\276\'Nn\2767\216\230=@\243\264=\373\221\342\2753\247\253\276\262\325e\274.\255\226\276e\376\261\2759E\007\276]P\337\276\231\rR>\326\006\002<yX\370>\260\216\203=[\010\022>\342\314\337\276\336\345\002>\263A\006\276\312\246|>\217\307\214\276i\306\">\207\304\335>\336\347\270=\364\211|>\301\035\210=S\320M\276\034|\341=\034B\025=\224\3011>\306\247 \276\274\314\260\275\333P1\276\337O\275>Ll\316\2764\275\204\275\246\361\013\275&\250a\274\231\271\200=4\364/\276tA\375\275\312\372\r\275{fi\276\002Hm\276j\274t>i\251\214>\353\377\034>XV\332=C\310y\275\3333\313\274\305\003\n\276\251\2377>\331Z\277\276\233\376\354\274+0\344\275\205\316\253\275\364\030e\275\010X\213=\372\325\334\275\031\004\026>\217\306\301=\246*\255\2757\030\212=\314\177\250\276\221\231\013=A}+\276\312\032\205\276\212\253j\276}$\245<t\357\341\274\216;%>A\324=\276\235F\032=\264v\023?\335\315S>\324\016\217>x\271(>r\301\231\274\236\007\367=\234\243\216=\r\301q=\322\030m\276\231\273v>\027\267\261\276\341\321F=\244ng\275c\321\324>=\'\335\276\007\360\366>?\001T\275\377\262\213\276y\222\204\276\360\205)>\221~;\276\216\351\211\275=a\331>E\202)<q\311\021>\304\316\204>\353V/>\354\206\r\276\216\346\210\275\226\352\202<\222\226\232\276\345\1772=\271\2130\275\370S\263>\220\210I\276\354/\333\276\267\013-><\203f>;6\222\276\316\210\322\275\017\325\224\274\210\235\351=\013F\005>\353\220;\276\247y\007><1+>\333\242\234>\213\032\014\276\017(\213\276\254Vf>X\312\362=i\307\215=}\314\247\275\020x\240=<\2756@\372\360\254\275\311Xm=\373\226Y>\247?\373=2\217\234\276j3\316\274\377i4;\203/\204?\261\304C\2769\323\004\275\345\362\337=\2279\035>\246\0162=K\223\322=\037J\264\274\205[~\275\n\271\322\274)\005\235\2758\020\022>\324`\332\275\231\314\302;(I\207>\226B\300=\324\267,\276\233\216\200\274\0223\373\274\021\036->\211\014k>JBb\275I-T\275*t\256\276~q\211=\325%c=\342\002\320<\032n`>\023,\236>:\222\013\276\321\005\025\276\255\300\320=\207\334L\276c^\307<\365J9>\021\036\r\276M\020\365=6\223O>\311q\207\276^\202S\275\357rQ\276\003y6\275\354\022\225=\370k\362\275\216#\226\276\212\216\204\275\214-\204>\352\225\202\276\253\"\\<x\013\344=\205(\237=Xu\326\274\030}e>\214\370\236>\331\314\301=@\336\023?[\323\274\274\314\356\331>K\310\007=@\336\353=\264=\232\275\374\376\255\275\220\275\376>\217\252\006>\260\313\220=\0015\365\275\271S\272\274\355\231\345\275w\333E\276\336\311\207=[\231\030\277\314\356\211>M\0205>\031V1\276\026\207s\276S\256\220\276\223\343\016\276\022\275\274>\360Rj<K\312]\275\251\245\271\275\336\223\307=\310^\017>\014\223\251\276T\347\254;\013A\316\275P\377\231\275\317\203\233>\321\"\223\277\013\320\226=\n,\200\275\227s\271\276\372\355\353\274\2138\235:s\205\367\275\232D}=%\354[=\211\324\264;\000\343\271=\320\017#\276\267(3>\305\254w\276a\303s\276\037\331\\=\321W0\2764\2424<O\222\236\276\010\314\303=\3126p\275\303J\205\2749b\235\276\"\032\035>\177\242r\2750\022Z>\026j\315\275\007a.\275\254\221\275\275\353s\345>\3410\207\273\276\206 =\347ob\276=\362\207\274\375\334\320\273\251\244\336\277\241\363z>\332\376u>\236\232\313\274\225`\021>\262cc=\332rn\276L\030M=&:\253\275\177i\021\275\275\306N\276o\236*\276p\261B>\304_3\276O;\034\276\364\\\225\273H\212\010>?\251\366\274Y\337\300\275W\'\247\275\226\347a\276Gu\272<\347o\202=r\026\206\276\272\244\312\275\360i\316<z8A\275\244\305\271\275\333m\227>>\350Y=\250s\005=d\222Q>H\303\251<\317kL\276\214\271\233\276{I\223>4\277z\276\334\272\333=\375\237\203>\250\214?\276\350\023\031>\037\205\353=\351\n6\274?\216&=\204d\001\276\340\2717\276\2338y\275\300\004\356\275\272\367\260>\262\235\357<\000\306S>h\257>=p\010\305\276#M<\275V\232T=rn\223=\324\267\314<\300\262R=\253\354\273\274,\202\337>\325u\250\275{\210\206=\304z\203\275u\345S\276vTU>\341\264\340=\3265\332<\316\302^\276\242b\334\275\315\217\277\274\270u\367\275\313\3331\276\344\272)\275=~O\276;U\276\274}\005I\276\345\263\234\276\025\252\233\274O#-\276/\027\021>\263{\022>$\356\361\275s\202\266=K\310\207<\025R\036>\235\253\034<b\332w\275\323\231\305\273\256G!\276\003`<\276C\347\025\276\376\267R>\341\264`>\312\304\255<\364\375T>\321\350n>*:\202>\016g^\276\325\317;\276<\275r>=`^=9\234\331>J\267e\275\314E\254>\303\357\206=\320\266\272\275:t:=\231e\017=J$Q\2766\223o>\2451:>w\326\216\276\341\264\000>\224\3367=\\8\020\276(\270\330>e\001S=\221~\033\276\222=\242=\037\364\354=\214\370n>\004q\236<\032Q:\276\242]E>k+6\275\314\321\303=\267(\203>\2338\371=\017E\021?\235\272R>\313\276\013\276\3441\003>\371\022\252\274\374\306\307\276\323M\002\276z\344O>:\2236=\036\305\271<\345b\014\275.V\244>\253&\310>\316\031\321=\272\024W\276\337\032x\276?\252\201=\273a\033\276M\204\r>\361\275\237=\027\331N= \267\277\275\355\236\314\276=|\231<w\365*=si\274\275\351\263(:\332W\236\275\252`\264\275.u\020\275\245,\003>\332\002\302<.9\016\276~\030\341=\200\237Q\276\320\325\246\276W\207\355;vO>\276\2720\222=\016I\322;\177\373z\276\212\037O@R\325\204=Sy\373=\222\263\220>I\327\314=\314z\241\276\253b\005\2737l\033\276\312\211V?\332\033\274\276\260\217\016\276\010\003\317>\255\334\253=\271p`>~\340\312=\273\233\227\276\310%\216:\020X\351\276S\"\231\276r\341@>\274\\\224\276\342\314/\276\302\245\203=uYl\276\230\370\303=r\305E\274x&t=u\311\230==\n\227=\032\371<\275\013\n\003=\rlU\276c\356Z>\316\307\265=\230\336\376\274\035\217y>\303\201\200\276\246\362\306\2762\217<\276kE\233<_A:>Tt\224\276\023+\303\2756Yc\275Wv\301<\315\351\242>\027\324\367\275Q\332[\276 \262\010\275e\302\357\275.\034\230>\377>\343=\355dp\276T7\267=}\\\213>\250V\337\274\364\303\230>io\260=\3228T=2w\355>\321h<;\"7\003>Sy\353>W!\035?\324}\000\276a\216^>\234\334/\276\007B\322>F\353\210\276\206 G>\215]\262>\2663\247\273\300>\372=\331|\334\276i\251<\276\010!\200=\234P\210\276>\351D\275\354\300\311\276\364\246b>:;9>!Y \276\275\030\252\276h\263\352<iR*>y\036|>-&\366=}\262\202=\365\204\205\276Yi2\276x&\224\275\237\310\323\275=Dc>t\354\240\275\257\321\262\275\356\007|=\207\247\267\277I\326a<\257w?\276\227\342\n\276\\\254\210>T\341\257=\233U\337\275\016\241*>\214\363\207\276\024\350\243>p\261\302\275P\302l>\371\241R\273\367\314\222\276\277\200\336<\375M\210>\212?\312\275\334\326\266=\356A\210\274\336<\025><\210\035\276\226\004\210>\361\364\n\276\211\014\213\275\016\204\004\276\215\227\236> )\002>\340g\214\276\206\350\220=*\221d>9\177\323=\302\336\244\275\210\364\213\2762(\211;\345)+=c\177\361\277{N:>T5\201>x\3217\276\310\322\207>}\263M\276)\350\026\276RI=>2u\227\2752\003\265\276zlK<\304x\215\275\021\305$=\350\366\322=\3603\016\276\032\213\346\275\247\263\303\276\255i~\276\222t\315\275\016\022\302=\201@\'=\270\254B<K\217\306=\031\220=\276\322\035$\276Vd\364\274%@M>\256\022\274\276\253!q>\232\353\364=\260u\251=\347\034<\275\301\033\322<\244\342\177\275g&X\275\226\261\241<\221\325\r\276k\016\240>^c\267=1%r\276p\322t=$\234\026>\262hZ\276Yn\351\2759\356\024\276\320\361\021=\207\277F\276\322S$\275!\310\221>\354\243s>\033\r\030?\211\227\'<o\233\251\275\336T\204=\224\325\2618\263\352\363<U\240\026\275\361\204\236\2752\346\016>\226\347\261>\352!Z>\002\267\356\275\306\026\222>\341\013\203\276\355\201\326>\232@\221<1\323V\276.\307\313\275\000\256\264>\225\324I>\252C.>\261\211\314\274o\201d\276D\027T\274\t\247%>r\300n\275\256\236\323=\010U*\276\322:\272\276\321\037\032=\217\3025>\034\353\202\275\203\372\026\276`\0027\276\266\024P=/n#>\216\2227\276P\307\203>\263AF\276\360k$\275\246\nF\275\365\363\006\276\'\332U>\326\213\341=U0*>NM];S^+=\020]\340\276\014v#\276\337OM=\335\037\224\273n\027\332=\355\231\345\275\n\2357>[\006\\=\352\262\230\276\246\'\274\276]m%\276\257|\326\276Sy\333>cn\255\273\010 \365\275\313\370w\276\'\331*\275\371f\333= \230\243=$\013\330\275\371I\025>*t\336\275\001P\305=\352!\272>\024\" >^\234\230\275S\320M>*R\221>g~\325>s\016\236<0\273\'>I\272\266>\330\330\005?\273a;>\004VN\275\2507#\275\373\005;\276\263A\206\276\227\375\272\273\017\264b\276\324`\312>\371\203\001>rm\330>Z\365Y>0g6=g\323\221=\003x\013=e\252@\276\030\227\252<\177\244H>\235/v\274y]?>\327L\376=\036\304\016\277\361\035\353\2734\021V\2764i\323\274\310\224\017=\277C\021\275\324eq\276q\254\253\275*\035\374>\214\3668\275\017\231\222=\341(\231\2769E\327\276\346t\231\276\303\365\210=S\315\254\274\215{s\275\200\0163>\037\235:>W[9@\232\230.=/Q}\2750\360|>\204\330\031\276\335\354\017=\001\335\267\275y\036\034\275\332\033\204?\3024\234\276\337O\r\275\246\201\237\274\010\217\026\276\307F\000\2764\277\332\275\002\372X\273\\\345\211\275\247\226\010\274\352\0044\276\242\264\227>\301\252\372<\033Q\220\273\361\021\361>\2073\217\276\t\032\263\274sK\213>\036S\367\274\274\226P\276a\245B=\256\357C<a\032\326>\360\247\226\2765A\324=\257x*\275\007\n<=\233r%>\301\305\n=E\201>\276#g\221>\206ZS>\234\034\031< $\353\276\365.\336<\362\352|\276\222\005L\276\341\247}:\201\004\245=\241\241\217\276\010\003\017>{f\211\276\377\354\007>l\262F>\\ !\276H\371\231\276X\305\253>\361)\000>\323-{=v28>p\224\214>\360\302\266=]\256\331;\307\327\256>&p\253\275\344f\030?\261P\353=\275\306\016>\244\030\240=\262.\016>V+s>H7\302=\034\360y>\357\376\370\274y\316\226=\017\013\205\276\324e\261\276T\250n=\252Cn\276\010U\232\276\t\304\233\276\275\377\217\274\342XW\276\277),\275}\315\222\275\307\204\230<\3544\022=[\353K>_\265R>\251\371\212==\'\275\274 \230\303\275(\362$\276\023fZ\276(,\241>s\242\335<\335^\202\276\232_\335>\315\314\314\277O\257\024\276p\225g\275]o\233\274\004V\256>\3706\215>f\024K\276a\350\307;\322\000>\276\371\235\306\275\230\3729\276Ral\2763P\031>\025\251\200\276\307\361\303=\225\016\366>m\376\277\275C\312/\276\274y\352\275)\263\221>\241.R\275K\344\302=\022\240F\276\205\353\221>\002Hm>\010\374\206;\211b\222=\023\001\030;U\244\202\276i\306\002\276\004\342\225>\205>X\275HQ\'\275\322\373F<\'\203C>\220\240\270\277 \267\037=\322\373F>ap\215=b\354\316\272O\225\357<:\036\023>b\241\326=\265\340E\276N\2300\275\247\"\025>\326r\307\275_\360i=\310$#\276[\231p\276\\\311\316\275\257w\277\276;\337\317=&\253\302\275\034|\201\276\302\243-\276)\\\217>\344\332\020\276\200\016\363=\2510\366\275\351*\035\275\365JY>h\263\n\276\352Z;=_\322\230\276\003\317\275<\321?!>\204\365\357>@\276D=\240\032\017>o\327\313<\231\2736\276\377\226\200\275$\356\301>+\207\326\275u\260\036\276H\303)=\021\344`\276\r\340\355\275\213\207w\274~t*\276\302i\001\276nQ\306\276-&\266>\306\341\214>\240\303\314>a\246m\276P\374\330\275\370\0317\276\202\034\224\276f\240\202>\036\334\215\276\246+X\274\27550\276=~\217=Z\236\'\276\374\343}\276\023\362\301=1{Y\275m\305\256>\203m\204=\335(\222\275\230N\313\275\275\343T=\335^\322\275[|\232>\306\371{>\3328b\276\236)\224\276\021\307\252\276\321\005\365=\274\314\260\274!Y\000\276\3171\200\276\020z\026\276\361\0211>\203\3350>@\023\221\276 c.>\301\220u>\273\311\271\273\230\243g\276\217\304\313=\342u}\276q=j\276S\3136\276\235\200&\275(\325>\276CV\207>e\337\225>\305\022 \2747\211\241>9\234\371\275\302\243->#\276\323=I\327\014\276k\267\275=&S\225\276=I\332>\346\313\213>\025\253F\275\240\3377\275\265Og\276\256\360N\276\2613%?\237q!>\341(\371\274 Aq\276g\326\322<.\027\226;\204\330)?:\004\256=\007\3169>c\232)=a\340\371>~\000\322\275j\244E>(~\234\276\365g\177>\036\247\350\275\335\230\216>\352!\272>\370\302$>E\r>?\211\014\213\275\245\371\343\274\023\n1\276\215E\323\275\324H\313\276A\327\276<32H<W>+>;\307\360>S?\017\276p%\373=\022\274!=\227\312\213>#2\254\274\306\301%\275 )\322>V\270e\274\376e\367>VG\216\275\331\316\027>\251M<>\344\024M\277\370\302\344\275\016g\376=\322o\177\276F\316B\276\272,&\276g\200\213\274\240p\226\275u\223\250>=~/\276ms\243>\010Z\201=\n\242\216\276\002\274\205>\307L\242=X\305[\276\007\360\326\2756\253\036>\301V\t\275\007\360\036@rP\002\277\365-\263=\371f[>\204\323b>\2652\201\276&\305\307\275&SE\276$(\256?wg\355\275\323\244\324\275\217\215`>\325\262\365=\373\221\342\275\350\207\021>\240l*\276\267b_>L\350\211;tb\217\275\272\367p\276\254\305\207\276\316\373\377<\311\260*>\001\335\267\275wgM>\032\335\241>\300\354\016\277\364\032\233=\277}\215>\304w\002>\3436:\276\366E\002\276K:\312<V,\236\275\251\336\372\276\207\277\246<%U\200;\376\324\370=\261\300\267=\245\275\241\275\226\313\246= \356\312\275\330\322c\275\315\344\333=\033Q\220\273\255L\370>\323\366\357=\214\365\215\274d;\337=\225\016\266\276u=Q=O\351 >\257\3537>\315\036\230\276W\317\t=\277I\323\274\331>d\274\037\205k\276\347\027%\275\355*d>\247\347]\274\375L=<B>\310>U\331\207>\014\310\236\276G\217\317>\216\0060\275\325{\252<\004!\251\276rmH>\331y\033\275Yi\322=F\002\262\272\230\335\343\276\262\202\237=\'N\256=\351\267O\276F|G\276\2242i=\345\362\007?\021\345\013=\346\350\021\277`\037=\276\022J\277=\325\225\217>\001\030o\276\237\002\340=7\030j\274\272I\214\276\033\021\014=\\\257\311\275D\335\007>\356\010G>r\334\t>r\337\312\275\307*%=\005\250)\277\320\325\266>3\376\035>\213q>>8I\263=\033\361\244=\231\236\200\276\342Xw>F\2246>E\200\023=\340\272\342\274K\260X>!\007\225\276\374\273\010\274\254\305\347=5\014\237>\036\376\332\275y\036\214\276\231\365\"\275BZ#=\007(\r=\362$)\276\201\004%>\257$y=\244p\235>\003[e\276\325\262\025>B>\210\276\272\240\376>\255Q\017\276\352\262x\276?\252!=\267\013\255\275P\374x\276\260\313\220=\245\275\201\277\301\213^\276\273\320\274\2769\271\177\276\315\3512>_\354=\274\266i\214=g)\271\275\335\007`>\347\035\207\276>\313\363=EG\022>G\217?\276H\371\t\276\345~\007\276\214\363\207\276/\372j>\2407\225\274\365\314\334;\362\260\320\275\254\342\315=B\317\346\275\013$\010\276\227V#>/\243\030>f\276\303\275\3642\212>k(5<\331\263g=\2611\257<i\000O>\r\277\3769\002\232\010?/\372j\276T\343\225>b\3631>o*\202>\332\311\340\275\014\351p=\362wo<\257_0\275\227\312\333=\273\230\346\274\327iD\276\205\353\321=\317\331\202\275\332\256P<\250:\004\276\300]v<X\377\207>X\252\213\274W\261x\275\345d\302\275\340\234\221<\017b\007>\326V,>\026\336E\276\315X4\276\344\242\232=t\357A>\371\024\000>:\222K\276\233\003$\276j\373W\276\006L\360>\241H7=3k\311=\036\251><N(d>\254\2151\274\256\365E\275\356Z\362\276\352x\274\276\235.\013\276\013{\032\276B!\202>Ef\216=I\205\021>(\270\210\276\356\353\000\276\005Q\367=\023\270\205\276,D\007=\353\344\014\275F\010\017\276\342\257\t>\244\031+\276\330\236\031>\244\210\014\276\262\324\272=\211\352\215\276\220\244\244<F\323\211>\356=\334>\t\215\300=\207\030\257\275\251\373\200\276V}\356\275\036\300\"\275\255&\231;\030\262\n?GZ*\276\"\340\260>\344\272\311=R\325\364>Y\300\304\276\035\311\245\276\374\306\027\276\263\322\364\276\211\014+>3\033\204\275>\\\362=\240\211\260\276\312n\306=\rl\245>\336T\324>\026MG>\201\354U\276\271S\372\275\342\311n\275Y\213O\276\007\360\226>\r\3011=\001\030\317=p%\213>\374o\005\277O!\227\275\230\2107=\024\350\323>V\323\265=p_\037?\274A\224\275\216\225\270=\224\373\035>U\300\275<\037h\005\276\'\372|=E\022\255>\322\216\273\275zpW>C9Q=\264qD>\244\344\325=c\356Z>z\252\263\276_\265r\276EH\035=To\315\275\004\377;>\030B\316<m\342\004\276\t\033\276>\302iA><\013\214\273u\002\332\275\257%\204\276\346\3146\2756v\251=\344K\310=\373:\200>\303\360\021>\252\3612?r\0266>\264\310v>\356C\336;\274\256\317>\221*\n\275\214g\360\276\276\253T\273\360\247\376?F\323Q\277\332<N\275\221D\017\276\324\361\230<k\232\027?}]\206\274D\250\202>H\277\275?y\314\020\277\277\267\211>t\014\310\2767\032\200?\177\373:>\373?\'\276\362\010\216=\235\327\030\276\243\222\232\276Y\335\022?\335\007\300\275nL\317=\367\3518>\203n\317\276\267\177%>\242b\254\276\331\261\001?\355\270a\274\003x+>\320a>\276bgj\276\004\347\234>\177\207\342\275\307K\207>:X\007\277<\245\033\277\002\237\027\277\314@\345>\332\346\346\276@\030\250>y\2255=\022\024\257\2760\201\213\276\203n\357\276z\252\013?\262\235o=\264\3106>O@\023\276\\8p>%;~?\003\351\242\275F\231\215=\312\032\365>\330\273\337\276\264\253p>\320D0\2773\033d>\000\312\337\274\373\221\302>\241/==W&|\2760\360\034>|D\354\276^\242\022\277\331|\\>@\244\237\276\2613\245>\\q\261=\227V\203\276\233\220\226\275s\302>:\225\361\357\2757O\205>\224\336\207\276\261\026_\276NE\232>\002\237_\276\340\020*\274\357U#\277\323jX?~\030A\276\346y\200\276\214\363\347>\306m\024>p\224\274<\317\203\373=+\030-\277\260\311Z\276\270#<\276\316S\035\276\214\330\207\2759(\201>\254\375]\275\371N\254\276\201[\267>|\'\326\276U\245\255\275j\336\311\277\274\2211?RaL>\304B%\277\036\026j\276\361)\260\276\321\226S>)\222\257\274[|\212\276\303\357f=N(\344\2764\364\317>\024\350\223>\032\206\017>n\027\272=l[D?~\251\177>N\264K\276\t8\004>\247\221\266>\215\177\337>E/c>\200\016\223>\177\336\304>Gw\200\276\356\010G\276\004V&\277\376,\266=\310{\305\276\253\225i>F~\235\275_\264\307=\243\257\030\277]\304\247\276\210\205\272>\r\216\222>P\377\031\2758-\030>\326\343>\275\316p\003\275\353\220\333\275a\032\366>\033/\035>9b-\276\261\371\370\276O\036\206\276\341\3564\277}y1?\300\354~>\341E_\276u<\226>E\022\375>\314\2277\276k\237\356\276\202\220L>C\312\007?\277e\256>\rl\325=\301n\000\277\265\3753?k\016\320>\"\340(?kH|>N\271b\276\271\031\376\276l\t\231>\3647\021\277\366\227=>\214g0>\310\265\261\2768\241\200>j\331\032\276v7\257>K<@>_\357\256>\331y\273\275W\314\010=\246{\275=\003}\222>x\356=>\306\242\371\276\217\337{\276\005\3724?\221\017\002\277n4\240=4.\274\276\313\326\032\276\316\307u\276\336<\245\276\234m\356=\023~i?\020\256\300\275S?/\276\221\017\212?9\227\342>\210\332v=,eY\276\371N\354\276S\320M>\336T\\\277\301\312\341>\316p\003\276\240\032\017?>[\247=e\302?\277\010rX\277\tQ\276\275\362\226k=\232\316\236>\020\314\241\276\335^\002\277\330\236)?\013^T>\337\245\324<2U\320\276\240\340\242\276N\342\275\272U\023\264\276\027\331\356>W\004\017\277u\002\352\276\235F\032\275\312\340\010>f\244^\274\037\364,=\242z\033\277G\001\242\274.V\024=ni\305\276\n.\326=\232\2319>\243WC\275\017\2719\277Q1\006\277\2512\014=\345\270[\277Yi\032\277\214\276\">\345\232\242=+\030\225\276AH&?\234\370j\275\203\206\336\276z\344\277\276\303\r8\276\262\235/?\310\224\217\274\267\177E>\352\354D><\210\275\2763\212\265>3\025\202=3\304Q>\'\332\205\276\241g\023\276|,}\276n\213\"\277\221\233\341>\3578\245>J\357;\276^\272\271\276\201>\241\276\264\216J\276 \265\331\276\211(\206=2w\235\277\302Q\032\277\303\266e\276/Q\275\274Ii\266<\267\227t>\374oE>\014[3<|a\362=$\271\004?xz=\277\360\026\210\2760\360\334>\317\367\303>]\212\313\275nn\234>\357\033\217\276\334\200\017>\235\233v=\367;\264>/\372\372>\375\332:=\206t\230\275\325&\276\276X \232\275\333\302\223\275\300&\213>\304\261\016>\031\220\355>,\r\234=\346WS\276\220\210\351\275\267]\350\275\342\036\003\2776\223\017\276\340-\320\275]\371\014>^\235\003>\332\217\324\275\241\370M@[_$?\366]\021>Z\022\010?\016J8\276z6+\276\361\327\264\276u\223\330\275\341b\035?\251\207(\277\r\032\212\276\013m\357\273vO\236\276\261\371x=^g\203=\014[\263=/\300^\276\026\030\262\276\361b!=M\363\216\275\2505\315\275\260\003\347\275\325\262u\276\201Y\201=\276\026t\275\266\275\235\275=@\234:\376}\366\276\334\326V\275\201\225\203\276d\220;=\255/\242\276UM\240>#N\307=C9q>\335^\302>\344\242Z\275y\223\237\275`\002\247\276\016g\336>~\001}\275n\300\'\276\364\370\315\276\305\376\222\276\n\332d<\200\361\314=\216\314c\276-\225\027\276:\257Q\276D\250R\276@0\227>\027\267\221>\035;(\27582\317\275\347R\374>\205\010\350\276T\251\021?\321\221\254>\"P}=\244\374\004>\267\233\240=m\305\376=%\314$??\306$?`\037\035>\204\273\033?\"O*\277\352\354d>\306\277\317=\232\320\204=\361Ff>\022N\013=\362$I>n\213r\276\022\240\326\276\200\364M\275\364\025\224\276\307K\267<\023\362\261\276\336\345\242\276\363\002\254>/\371\037\275w\333e\276(F\026=\357\032t<cb\023?\n\242N\276)\\\277>\217\307\254=rkR\275.s\252\2761%r\276\300\t\005?uvr\275T\214\243\276\030[(>C\034\203\277h\226\224\276I\205q\276\306m\204>\266\241\">\332\215>\275\"\253\213\276\265T~>\001\244v\276\243\212\007\274\343\210\245\276\342#B>\262K\244>\007\231\264\276\3474\313=)?i>\017(;>R\017\021>\202\213\205\276\361/\202<OX\342\275\357\033\337>\006/z\276_)\313\276\227\035b\275\255\335\366>\301\342P>\250W\372\276\004\377\333\275A\267\017?\344.B\273M\240\010=\324`\332=\226\230\207=\337l\203>\230L\215\277\303\323\353=BxT>\340J\266\276\246\325\320>S\254\340\271S\\\345\276#\332\016=Q\367a>\336\345b\276\353\035\356<\276\023\223\276\002\324T>L\303p\276\304Z\024\277s+\204\275\231\273\206\276\253\317\225>@j\243>\307h\315\276\274\005\322=\017\271\271\276\367u`\274\235\021\325\276\0358\347\276\217S\304\2769EG\275F\3239\276\373\005\253>\0216|>\334\200\277>\275:\207>\207\242`>\245\203U>\025\343\334\276t)\216\276\334\021\316=\366\264\223>\264Y\225=\231\201*\2772\254\"\276\016\024\270=^.\322\276\276k\020=7l\273\276\322\030\r\276\243\006\323\275\3171`>\256G\t?g~\245>\300x\026?\020\314\221>2UP\276\001LY=\371\240g\276*\031@=\250R\243>\"\033\310\275\367X\232\276\361K\375\275\225\016V>V}\216\276\253x\323>\351\275\014\274\352!\332>xa\253\275\346\347\206<u\223\330=@i\310=\177\302\231\275\257_\340>\016\363\345=\200\377\034\274\301\345\221\275`Y\211=@0\247\275\327m\320\274\355\323Q\276*\220Y<\007\2258=\335\007\300\275\333\026e>\365\363\346\275\366\356o>@MM\276c\321\224>$\227\257\276)\264,\274\230/o\276Q\276\200\275f\204\227\2752\036%\273\353\250\n>\344.\002\275\2279\335>\251\336\032\276\221\310\010\274\335\265\244\276\026\2073>\251.\200=\013F\025\277\350\207\021>N\177\366\275a\340Y>*R\341\275\323\336\200>JA\347\276B`\325\276\257Z\211\276\265O\207>M\241\243\276\256\273Y>Nz\037\276,\202\377=\021\307\272>\274\256\277\275]\376\243>\'\367\253>#\276\203\276K\352\264>\277`\367>\201\t<>?\035?\277HP\274>\365\363\206=\236\230\r?\327\243\010?\306\371\253>\007\323\213;f\275\030>\271m_\275r\376\346=S\313\026\276]\026\203\276\'\302\226\276\312\303b\276\351\013\201\275J\227\376<\306\243\224\275\253\004K>Y\300\364>\332\311\010?\016\363E\276\321<\200\273a\211\'>\247=\305=\036\341\364\275\022\210W>.\311\001\2755A\264>)\226C\277W\363\322;Ou\000?;\031\034>(\n4>\270\257C>d]\334\275a
      }
    }
  }
}
node {
  name: "Variable"
  op: "VariableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 66
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 66
        }
        dim {
          size: 300
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Variable/Assign"
  op: "Assign"
  input: "Variable"
  input: "Variable/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 66
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Variable/read"
  op: "Identity"
  input: "Variable"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 66
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "embedding_lookup_1/axis"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "embedding_lookup_1"
  op: "GatherV2"
  input: "Variable/read"
  input: "string_to_index_Lookup"
  input: "embedding_lookup_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "embedding_lookup_1/Identity"
  op: "Identity"
  input: "embedding_lookup_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "embedding_lookup_1/Identity"
  input: "Reshape_2"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
}
node {
  name: "dropout_1/dropout/rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "dropout_1/dropout/Shape"
  op: "Shape"
  input: "concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dropout_1/dropout/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout_1/dropout/sub"
  op: "Sub"
  input: "dropout_1/dropout/sub/x"
  input: "dropout_1/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dropout_1/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dropout_1/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout_1/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dropout_1/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dropout_1/dropout/random_uniform/sub"
  op: "Sub"
  input: "dropout_1/dropout/random_uniform/max"
  input: "dropout_1/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dropout_1/dropout/random_uniform/mul"
  op: "Mul"
  input: "dropout_1/dropout/random_uniform/RandomUniform"
  input: "dropout_1/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
}
node {
  name: "dropout_1/dropout/random_uniform"
  op: "Add"
  input: "dropout_1/dropout/random_uniform/mul"
  input: "dropout_1/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
}
node {
  name: "dropout_1/dropout/add"
  op: "Add"
  input: "dropout_1/dropout/sub"
  input: "dropout_1/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
}
node {
  name: "dropout_1/dropout/Floor"
  op: "Floor"
  input: "dropout_1/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
}
node {
  name: "dropout_1/dropout/truediv"
  op: "RealDiv"
  input: "concat"
  input: "dropout_1/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
}
node {
  name: "dropout_1/dropout/mul"
  op: "Mul"
  input: "dropout_1/dropout/truediv"
  input: "dropout_1/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
}
node {
  name: "transpose/perm"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transpose"
  op: "Transpose"
  input: "dropout_1/dropout/mul"
  input: "transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\302\001\000\000\220\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_fused_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.08401680737733841
      }
    }
  }
}
node {
  name: "lstm_fused_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.08401680737733841
      }
    }
  }
}
node {
  name: "lstm_fused_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "lstm_fused_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 450
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_fused_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "lstm_fused_cell/kernel/Initializer/random_uniform/max"
  input: "lstm_fused_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "lstm_fused_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "lstm_fused_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 450
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "lstm_fused_cell/kernel/Initializer/random_uniform/mul"
  input: "lstm_fused_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 450
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 450
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 450
        }
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_fused_cell/kernel/Assign"
  op: "Assign"
  input: "lstm_fused_cell/kernel"
  input: "lstm_fused_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 450
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_fused_cell/kernel/read"
  op: "Identity"
  input: "lstm_fused_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 450
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 400
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_fused_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_fused_cell/bias/Assign"
  op: "Assign"
  input: "lstm_fused_cell/bias"
  input: "lstm_fused_cell/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_fused_cell/bias/read"
  op: "Identity"
  input: "lstm_fused_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/Shape"
  op: "Shape"
  input: "transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_fused_cell/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_fused_cell/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "lstm_fused_cell/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_fused_cell/strided_slice"
  op: "StridedSlice"
  input: "lstm_fused_cell/Shape"
  input: "lstm_fused_cell/strided_slice/stack"
  input: "lstm_fused_cell/strided_slice/stack_1"
  input: "lstm_fused_cell/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_fused_cell/Shape_1"
  op: "Shape"
  input: "transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_fused_cell/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_fused_cell/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_fused_cell/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_fused_cell/strided_slice_1"
  op: "StridedSlice"
  input: "lstm_fused_cell/Shape_1"
  input: "lstm_fused_cell/strided_slice_1/stack"
  input: "lstm_fused_cell/strided_slice_1/stack_1"
  input: "lstm_fused_cell/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_fused_cell/stack/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "lstm_fused_cell/stack"
  op: "Pack"
  input: "lstm_fused_cell/strided_slice"
  input: "lstm_fused_cell/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_fused_cell/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_fused_cell/zeros"
  op: "Fill"
  input: "lstm_fused_cell/stack"
  input: "lstm_fused_cell/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_fused_cell/Shape_2"
  op: "Shape"
  input: "transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_fused_cell/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_fused_cell/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_fused_cell/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_fused_cell/strided_slice_2"
  op: "StridedSlice"
  input: "lstm_fused_cell/Shape_2"
  input: "lstm_fused_cell/strided_slice_2/stack"
  input: "lstm_fused_cell/strided_slice_2/stack_1"
  input: "lstm_fused_cell/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_fused_cell/zeros_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_fused_cell/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_fused_cell/Max"
  op: "Max"
  input: "IteratorGetNext:1"
  input: "lstm_fused_cell/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_fused_cell/ToInt64"
  op: "Cast"
  input: "lstm_fused_cell/Max"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/BlockLSTM"
  op: "BlockLSTM"
  input: "lstm_fused_cell/ToInt64"
  input: "transpose"
  input: "lstm_fused_cell/zeros"
  input: "lstm_fused_cell/zeros"
  input: "lstm_fused_cell/kernel/read"
  input: "lstm_fused_cell/zeros_1"
  input: "lstm_fused_cell/zeros_1"
  input: "lstm_fused_cell/zeros_1"
  input: "lstm_fused_cell/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "cell_clip"
    value {
      f: -1.0
    }
  }
  attr {
    key: "forget_bias"
    value {
      f: 1.0
    }
  }
  attr {
    key: "use_peephole"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_fused_cell/SequenceMask/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_fused_cell/SequenceMask/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_fused_cell/SequenceMask/Range"
  op: "Range"
  input: "lstm_fused_cell/SequenceMask/Const"
  input: "lstm_fused_cell/strided_slice_1"
  input: "lstm_fused_cell/SequenceMask/Const_1"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/SequenceMask/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "lstm_fused_cell/SequenceMask/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:1"
  input: "lstm_fused_cell/SequenceMask/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/SequenceMask/Cast"
  op: "Cast"
  input: "lstm_fused_cell/SequenceMask/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/SequenceMask/Less"
  op: "Less"
  input: "lstm_fused_cell/SequenceMask/Range"
  input: "lstm_fused_cell/SequenceMask/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/SequenceMask/Cast_1"
  op: "Cast"
  input: "lstm_fused_cell/SequenceMask/Less"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/transpose/perm"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_fused_cell/transpose"
  op: "Transpose"
  input: "lstm_fused_cell/SequenceMask/Cast_1"
  input: "lstm_fused_cell/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "lstm_fused_cell/ExpandDims"
  op: "ExpandDims"
  input: "lstm_fused_cell/transpose"
  input: "lstm_fused_cell/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/Tile/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_fused_cell/Tile"
  op: "Tile"
  input: "lstm_fused_cell/ExpandDims"
  input: "lstm_fused_cell/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/mul"
  op: "Mul"
  input: "lstm_fused_cell/BlockLSTM:6"
  input: "lstm_fused_cell/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_fused_cell/ExpandDims_1"
  op: "ExpandDims"
  input: "lstm_fused_cell/zeros"
  input: "lstm_fused_cell/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_fused_cell/concat"
  op: "ConcatV2"
  input: "lstm_fused_cell/ExpandDims_1"
  input: "lstm_fused_cell/BlockLSTM:1"
  input: "lstm_fused_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_fused_cell/ExpandDims_2"
  op: "ExpandDims"
  input: "lstm_fused_cell/zeros"
  input: "lstm_fused_cell/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_fused_cell/concat_1"
  op: "ConcatV2"
  input: "lstm_fused_cell/ExpandDims_2"
  input: "lstm_fused_cell/mul"
  input: "lstm_fused_cell/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_fused_cell/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_fused_cell/range"
  op: "Range"
  input: "lstm_fused_cell/range/start"
  input: "lstm_fused_cell/strided_slice"
  input: "lstm_fused_cell/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/stack_1"
  op: "Pack"
  input: "IteratorGetNext:1"
  input: "lstm_fused_cell/range"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_fused_cell/GatherNd"
  op: "GatherNd"
  input: "lstm_fused_cell/concat"
  input: "lstm_fused_cell/stack_1"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/range_1/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_fused_cell/range_1/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_fused_cell/range_1"
  op: "Range"
  input: "lstm_fused_cell/range_1/start"
  input: "lstm_fused_cell/strided_slice"
  input: "lstm_fused_cell/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/stack_2"
  op: "Pack"
  input: "IteratorGetNext:1"
  input: "lstm_fused_cell/range_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_fused_cell/GatherNd_1"
  op: "GatherNd"
  input: "lstm_fused_cell/concat_1"
  input: "lstm_fused_cell/stack_2"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "ReverseSequence"
  op: "ReverseSequence"
  input: "transpose"
  input: "IteratorGetNext:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 1
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\302\001\000\000\220\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.08401680737733841
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.08401680737733841
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "lstm_fused_cell_1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 450
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "lstm_fused_cell_1/kernel/Initializer/random_uniform/max"
  input: "lstm_fused_cell_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "lstm_fused_cell_1/kernel/Initializer/random_uniform/RandomUniform"
  input: "lstm_fused_cell_1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 450
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel/Initializer/random_uniform"
  op: "Add"
  input: "lstm_fused_cell_1/kernel/Initializer/random_uniform/mul"
  input: "lstm_fused_cell_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 450
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 450
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 450
        }
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel/Assign"
  op: "Assign"
  input: "lstm_fused_cell_1/kernel"
  input: "lstm_fused_cell_1/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 450
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel/read"
  op: "Identity"
  input: "lstm_fused_cell_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 450
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 400
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_fused_cell_1/bias/Assign"
  op: "Assign"
  input: "lstm_fused_cell_1/bias"
  input: "lstm_fused_cell_1/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_fused_cell_1/bias/read"
  op: "Identity"
  input: "lstm_fused_cell_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/Shape"
  op: "Shape"
  input: "ReverseSequence"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_fused_cell_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/strided_slice"
  op: "StridedSlice"
  input: "lstm_fused_cell_1/Shape"
  input: "lstm_fused_cell_1/strided_slice/stack"
  input: "lstm_fused_cell_1/strided_slice/stack_1"
  input: "lstm_fused_cell_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_fused_cell_1/Shape_1"
  op: "Shape"
  input: "ReverseSequence"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_fused_cell_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/strided_slice_1"
  op: "StridedSlice"
  input: "lstm_fused_cell_1/Shape_1"
  input: "lstm_fused_cell_1/strided_slice_1/stack"
  input: "lstm_fused_cell_1/strided_slice_1/stack_1"
  input: "lstm_fused_cell_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_fused_cell_1/stack/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/stack"
  op: "Pack"
  input: "lstm_fused_cell_1/strided_slice"
  input: "lstm_fused_cell_1/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_fused_cell_1/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/zeros"
  op: "Fill"
  input: "lstm_fused_cell_1/stack"
  input: "lstm_fused_cell_1/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_fused_cell_1/Shape_2"
  op: "Shape"
  input: "ReverseSequence"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_fused_cell_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/strided_slice_2"
  op: "StridedSlice"
  input: "lstm_fused_cell_1/Shape_2"
  input: "lstm_fused_cell_1/strided_slice_2/stack"
  input: "lstm_fused_cell_1/strided_slice_2/stack_1"
  input: "lstm_fused_cell_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_fused_cell_1/zeros_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/Max"
  op: "Max"
  input: "IteratorGetNext:1"
  input: "lstm_fused_cell_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_fused_cell_1/ToInt64"
  op: "Cast"
  input: "lstm_fused_cell_1/Max"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/BlockLSTM"
  op: "BlockLSTM"
  input: "lstm_fused_cell_1/ToInt64"
  input: "ReverseSequence"
  input: "lstm_fused_cell_1/zeros"
  input: "lstm_fused_cell_1/zeros"
  input: "lstm_fused_cell_1/kernel/read"
  input: "lstm_fused_cell_1/zeros_1"
  input: "lstm_fused_cell_1/zeros_1"
  input: "lstm_fused_cell_1/zeros_1"
  input: "lstm_fused_cell_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "cell_clip"
    value {
      f: -1.0
    }
  }
  attr {
    key: "forget_bias"
    value {
      f: 1.0
    }
  }
  attr {
    key: "use_peephole"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_fused_cell_1/SequenceMask/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/SequenceMask/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/SequenceMask/Range"
  op: "Range"
  input: "lstm_fused_cell_1/SequenceMask/Const"
  input: "lstm_fused_cell_1/strided_slice_1"
  input: "lstm_fused_cell_1/SequenceMask/Const_1"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/SequenceMask/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/SequenceMask/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:1"
  input: "lstm_fused_cell_1/SequenceMask/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/SequenceMask/Cast"
  op: "Cast"
  input: "lstm_fused_cell_1/SequenceMask/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/SequenceMask/Less"
  op: "Less"
  input: "lstm_fused_cell_1/SequenceMask/Range"
  input: "lstm_fused_cell_1/SequenceMask/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/SequenceMask/Cast_1"
  op: "Cast"
  input: "lstm_fused_cell_1/SequenceMask/Less"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/transpose/perm"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/transpose"
  op: "Transpose"
  input: "lstm_fused_cell_1/SequenceMask/Cast_1"
  input: "lstm_fused_cell_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/ExpandDims"
  op: "ExpandDims"
  input: "lstm_fused_cell_1/transpose"
  input: "lstm_fused_cell_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/Tile/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/Tile"
  op: "Tile"
  input: "lstm_fused_cell_1/ExpandDims"
  input: "lstm_fused_cell_1/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/mul"
  op: "Mul"
  input: "lstm_fused_cell_1/BlockLSTM:6"
  input: "lstm_fused_cell_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/ExpandDims_1"
  op: "ExpandDims"
  input: "lstm_fused_cell_1/zeros"
  input: "lstm_fused_cell_1/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/concat"
  op: "ConcatV2"
  input: "lstm_fused_cell_1/ExpandDims_1"
  input: "lstm_fused_cell_1/BlockLSTM:1"
  input: "lstm_fused_cell_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/ExpandDims_2"
  op: "ExpandDims"
  input: "lstm_fused_cell_1/zeros"
  input: "lstm_fused_cell_1/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/concat_1"
  op: "ConcatV2"
  input: "lstm_fused_cell_1/ExpandDims_2"
  input: "lstm_fused_cell_1/mul"
  input: "lstm_fused_cell_1/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/range"
  op: "Range"
  input: "lstm_fused_cell_1/range/start"
  input: "lstm_fused_cell_1/strided_slice"
  input: "lstm_fused_cell_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/stack_1"
  op: "Pack"
  input: "IteratorGetNext:1"
  input: "lstm_fused_cell_1/range"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_fused_cell_1/GatherNd"
  op: "GatherNd"
  input: "lstm_fused_cell_1/concat"
  input: "lstm_fused_cell_1/stack_1"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/range_1/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/range_1/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/range_1"
  op: "Range"
  input: "lstm_fused_cell_1/range_1/start"
  input: "lstm_fused_cell_1/strided_slice"
  input: "lstm_fused_cell_1/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/stack_2"
  op: "Pack"
  input: "IteratorGetNext:1"
  input: "lstm_fused_cell_1/range_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_fused_cell_1/GatherNd_1"
  op: "GatherNd"
  input: "lstm_fused_cell_1/concat_1"
  input: "lstm_fused_cell_1/stack_2"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "ReverseSequence_1"
  op: "ReverseSequence"
  input: "lstm_fused_cell_1/mul"
  input: "IteratorGetNext:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 1
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 0
    }
  }
}
node {
  name: "concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "concat_1"
  op: "ConcatV2"
  input: "lstm_fused_cell/mul"
  input: "ReverseSequence_1"
  input: "concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "transpose_1/perm"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transpose_1"
  op: "Transpose"
  input: "concat_1"
  input: "transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dropout_2/dropout/rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "dropout_2/dropout/Shape"
  op: "Shape"
  input: "transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dropout_2/dropout/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout_2/dropout/sub"
  op: "Sub"
  input: "dropout_2/dropout/sub/x"
  input: "dropout_2/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dropout_2/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dropout_2/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout_2/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dropout_2/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dropout_2/dropout/random_uniform/sub"
  op: "Sub"
  input: "dropout_2/dropout/random_uniform/max"
  input: "dropout_2/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dropout_2/dropout/random_uniform/mul"
  op: "Mul"
  input: "dropout_2/dropout/random_uniform/RandomUniform"
  input: "dropout_2/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dropout_2/dropout/random_uniform"
  op: "Add"
  input: "dropout_2/dropout/random_uniform/mul"
  input: "dropout_2/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dropout_2/dropout/add"
  op: "Add"
  input: "dropout_2/dropout/sub"
  input: "dropout_2/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dropout_2/dropout/Floor"
  op: "Floor"
  input: "dropout_2/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dropout_2/dropout/truediv"
  op: "RealDiv"
  input: "transpose_1"
  input: "dropout_2/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dropout_2/dropout/mul"
  op: "Mul"
  input: "dropout_2/dropout/truediv"
  input: "dropout_2/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\310\000\000\000\006\000\000\000"
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.17066404223442078
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.17066404223442078
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dense/kernel/Initializer/random_uniform/max"
  input: "dense/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dense/kernel/Initializer/random_uniform/RandomUniform"
  input: "dense/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform"
  op: "Add"
  input: "dense/kernel/Initializer/random_uniform/mul"
  input: "dense/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "dense/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense/kernel/Assign"
  op: "Assign"
  input: "dense/kernel"
  input: "dense/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense/kernel/read"
  op: "Identity"
  input: "dense/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "dense/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense/bias/Assign"
  op: "Assign"
  input: "dense/bias"
  input: "dense/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense/bias/read"
  op: "Identity"
  input: "dense/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "dense/Tensordot/axes"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dense/Tensordot/free"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dense/Tensordot/Shape"
  op: "Shape"
  input: "dropout_2/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense/Tensordot/GatherV2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense/Tensordot/GatherV2"
  op: "GatherV2"
  input: "dense/Tensordot/Shape"
  input: "dense/Tensordot/free"
  input: "dense/Tensordot/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dense/Tensordot/GatherV2_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense/Tensordot/GatherV2_1"
  op: "GatherV2"
  input: "dense/Tensordot/Shape"
  input: "dense/Tensordot/axes"
  input: "dense/Tensordot/GatherV2_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dense/Tensordot/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense/Tensordot/Prod"
  op: "Prod"
  input: "dense/Tensordot/GatherV2"
  input: "dense/Tensordot/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dense/Tensordot/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense/Tensordot/Prod_1"
  op: "Prod"
  input: "dense/Tensordot/GatherV2_1"
  input: "dense/Tensordot/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dense/Tensordot/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense/Tensordot/concat"
  op: "ConcatV2"
  input: "dense/Tensordot/free"
  input: "dense/Tensordot/axes"
  input: "dense/Tensordot/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "dense/Tensordot/stack"
  op: "Pack"
  input: "dense/Tensordot/Prod"
  input: "dense/Tensordot/Prod_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dense/Tensordot/transpose"
  op: "Transpose"
  input: "dropout_2/dropout/mul"
  input: "dense/Tensordot/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dense/Tensordot/Reshape"
  op: "Reshape"
  input: "dense/Tensordot/transpose"
  input: "dense/Tensordot/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dense/Tensordot/transpose_1/perm"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dense/Tensordot/transpose_1"
  op: "Transpose"
  input: "dense/kernel/read"
  input: "dense/Tensordot/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "dense/Tensordot/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\310\000\000\000\006\000\000\000"
      }
    }
  }
}
node {
  name: "dense/Tensordot/Reshape_1"
  op: "Reshape"
  input: "dense/Tensordot/transpose_1"
  input: "dense/Tensordot/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "dense/Tensordot/MatMul"
  op: "MatMul"
  input: "dense/Tensordot/Reshape"
  input: "dense/Tensordot/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense/Tensordot/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "dense/Tensordot/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense/Tensordot/concat_1"
  op: "ConcatV2"
  input: "dense/Tensordot/GatherV2"
  input: "dense/Tensordot/Const_2"
  input: "dense/Tensordot/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "dense/Tensordot"
  op: "Reshape"
  input: "dense/Tensordot/MatMul"
  input: "dense/Tensordot/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "dense/BiasAdd"
  op: "BiasAdd"
  input: "dense/Tensordot"
  input: "dense/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "crf/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\006\000\000\000"
      }
    }
  }
}
node {
  name: "crf/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.7071067690849304
      }
    }
  }
}
node {
  name: "crf/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.7071067690849304
      }
    }
  }
}
node {
  name: "crf/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "crf/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "crf/Initializer/random_uniform/sub"
  op: "Sub"
  input: "crf/Initializer/random_uniform/max"
  input: "crf/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "crf/Initializer/random_uniform/mul"
  op: "Mul"
  input: "crf/Initializer/random_uniform/RandomUniform"
  input: "crf/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "crf/Initializer/random_uniform"
  op: "Add"
  input: "crf/Initializer/random_uniform/mul"
  input: "crf/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "crf"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "crf/Assign"
  op: "Assign"
  input: "crf"
  input: "crf/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "crf/read"
  op: "Identity"
  input: "crf"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "Shape_1"
  op: "Shape"
  input: "dense/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_5/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_5"
  op: "StridedSlice"
  input: "Shape_1"
  input: "strided_slice_5/stack"
  input: "strided_slice_5/stack_1"
  input: "strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Equal/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Equal"
  op: "Equal"
  input: "strided_slice_5"
  input: "Equal/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/Switch"
  op: "Switch"
  input: "Equal"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/switch_t"
  op: "Identity"
  input: "cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/switch_f"
  op: "Identity"
  input: "cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/pred_id"
  op: "Identity"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/Squeeze"
  op: "Squeeze"
  input: "cond/Squeeze/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "cond/Squeeze/Switch"
  op: "Switch"
  input: "dense/BiasAdd"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/BiasAdd"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond/ArgMax/dimension"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/ArgMax"
  op: "ArgMax"
  input: "cond/Squeeze"
  input: "cond/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "cond/ExpandDims/dim"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/ExpandDims"
  op: "ExpandDims"
  input: "cond/ArgMax"
  input: "cond/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/Max/reduction_indices"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/Max"
  op: "Max"
  input: "cond/Squeeze"
  input: "cond/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cond/Cast"
  op: "Cast"
  input: "cond/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/ExpandDims_1/dim"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/ExpandDims_1"
  op: "ExpandDims"
  input: "cond/ExpandDims_1/Switch"
  input: "cond/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond/ExpandDims_1/Switch"
  op: "Switch"
  input: "crf/read"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond/Slice/begin"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "cond/Slice/size"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "cond/Slice"
  op: "Slice"
  input: "cond/Slice/Switch"
  input: "cond/Slice/begin"
  input: "cond/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond/Slice/Switch"
  op: "Switch"
  input: "dense/BiasAdd"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/BiasAdd"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond/Squeeze_1"
  op: "Squeeze"
  input: "cond/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "cond/Slice_1/begin"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "cond/Slice_1/size"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377\377\377\377\377\377\377\377\377"
      }
    }
  }
}
node {
  name: "cond/Slice_1"
  op: "Slice"
  input: "cond/Slice/Switch"
  input: "cond/Slice_1/begin"
  input: "cond/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond/Const"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/sub/y"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/sub"
  op: "Sub"
  input: "cond/sub/Switch"
  input: "cond/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond/sub/Switch"
  op: "Switch"
  input: "IteratorGetNext:1"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorGetNext"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond/Maximum"
  op: "Maximum"
  input: "cond/Const"
  input: "cond/sub"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/Rank"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/rnn/range/start"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/rnn/range/delta"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn/range"
  op: "Range"
  input: "cond/rnn/range/start"
  input: "cond/rnn/Rank"
  input: "cond/rnn/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/concat/values_0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "cond/rnn/concat/axis"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn/concat"
  op: "ConcatV2"
  input: "cond/rnn/concat/values_0"
  input: "cond/rnn/range"
  input: "cond/rnn/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/transpose"
  op: "Transpose"
  input: "cond/Slice_1"
  input: "cond/rnn/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/sequence_length"
  op: "Identity"
  input: "cond/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/Shape"
  op: "Shape"
  input: "cond/rnn/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/rnn/strided_slice/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn/strided_slice/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/rnn/strided_slice/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn/strided_slice"
  op: "StridedSlice"
  input: "cond/rnn/Shape"
  input: "cond/rnn/strided_slice/stack"
  input: "cond/rnn/strided_slice/stack_1"
  input: "cond/rnn/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/rnn/Shape_1"
  op: "Shape"
  input: "cond/rnn/sequence_length"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/rnn/stack"
  op: "Pack"
  input: "cond/rnn/strided_slice"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/rnn/Equal"
  op: "Equal"
  input: "cond/rnn/Shape_1"
  input: "cond/rnn/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/Const"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn/All"
  op: "All"
  input: "cond/rnn/Equal"
  input: "cond/rnn/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cond/rnn/Assert/Const"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor cond/rnn/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "cond/rnn/Assert/Const_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "cond/rnn/Assert/Assert/data_0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor cond/rnn/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "cond/rnn/Assert/Assert/data_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "cond/rnn/Assert/Assert"
  op: "Assert"
  input: "cond/rnn/All"
  input: "cond/rnn/Assert/Assert/data_0"
  input: "cond/rnn/stack"
  input: "cond/rnn/Assert/Assert/data_2"
  input: "cond/rnn/Shape_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "cond/rnn/CheckSeqLen"
  op: "Identity"
  input: "cond/rnn/sequence_length"
  input: "^cond/rnn/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/Shape_2"
  op: "Shape"
  input: "cond/rnn/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/rnn/strided_slice_1/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn/strided_slice_1/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn/strided_slice_1/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn/strided_slice_1"
  op: "StridedSlice"
  input: "cond/rnn/Shape_2"
  input: "cond/rnn/strided_slice_1/stack"
  input: "cond/rnn/strided_slice_1/stack_1"
  input: "cond/rnn/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/rnn/Shape_3"
  op: "Shape"
  input: "cond/rnn/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/rnn/strided_slice_2/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn/strided_slice_2/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/rnn/strided_slice_2/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn/strided_slice_2"
  op: "StridedSlice"
  input: "cond/rnn/Shape_3"
  input: "cond/rnn/strided_slice_2/stack"
  input: "cond/rnn/strided_slice_2/stack_1"
  input: "cond/rnn/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/rnn/ExpandDims/dim"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn/ExpandDims"
  op: "ExpandDims"
  input: "cond/rnn/strided_slice_2"
  input: "cond/rnn/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/Const_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "cond/rnn/concat_1/axis"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn/concat_1"
  op: "ConcatV2"
  input: "cond/rnn/ExpandDims"
  input: "cond/rnn/Const_1"
  input: "cond/rnn/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/zeros/Const"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn/zeros"
  op: "Fill"
  input: "cond/rnn/concat_1"
  input: "cond/rnn/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/rnn/Const_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn/Min"
  op: "Min"
  input: "cond/rnn/CheckSeqLen"
  input: "cond/rnn/Const_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cond/rnn/Const_3"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn/Max"
  op: "Max"
  input: "cond/rnn/CheckSeqLen"
  input: "cond/rnn/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cond/rnn/time"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn/TensorArray"
  op: "TensorArrayV3"
  input: "cond/rnn/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "cond/rnn/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "cond/rnn/TensorArray_1"
  op: "TensorArrayV3"
  input: "cond/rnn/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "cond/rnn/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "cond/rnn/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "cond/rnn/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/rnn/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "cond/rnn/TensorArrayUnstack/Shape"
  input: "cond/rnn/TensorArrayUnstack/strided_slice/stack"
  input: "cond/rnn/TensorArrayUnstack/strided_slice/stack_1"
  input: "cond/rnn/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/rnn/TensorArrayUnstack/range/start"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn/TensorArrayUnstack/range/delta"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn/TensorArrayUnstack/range"
  op: "Range"
  input: "cond/rnn/TensorArrayUnstack/range/start"
  input: "cond/rnn/TensorArrayUnstack/strided_slice"
  input: "cond/rnn/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "cond/rnn/TensorArray_1"
  input: "cond/rnn/TensorArrayUnstack/range"
  input: "cond/rnn/transpose"
  input: "cond/rnn/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/Maximum/x"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn/Maximum"
  op: "Maximum"
  input: "cond/rnn/Maximum/x"
  input: "cond/rnn/Max"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/Minimum"
  op: "Minimum"
  input: "cond/rnn/strided_slice_1"
  input: "cond/rnn/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/iteration_counter"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn/while/Enter"
  op: "Enter"
  input: "cond/rnn/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn/while/Enter_1"
  op: "Enter"
  input: "cond/rnn/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn/while/Enter_2"
  op: "Enter"
  input: "cond/rnn/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn/while/Enter_3"
  op: "Enter"
  input: "cond/Squeeze_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn/while/Merge"
  op: "Merge"
  input: "cond/rnn/while/Enter"
  input: "cond/rnn/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/Merge_1"
  op: "Merge"
  input: "cond/rnn/while/Enter_1"
  input: "cond/rnn/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/Merge_2"
  op: "Merge"
  input: "cond/rnn/while/Enter_2"
  input: "cond/rnn/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/Merge_3"
  op: "Merge"
  input: "cond/rnn/while/Enter_3"
  input: "cond/rnn/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/Less"
  op: "Less"
  input: "cond/rnn/while/Merge"
  input: "cond/rnn/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/Less/Enter"
  op: "Enter"
  input: "cond/rnn/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn/while/Less_1"
  op: "Less"
  input: "cond/rnn/while/Merge_1"
  input: "cond/rnn/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/Less_1/Enter"
  op: "Enter"
  input: "cond/rnn/Minimum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn/while/LogicalAnd"
  op: "LogicalAnd"
  input: "cond/rnn/while/Less"
  input: "cond/rnn/while/Less_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/LoopCond"
  op: "LoopCond"
  input: "cond/rnn/while/LogicalAnd"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/Switch"
  op: "Switch"
  input: "cond/rnn/while/Merge"
  input: "cond/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/Switch_1"
  op: "Switch"
  input: "cond/rnn/while/Merge_1"
  input: "cond/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/Switch_2"
  op: "Switch"
  input: "cond/rnn/while/Merge_2"
  input: "cond/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/Switch_3"
  op: "Switch"
  input: "cond/rnn/while/Merge_3"
  input: "cond/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/Identity"
  op: "Identity"
  input: "cond/rnn/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/Identity_1"
  op: "Identity"
  input: "cond/rnn/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/Identity_2"
  op: "Identity"
  input: "cond/rnn/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/Identity_3"
  op: "Identity"
  input: "cond/rnn/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/add/y"
  op: "Const"
  input: "^cond/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn/while/add"
  op: "Add"
  input: "cond/rnn/while/Identity"
  input: "cond/rnn/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "cond/rnn/while/TensorArrayReadV3/Enter"
  input: "cond/rnn/while/Identity_1"
  input: "cond/rnn/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond/rnn/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "cond/rnn/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "cond/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn/while/GreaterEqual"
  op: "GreaterEqual"
  input: "cond/rnn/while/Identity_1"
  input: "cond/rnn/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/GreaterEqual/Enter"
  op: "Enter"
  input: "cond/rnn/CheckSeqLen"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn/while/ExpandDims/dim"
  op: "Const"
  input: "^cond/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/rnn/while/ExpandDims"
  op: "ExpandDims"
  input: "cond/rnn/while/Identity_3"
  input: "cond/rnn/while/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/add_1"
  op: "Add"
  input: "cond/rnn/while/ExpandDims"
  input: "cond/rnn/while/add_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/add_1/Enter"
  op: "Enter"
  input: "cond/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn/while/Max/reduction_indices"
  op: "Const"
  input: "^cond/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn/while/Max"
  op: "Max"
  input: "cond/rnn/while/add_1"
  input: "cond/rnn/while/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cond/rnn/while/add_2"
  op: "Add"
  input: "cond/rnn/while/TensorArrayReadV3"
  input: "cond/rnn/while/Max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/ArgMax/dimension"
  op: "Const"
  input: "^cond/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn/while/ArgMax"
  op: "ArgMax"
  input: "cond/rnn/while/add_1"
  input: "cond/rnn/while/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "cond/rnn/while/Cast"
  op: "Cast"
  input: "cond/rnn/while/ArgMax"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/Select"
  op: "Select"
  input: "cond/rnn/while/GreaterEqual"
  input: "cond/rnn/while/Select/Enter"
  input: "cond/rnn/while/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn/while/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/Select/Enter"
  op: "Enter"
  input: "cond/rnn/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn/while/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn/while/Select_1"
  op: "Select"
  input: "cond/rnn/while/GreaterEqual"
  input: "cond/rnn/while/Identity_3"
  input: "cond/rnn/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn/while/add_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "cond/rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "cond/rnn/while/Identity_1"
  input: "cond/rnn/while/Select"
  input: "cond/rnn/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn/while/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "cond/rnn/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn/while/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn/while/add_3/y"
  op: "Const"
  input: "^cond/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn/while/add_3"
  op: "Add"
  input: "cond/rnn/while/Identity_1"
  input: "cond/rnn/while/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/NextIteration"
  op: "NextIteration"
  input: "cond/rnn/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/NextIteration_1"
  op: "NextIteration"
  input: "cond/rnn/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/NextIteration_2"
  op: "NextIteration"
  input: "cond/rnn/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/NextIteration_3"
  op: "NextIteration"
  input: "cond/rnn/while/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/Exit"
  op: "Exit"
  input: "cond/rnn/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/Exit_1"
  op: "Exit"
  input: "cond/rnn/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/Exit_2"
  op: "Exit"
  input: "cond/rnn/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/while/Exit_3"
  op: "Exit"
  input: "cond/rnn/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "cond/rnn/TensorArray"
  input: "cond/rnn/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn/TensorArrayStack/range/start"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn/TensorArrayStack/range/delta"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn/TensorArrayStack/range"
  op: "Range"
  input: "cond/rnn/TensorArrayStack/range/start"
  input: "cond/rnn/TensorArrayStack/TensorArraySizeV3"
  input: "cond/rnn/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "cond/rnn/TensorArray"
  input: "cond/rnn/TensorArrayStack/range"
  input: "cond/rnn/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 6
        }
      }
    }
  }
}
node {
  name: "cond/rnn/Const_4"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "cond/rnn/Rank_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/rnn/range_1/start"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/rnn/range_1/delta"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn/range_1"
  op: "Range"
  input: "cond/rnn/range_1/start"
  input: "cond/rnn/Rank_1"
  input: "cond/rnn/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/concat_2/values_0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "cond/rnn/concat_2/axis"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn/concat_2"
  op: "ConcatV2"
  input: "cond/rnn/concat_2/values_0"
  input: "cond/rnn/range_1"
  input: "cond/rnn/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn/transpose_1"
  op: "Transpose"
  input: "cond/rnn/TensorArrayStack/TensorArrayGatherV3"
  input: "cond/rnn/concat_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond/ReverseSequence"
  op: "ReverseSequence"
  input: "cond/rnn/transpose_1"
  input: "cond/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/ArgMax_1/dimension"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/ArgMax_1"
  op: "ArgMax"
  input: "cond/rnn/while/Exit_3"
  input: "cond/ArgMax_1/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "cond/Cast_1"
  op: "Cast"
  input: "cond/ArgMax_1"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond/ExpandDims_2/dim"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond/ExpandDims_2"
  op: "ExpandDims"
  input: "cond/Cast_1"
  input: "cond/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/Rank"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/rnn_1/range/start"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/rnn_1/range/delta"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn_1/range"
  op: "Range"
  input: "cond/rnn_1/range/start"
  input: "cond/rnn_1/Rank"
  input: "cond/rnn_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/concat/values_0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "cond/rnn_1/concat/axis"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn_1/concat"
  op: "ConcatV2"
  input: "cond/rnn_1/concat/values_0"
  input: "cond/rnn_1/range"
  input: "cond/rnn_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/transpose"
  op: "Transpose"
  input: "cond/ReverseSequence"
  input: "cond/rnn_1/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/sequence_length"
  op: "Identity"
  input: "cond/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/Shape"
  op: "Shape"
  input: "cond/rnn_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/rnn_1/strided_slice/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn_1/strided_slice/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/rnn_1/strided_slice/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn_1/strided_slice"
  op: "StridedSlice"
  input: "cond/rnn_1/Shape"
  input: "cond/rnn_1/strided_slice/stack"
  input: "cond/rnn_1/strided_slice/stack_1"
  input: "cond/rnn_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/rnn_1/Shape_1"
  op: "Shape"
  input: "cond/rnn_1/sequence_length"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/rnn_1/stack"
  op: "Pack"
  input: "cond/rnn_1/strided_slice"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/rnn_1/Equal"
  op: "Equal"
  input: "cond/rnn_1/Shape_1"
  input: "cond/rnn_1/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/Const"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn_1/All"
  op: "All"
  input: "cond/rnn_1/Equal"
  input: "cond/rnn_1/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cond/rnn_1/Assert/Const"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor cond/rnn_1/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "cond/rnn_1/Assert/Const_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "cond/rnn_1/Assert/Assert/data_0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor cond/rnn_1/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "cond/rnn_1/Assert/Assert/data_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "cond/rnn_1/Assert/Assert"
  op: "Assert"
  input: "cond/rnn_1/All"
  input: "cond/rnn_1/Assert/Assert/data_0"
  input: "cond/rnn_1/stack"
  input: "cond/rnn_1/Assert/Assert/data_2"
  input: "cond/rnn_1/Shape_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "cond/rnn_1/CheckSeqLen"
  op: "Identity"
  input: "cond/rnn_1/sequence_length"
  input: "^cond/rnn_1/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/Shape_2"
  op: "Shape"
  input: "cond/rnn_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/rnn_1/strided_slice_1/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn_1/strided_slice_1/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn_1/strided_slice_1/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn_1/strided_slice_1"
  op: "StridedSlice"
  input: "cond/rnn_1/Shape_2"
  input: "cond/rnn_1/strided_slice_1/stack"
  input: "cond/rnn_1/strided_slice_1/stack_1"
  input: "cond/rnn_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/rnn_1/Shape_3"
  op: "Shape"
  input: "cond/rnn_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/rnn_1/strided_slice_2/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn_1/strided_slice_2/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/rnn_1/strided_slice_2/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn_1/strided_slice_2"
  op: "StridedSlice"
  input: "cond/rnn_1/Shape_3"
  input: "cond/rnn_1/strided_slice_2/stack"
  input: "cond/rnn_1/strided_slice_2/stack_1"
  input: "cond/rnn_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/rnn_1/ExpandDims/dim"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn_1/ExpandDims"
  op: "ExpandDims"
  input: "cond/rnn_1/strided_slice_2"
  input: "cond/rnn_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/Const_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn_1/concat_1/axis"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn_1/concat_1"
  op: "ConcatV2"
  input: "cond/rnn_1/ExpandDims"
  input: "cond/rnn_1/Const_1"
  input: "cond/rnn_1/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/zeros/Const"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn_1/zeros"
  op: "Fill"
  input: "cond/rnn_1/concat_1"
  input: "cond/rnn_1/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/rnn_1/Const_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn_1/Min"
  op: "Min"
  input: "cond/rnn_1/CheckSeqLen"
  input: "cond/rnn_1/Const_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cond/rnn_1/Const_3"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn_1/Max"
  op: "Max"
  input: "cond/rnn_1/CheckSeqLen"
  input: "cond/rnn_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cond/rnn_1/time"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn_1/TensorArray"
  op: "TensorArrayV3"
  input: "cond/rnn_1/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "cond/rnn_1/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "cond/rnn_1/TensorArray_1"
  op: "TensorArrayV3"
  input: "cond/rnn_1/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "cond/rnn_1/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "cond/rnn_1/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "cond/rnn_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/rnn_1/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn_1/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn_1/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn_1/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "cond/rnn_1/TensorArrayUnstack/Shape"
  input: "cond/rnn_1/TensorArrayUnstack/strided_slice/stack"
  input: "cond/rnn_1/TensorArrayUnstack/strided_slice/stack_1"
  input: "cond/rnn_1/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/rnn_1/TensorArrayUnstack/range/start"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn_1/TensorArrayUnstack/range/delta"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn_1/TensorArrayUnstack/range"
  op: "Range"
  input: "cond/rnn_1/TensorArrayUnstack/range/start"
  input: "cond/rnn_1/TensorArrayUnstack/strided_slice"
  input: "cond/rnn_1/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "cond/rnn_1/TensorArray_1"
  input: "cond/rnn_1/TensorArrayUnstack/range"
  input: "cond/rnn_1/transpose"
  input: "cond/rnn_1/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn_1/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/Maximum/x"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn_1/Maximum"
  op: "Maximum"
  input: "cond/rnn_1/Maximum/x"
  input: "cond/rnn_1/Max"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/Minimum"
  op: "Minimum"
  input: "cond/rnn_1/strided_slice_1"
  input: "cond/rnn_1/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/iteration_counter"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Enter"
  op: "Enter"
  input: "cond/rnn_1/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn_1/while/Enter_1"
  op: "Enter"
  input: "cond/rnn_1/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn_1/while/Enter_2"
  op: "Enter"
  input: "cond/rnn_1/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn_1/while/Enter_3"
  op: "Enter"
  input: "cond/ExpandDims_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn_1/while/Merge"
  op: "Merge"
  input: "cond/rnn_1/while/Enter"
  input: "cond/rnn_1/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Merge_1"
  op: "Merge"
  input: "cond/rnn_1/while/Enter_1"
  input: "cond/rnn_1/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Merge_2"
  op: "Merge"
  input: "cond/rnn_1/while/Enter_2"
  input: "cond/rnn_1/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Merge_3"
  op: "Merge"
  input: "cond/rnn_1/while/Enter_3"
  input: "cond/rnn_1/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Less"
  op: "Less"
  input: "cond/rnn_1/while/Merge"
  input: "cond/rnn_1/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Less/Enter"
  op: "Enter"
  input: "cond/rnn_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn_1/while/Less_1"
  op: "Less"
  input: "cond/rnn_1/while/Merge_1"
  input: "cond/rnn_1/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Less_1/Enter"
  op: "Enter"
  input: "cond/rnn_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn_1/while/LogicalAnd"
  op: "LogicalAnd"
  input: "cond/rnn_1/while/Less"
  input: "cond/rnn_1/while/Less_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/LoopCond"
  op: "LoopCond"
  input: "cond/rnn_1/while/LogicalAnd"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Switch"
  op: "Switch"
  input: "cond/rnn_1/while/Merge"
  input: "cond/rnn_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn_1/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Switch_1"
  op: "Switch"
  input: "cond/rnn_1/while/Merge_1"
  input: "cond/rnn_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn_1/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Switch_2"
  op: "Switch"
  input: "cond/rnn_1/while/Merge_2"
  input: "cond/rnn_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn_1/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Switch_3"
  op: "Switch"
  input: "cond/rnn_1/while/Merge_3"
  input: "cond/rnn_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn_1/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Identity"
  op: "Identity"
  input: "cond/rnn_1/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Identity_1"
  op: "Identity"
  input: "cond/rnn_1/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Identity_2"
  op: "Identity"
  input: "cond/rnn_1/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Identity_3"
  op: "Identity"
  input: "cond/rnn_1/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/add/y"
  op: "Const"
  input: "^cond/rnn_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/add"
  op: "Add"
  input: "cond/rnn_1/while/Identity"
  input: "cond/rnn_1/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "cond/rnn_1/while/TensorArrayReadV3/Enter"
  input: "cond/rnn_1/while/Identity_1"
  input: "cond/rnn_1/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/rnn_1/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "cond/rnn_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn_1/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "cond/rnn_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn_1/while/GreaterEqual"
  op: "GreaterEqual"
  input: "cond/rnn_1/while/Identity_1"
  input: "cond/rnn_1/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/GreaterEqual/Enter"
  op: "Enter"
  input: "cond/rnn_1/CheckSeqLen"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn_1/while/Squeeze"
  op: "Squeeze"
  input: "cond/rnn_1/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Shape"
  op: "Shape"
  input: "cond/rnn_1/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/rnn_1/while/strided_slice/stack"
  op: "Const"
  input: "^cond/rnn_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/strided_slice/stack_1"
  op: "Const"
  input: "^cond/rnn_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/strided_slice/stack_2"
  op: "Const"
  input: "^cond/rnn_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/strided_slice"
  op: "StridedSlice"
  input: "cond/rnn_1/while/Shape"
  input: "cond/rnn_1/while/strided_slice/stack"
  input: "cond/rnn_1/while/strided_slice/stack_1"
  input: "cond/rnn_1/while/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/rnn_1/while/range/start"
  op: "Const"
  input: "^cond/rnn_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/range/delta"
  op: "Const"
  input: "^cond/rnn_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/range"
  op: "Range"
  input: "cond/rnn_1/while/range/start"
  input: "cond/rnn_1/while/strided_slice"
  input: "cond/rnn_1/while/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/stack"
  op: "Pack"
  input: "cond/rnn_1/while/range"
  input: "cond/rnn_1/while/Squeeze"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/rnn_1/while/GatherNd"
  op: "GatherNd"
  input: "cond/rnn_1/while/TensorArrayReadV3"
  input: "cond/rnn_1/while/stack"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/ExpandDims/dim"
  op: "Const"
  input: "^cond/rnn_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/ExpandDims"
  op: "ExpandDims"
  input: "cond/rnn_1/while/GatherNd"
  input: "cond/rnn_1/while/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Select"
  op: "Select"
  input: "cond/rnn_1/while/GreaterEqual"
  input: "cond/rnn_1/while/Select/Enter"
  input: "cond/rnn_1/while/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn_1/while/ExpandDims"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Select/Enter"
  op: "Enter"
  input: "cond/rnn_1/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn_1/while/ExpandDims"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn_1/while/Select_1"
  op: "Select"
  input: "cond/rnn_1/while/GreaterEqual"
  input: "cond/rnn_1/while/Identity_3"
  input: "cond/rnn_1/while/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn_1/while/ExpandDims"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "cond/rnn_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "cond/rnn_1/while/Identity_1"
  input: "cond/rnn_1/while/Select"
  input: "cond/rnn_1/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn_1/while/ExpandDims"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "cond/rnn_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn_1/while/ExpandDims"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond/rnn_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond/rnn_1/while/add_1/y"
  op: "Const"
  input: "^cond/rnn_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/add_1"
  op: "Add"
  input: "cond/rnn_1/while/Identity_1"
  input: "cond/rnn_1/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/NextIteration"
  op: "NextIteration"
  input: "cond/rnn_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/NextIteration_1"
  op: "NextIteration"
  input: "cond/rnn_1/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/NextIteration_2"
  op: "NextIteration"
  input: "cond/rnn_1/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/NextIteration_3"
  op: "NextIteration"
  input: "cond/rnn_1/while/Select_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Exit"
  op: "Exit"
  input: "cond/rnn_1/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Exit_1"
  op: "Exit"
  input: "cond/rnn_1/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Exit_2"
  op: "Exit"
  input: "cond/rnn_1/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/while/Exit_3"
  op: "Exit"
  input: "cond/rnn_1/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "cond/rnn_1/TensorArray"
  input: "cond/rnn_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn_1/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/TensorArrayStack/range/start"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn_1/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn_1/TensorArrayStack/range/delta"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn_1/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn_1/TensorArrayStack/range"
  op: "Range"
  input: "cond/rnn_1/TensorArrayStack/range/start"
  input: "cond/rnn_1/TensorArrayStack/TensorArraySizeV3"
  input: "cond/rnn_1/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn_1/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "cond/rnn_1/TensorArray"
  input: "cond/rnn_1/TensorArrayStack/range"
  input: "cond/rnn_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond/rnn_1/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/Const_4"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn_1/Rank_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/rnn_1/range_1/start"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/rnn_1/range_1/delta"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/rnn_1/range_1"
  op: "Range"
  input: "cond/rnn_1/range_1/start"
  input: "cond/rnn_1/Rank_1"
  input: "cond/rnn_1/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/concat_2/values_0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "cond/rnn_1/concat_2/axis"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/rnn_1/concat_2"
  op: "ConcatV2"
  input: "cond/rnn_1/concat_2/values_0"
  input: "cond/rnn_1/range_1"
  input: "cond/rnn_1/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "cond/rnn_1/transpose_1"
  op: "Transpose"
  input: "cond/rnn_1/TensorArrayStack/TensorArrayGatherV3"
  input: "cond/rnn_1/concat_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/Squeeze_2"
  op: "Squeeze"
  input: "cond/rnn_1/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "cond/concat/axis"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/concat"
  op: "ConcatV2"
  input: "cond/ExpandDims_2"
  input: "cond/Squeeze_2"
  input: "cond/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond/ReverseSequence_1"
  op: "ReverseSequence"
  input: "cond/concat"
  input: "cond/sub/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/Max_1/reduction_indices"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/Max_1"
  op: "Max"
  input: "cond/rnn/while/Exit_3"
  input: "cond/Max_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cond/Merge"
  op: "Merge"
  input: "cond/ReverseSequence_1"
  input: "cond/Cast"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/Merge_1"
  op: "Merge"
  input: "cond/Max_1"
  input: "cond/Max"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "string_to_index_2/hash_table/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "string_to_index_2/hash_table"
  op: "HashTableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "key_dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "hash_table_../dev/vocab.tags.txt_-2_-1"
    }
  }
  attr {
    key: "use_node_name_sharing"
    value {
      b: false
    }
  }
  attr {
    key: "value_dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "string_to_index_2/hash_table/table_init/asset_filepath"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "../dev/vocab.tags.txt"
      }
    }
  }
}
node {
  name: "string_to_index_2/hash_table/table_init"
  op: "InitializeTableFromTextFileV2"
  input: "string_to_index_2/hash_table"
  input: "string_to_index_2/hash_table/table_init/asset_filepath"
  attr {
    key: "delimiter"
    value {
      s: "\t"
    }
  }
  attr {
    key: "key_index"
    value {
      i: -2
    }
  }
  attr {
    key: "value_index"
    value {
      i: -1
    }
  }
  attr {
    key: "vocab_size"
    value {
      i: -1
    }
  }
}
node {
  name: "hash_table_Lookup"
  op: "LookupTableFindV2"
  input: "string_to_index_2/hash_table"
  input: "IteratorGetNext:4"
  input: "string_to_index_2/hash_table/Const"
  attr {
    key: "Tin"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Shape_2"
  op: "Shape"
  input: "dense/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_6/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_6"
  op: "StridedSlice"
  input: "Shape_2"
  input: "strided_slice_6/stack"
  input: "strided_slice_6/stack_1"
  input: "strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Equal_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Equal_1"
  op: "Equal"
  input: "strided_slice_6"
  input: "Equal_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_1/Switch"
  op: "Switch"
  input: "Equal_1"
  input: "Equal_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_1/switch_t"
  op: "Identity"
  input: "cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_1/switch_f"
  op: "Identity"
  input: "cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_1/pred_id"
  op: "Identity"
  input: "Equal_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_1/Shape"
  op: "Shape"
  input: "cond_1/Shape/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "cond_1/Shape/Switch"
  op: "Switch"
  input: "dense/BiasAdd"
  input: "cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/BiasAdd"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/strided_slice/stack"
  op: "Const"
  input: "^cond_1/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_1/strided_slice/stack_1"
  op: "Const"
  input: "^cond_1/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/strided_slice/stack_2"
  op: "Const"
  input: "^cond_1/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/strided_slice"
  op: "StridedSlice"
  input: "cond_1/Shape"
  input: "cond_1/strided_slice/stack"
  input: "cond_1/strided_slice/stack_1"
  input: "cond_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond_1/range/start"
  op: "Const"
  input: "^cond_1/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "cond_1/range/delta"
  op: "Const"
  input: "^cond_1/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "cond_1/range"
  op: "Range"
  input: "cond_1/range/start"
  input: "cond_1/strided_slice"
  input: "cond_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/Reshape/shape"
  op: "Const"
  input: "^cond_1/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "cond_1/Reshape"
  op: "Reshape"
  input: "cond_1/range"
  input: "cond_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/Squeeze"
  op: "Squeeze"
  input: "cond_1/Shape/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "cond_1/concat/axis"
  op: "Const"
  input: "^cond_1/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/concat"
  op: "ConcatV2"
  input: "cond_1/Reshape"
  input: "cond_1/concat/Switch:1"
  input: "cond_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/concat/Switch"
  op: "Switch"
  input: "hash_table_Lookup"
  input: "cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@hash_table_Lookup"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/GatherNd"
  op: "GatherNd"
  input: "cond_1/Squeeze"
  input: "cond_1/concat"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "cond_1/LessEqual/y"
  op: "Const"
  input: "^cond_1/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_1/LessEqual"
  op: "LessEqual"
  input: "cond_1/LessEqual/Switch:1"
  input: "cond_1/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/LessEqual/Switch"
  op: "Switch"
  input: "IteratorGetNext:1"
  input: "cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorGetNext"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/zeros_like"
  op: "ZerosLike"
  input: "cond_1/GatherNd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "cond_1/Select"
  op: "Select"
  input: "cond_1/LessEqual"
  input: "cond_1/zeros_like"
  input: "cond_1/GatherNd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "cond_1/Shape_1"
  op: "Shape"
  input: "cond_1/Shape_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_1/Shape_1/Switch"
  op: "Switch"
  input: "dense/BiasAdd"
  input: "cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/BiasAdd"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/strided_slice_1/stack"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_1/strided_slice_1/stack_1"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/strided_slice_1/stack_2"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/strided_slice_1"
  op: "StridedSlice"
  input: "cond_1/Shape_1"
  input: "cond_1/strided_slice_1/stack"
  input: "cond_1/strided_slice_1/stack_1"
  input: "cond_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond_1/Shape_2"
  op: "Shape"
  input: "cond_1/Shape_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_1/strided_slice_2/stack"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/strided_slice_2/stack_1"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond_1/strided_slice_2/stack_2"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/strided_slice_2"
  op: "StridedSlice"
  input: "cond_1/Shape_2"
  input: "cond_1/strided_slice_2/stack"
  input: "cond_1/strided_slice_2/stack_1"
  input: "cond_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond_1/Shape_3"
  op: "Shape"
  input: "cond_1/Shape_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_1/strided_slice_3/stack"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond_1/strided_slice_3/stack_1"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond_1/strided_slice_3/stack_2"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/strided_slice_3"
  op: "StridedSlice"
  input: "cond_1/Shape_3"
  input: "cond_1/strided_slice_3/stack"
  input: "cond_1/strided_slice_3/stack_1"
  input: "cond_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond_1/Reshape_1/shape"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond_1/Reshape_1"
  op: "Reshape"
  input: "cond_1/Shape_1/Switch"
  input: "cond_1/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/range_1/start"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_1/range_1/delta"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/range_1"
  op: "Range"
  input: "cond_1/range_1/start"
  input: "cond_1/strided_slice_1"
  input: "cond_1/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/mul"
  op: "Mul"
  input: "cond_1/range_1"
  input: "cond_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/mul_1"
  op: "Mul"
  input: "cond_1/mul"
  input: "cond_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/ExpandDims/dim"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/ExpandDims"
  op: "ExpandDims"
  input: "cond_1/mul_1"
  input: "cond_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/range_2/start"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_1/range_2/delta"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/range_2"
  op: "Range"
  input: "cond_1/range_2/start"
  input: "cond_1/strided_slice_2"
  input: "cond_1/range_2/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/mul_2"
  op: "Mul"
  input: "cond_1/range_2"
  input: "cond_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/ExpandDims_1/dim"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_1/ExpandDims_1"
  op: "ExpandDims"
  input: "cond_1/mul_2"
  input: "cond_1/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/add"
  op: "Add"
  input: "cond_1/ExpandDims"
  input: "cond_1/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/ToInt64"
  op: "Cast"
  input: "cond_1/add"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/add_1"
  op: "Add"
  input: "cond_1/ToInt64"
  input: "cond_1/add_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/add_1/Switch"
  op: "Switch"
  input: "hash_table_Lookup"
  input: "cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@hash_table_Lookup"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/Reshape_2/shape"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond_1/Reshape_2"
  op: "Reshape"
  input: "cond_1/add_1"
  input: "cond_1/Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/GatherV2/axis"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_1/GatherV2"
  op: "GatherV2"
  input: "cond_1/Reshape_1"
  input: "cond_1/Reshape_2"
  input: "cond_1/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/Reshape_3/shape"
  op: "Pack"
  input: "cond_1/strided_slice_1"
  input: "cond_1/strided_slice_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond_1/Reshape_3"
  op: "Reshape"
  input: "cond_1/GatherV2"
  input: "cond_1/Reshape_3/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/Shape_4"
  op: "Shape"
  input: "cond_1/add_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_1/strided_slice_4/stack"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/strided_slice_4/stack_1"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond_1/strided_slice_4/stack_2"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/strided_slice_4"
  op: "StridedSlice"
  input: "cond_1/Shape_4"
  input: "cond_1/strided_slice_4/stack"
  input: "cond_1/strided_slice_4/stack_1"
  input: "cond_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond_1/SequenceMask/Const"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_1/SequenceMask/Const_1"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/SequenceMask/Range"
  op: "Range"
  input: "cond_1/SequenceMask/Const"
  input: "cond_1/strided_slice_4"
  input: "cond_1/SequenceMask/Const_1"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/SequenceMask/ExpandDims/dim"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond_1/SequenceMask/ExpandDims"
  op: "ExpandDims"
  input: "cond_1/SequenceMask/ExpandDims/Switch"
  input: "cond_1/SequenceMask/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/SequenceMask/ExpandDims/Switch"
  op: "Switch"
  input: "IteratorGetNext:1"
  input: "cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorGetNext"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/SequenceMask/Cast"
  op: "Cast"
  input: "cond_1/SequenceMask/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/SequenceMask/Less"
  op: "Less"
  input: "cond_1/SequenceMask/Range"
  input: "cond_1/SequenceMask/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/SequenceMask/Cast_1"
  op: "Cast"
  input: "cond_1/SequenceMask/Less"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/mul_3"
  op: "Mul"
  input: "cond_1/Reshape_3"
  input: "cond_1/SequenceMask/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/Sum/reduction_indices"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/Sum"
  op: "Sum"
  input: "cond_1/mul_3"
  input: "cond_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cond_1/Shape_5"
  op: "Shape"
  input: "cond_1/add_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_1/strided_slice_5/stack"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/strided_slice_5/stack_1"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond_1/strided_slice_5/stack_2"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/strided_slice_5"
  op: "StridedSlice"
  input: "cond_1/Shape_5"
  input: "cond_1/strided_slice_5/stack"
  input: "cond_1/strided_slice_5/stack_1"
  input: "cond_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond_1/sub/y"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/sub"
  op: "Sub"
  input: "cond_1/strided_slice_5"
  input: "cond_1/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_1/Slice/begin"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "cond_1/Slice/size/0"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond_1/Slice/size"
  op: "Pack"
  input: "cond_1/Slice/size/0"
  input: "cond_1/sub"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond_1/Slice"
  op: "Slice"
  input: "cond_1/add_1/Switch"
  input: "cond_1/Slice/begin"
  input: "cond_1/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/Slice_1/begin"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "cond_1/Slice_1/size/0"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond_1/Slice_1/size"
  op: "Pack"
  input: "cond_1/Slice_1/size/0"
  input: "cond_1/sub"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond_1/Slice_1"
  op: "Slice"
  input: "cond_1/add_1/Switch"
  input: "cond_1/Slice_1/begin"
  input: "cond_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/mul_4/y"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 6
      }
    }
  }
}
node {
  name: "cond_1/mul_4"
  op: "Mul"
  input: "cond_1/Slice"
  input: "cond_1/mul_4/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/add_2"
  op: "Add"
  input: "cond_1/mul_4"
  input: "cond_1/Slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/Reshape_4/shape"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond_1/Reshape_4"
  op: "Reshape"
  input: "cond_1/Reshape_4/Switch"
  input: "cond_1/Reshape_4/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 36
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/Reshape_4/Switch"
  op: "Switch"
  input: "crf/read"
  input: "cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/GatherV2_1/axis"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_1/GatherV2_1"
  op: "GatherV2"
  input: "cond_1/Reshape_4"
  input: "cond_1/add_2"
  input: "cond_1/GatherV2_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/Shape_6"
  op: "Shape"
  input: "cond_1/add_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_1/strided_slice_6/stack"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/strided_slice_6/stack_1"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond_1/strided_slice_6/stack_2"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/strided_slice_6"
  op: "StridedSlice"
  input: "cond_1/Shape_6"
  input: "cond_1/strided_slice_6/stack"
  input: "cond_1/strided_slice_6/stack_1"
  input: "cond_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond_1/SequenceMask_1/Const"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_1/SequenceMask_1/Const_1"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/SequenceMask_1/Range"
  op: "Range"
  input: "cond_1/SequenceMask_1/Const"
  input: "cond_1/strided_slice_6"
  input: "cond_1/SequenceMask_1/Const_1"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/SequenceMask_1/ExpandDims/dim"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond_1/SequenceMask_1/ExpandDims"
  op: "ExpandDims"
  input: "cond_1/SequenceMask/ExpandDims/Switch"
  input: "cond_1/SequenceMask_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/SequenceMask_1/Cast"
  op: "Cast"
  input: "cond_1/SequenceMask_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/SequenceMask_1/Less"
  op: "Less"
  input: "cond_1/SequenceMask_1/Range"
  input: "cond_1/SequenceMask_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/SequenceMask_1/Cast_1"
  op: "Cast"
  input: "cond_1/SequenceMask_1/Less"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/Slice_2/begin"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "cond_1/Slice_2/size"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\377\377\377\377"
      }
    }
  }
}
node {
  name: "cond_1/Slice_2"
  op: "Slice"
  input: "cond_1/SequenceMask_1/Cast_1"
  input: "cond_1/Slice_2/begin"
  input: "cond_1/Slice_2/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/mul_5"
  op: "Mul"
  input: "cond_1/GatherV2_1"
  input: "cond_1/Slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/Sum_1/reduction_indices"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/Sum_1"
  op: "Sum"
  input: "cond_1/mul_5"
  input: "cond_1/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cond_1/add_3"
  op: "Add"
  input: "cond_1/Sum"
  input: "cond_1/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/Merge"
  op: "Merge"
  input: "cond_1/add_3"
  input: "cond_1/Select"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Slice/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "Slice"
  op: "Slice"
  input: "dense/BiasAdd"
  input: "Slice/begin"
  input: "Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "Squeeze"
  op: "Squeeze"
  input: "Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "Shape_3"
  op: "Shape"
  input: "dense/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_7/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_7"
  op: "StridedSlice"
  input: "Shape_3"
  input: "strided_slice_7/stack"
  input: "strided_slice_7/stack_1"
  input: "strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Equal_2/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Equal_2"
  op: "Equal"
  input: "strided_slice_7"
  input: "Equal_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/Switch"
  op: "Switch"
  input: "Equal_2"
  input: "Equal_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/switch_t"
  op: "Identity"
  input: "cond_2/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/switch_f"
  op: "Identity"
  input: "cond_2/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/pred_id"
  op: "Identity"
  input: "Equal_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp/Max/reduction_indices"
  op: "Const"
  input: "^cond_2/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp/Max"
  op: "Max"
  input: "cond_2/ReduceLogSumExp/Max/Switch:1"
  input: "cond_2/ReduceLogSumExp/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp/Max/Switch"
  op: "Switch"
  input: "Squeeze"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Squeeze"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp/IsFinite"
  op: "IsFinite"
  input: "cond_2/ReduceLogSumExp/Max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp/zeros_like"
  op: "ZerosLike"
  input: "cond_2/ReduceLogSumExp/Max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp/Select"
  op: "Select"
  input: "cond_2/ReduceLogSumExp/IsFinite"
  input: "cond_2/ReduceLogSumExp/Max"
  input: "cond_2/ReduceLogSumExp/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp/StopGradient"
  op: "StopGradient"
  input: "cond_2/ReduceLogSumExp/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp/Sub"
  op: "Sub"
  input: "cond_2/ReduceLogSumExp/Max/Switch:1"
  input: "cond_2/ReduceLogSumExp/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp/Exp"
  op: "Exp"
  input: "cond_2/ReduceLogSumExp/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp/Sum/reduction_indices"
  op: "Const"
  input: "^cond_2/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp/Sum"
  op: "Sum"
  input: "cond_2/ReduceLogSumExp/Exp"
  input: "cond_2/ReduceLogSumExp/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp/Log"
  op: "Log"
  input: "cond_2/ReduceLogSumExp/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp/Shape"
  op: "Shape"
  input: "cond_2/ReduceLogSumExp/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp/Reshape"
  op: "Reshape"
  input: "cond_2/ReduceLogSumExp/StopGradient"
  input: "cond_2/ReduceLogSumExp/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp/Add"
  op: "Add"
  input: "cond_2/ReduceLogSumExp/Log"
  input: "cond_2/ReduceLogSumExp/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/LessEqual/y"
  op: "Const"
  input: "^cond_2/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_2/LessEqual"
  op: "LessEqual"
  input: "cond_2/LessEqual/Switch:1"
  input: "cond_2/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/LessEqual/Switch"
  op: "Switch"
  input: "IteratorGetNext:1"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorGetNext"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/zeros_like"
  op: "ZerosLike"
  input: "cond_2/ReduceLogSumExp/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/Select"
  op: "Select"
  input: "cond_2/LessEqual"
  input: "cond_2/zeros_like"
  input: "cond_2/ReduceLogSumExp/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/Slice/begin"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "cond_2/Slice/size"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377\377\377\377\377\377\377\377\377"
      }
    }
  }
}
node {
  name: "cond_2/Slice"
  op: "Slice"
  input: "cond_2/Slice/Switch"
  input: "cond_2/Slice/begin"
  input: "cond_2/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/Slice/Switch"
  op: "Switch"
  input: "dense/BiasAdd"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/BiasAdd"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/ExpandDims/dim"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_2/ExpandDims"
  op: "ExpandDims"
  input: "cond_2/ExpandDims/Switch"
  input: "cond_2/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/ExpandDims/Switch"
  op: "Switch"
  input: "crf/read"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/Const"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_2/sub/y"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/sub"
  op: "Sub"
  input: "cond_2/sub/Switch"
  input: "cond_2/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/sub/Switch"
  op: "Switch"
  input: "IteratorGetNext:1"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorGetNext"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/Maximum"
  op: "Maximum"
  input: "cond_2/Const"
  input: "cond_2/sub"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/Rank"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond_2/rnn/range/start"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond_2/rnn/range/delta"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/rnn/range"
  op: "Range"
  input: "cond_2/rnn/range/start"
  input: "cond_2/rnn/Rank"
  input: "cond_2/rnn/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/concat/values_0"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "cond_2/rnn/concat/axis"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_2/rnn/concat"
  op: "ConcatV2"
  input: "cond_2/rnn/concat/values_0"
  input: "cond_2/rnn/range"
  input: "cond_2/rnn/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/transpose"
  op: "Transpose"
  input: "cond_2/Slice"
  input: "cond_2/rnn/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/sequence_length"
  op: "Identity"
  input: "cond_2/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/Shape"
  op: "Shape"
  input: "cond_2/rnn/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_2/rnn/strided_slice/stack"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/rnn/strided_slice/stack_1"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond_2/rnn/strided_slice/stack_2"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/rnn/strided_slice"
  op: "StridedSlice"
  input: "cond_2/rnn/Shape"
  input: "cond_2/rnn/strided_slice/stack"
  input: "cond_2/rnn/strided_slice/stack_1"
  input: "cond_2/rnn/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond_2/rnn/Shape_1"
  op: "Shape"
  input: "cond_2/rnn/sequence_length"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_2/rnn/stack"
  op: "Pack"
  input: "cond_2/rnn/strided_slice"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond_2/rnn/Equal"
  op: "Equal"
  input: "cond_2/rnn/Shape_1"
  input: "cond_2/rnn/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/Const"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_2/rnn/All"
  op: "All"
  input: "cond_2/rnn/Equal"
  input: "cond_2/rnn/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cond_2/rnn/Assert/Const"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor cond_2/rnn/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "cond_2/rnn/Assert/Const_1"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "cond_2/rnn/Assert/Assert/data_0"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor cond_2/rnn/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "cond_2/rnn/Assert/Assert/data_2"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "cond_2/rnn/Assert/Assert"
  op: "Assert"
  input: "cond_2/rnn/All"
  input: "cond_2/rnn/Assert/Assert/data_0"
  input: "cond_2/rnn/stack"
  input: "cond_2/rnn/Assert/Assert/data_2"
  input: "cond_2/rnn/Shape_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "cond_2/rnn/CheckSeqLen"
  op: "Identity"
  input: "cond_2/rnn/sequence_length"
  input: "^cond_2/rnn/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/Shape_2"
  op: "Shape"
  input: "cond_2/rnn/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_2/rnn/strided_slice_1/stack"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_2/rnn/strided_slice_1/stack_1"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/rnn/strided_slice_1/stack_2"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/rnn/strided_slice_1"
  op: "StridedSlice"
  input: "cond_2/rnn/Shape_2"
  input: "cond_2/rnn/strided_slice_1/stack"
  input: "cond_2/rnn/strided_slice_1/stack_1"
  input: "cond_2/rnn/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond_2/rnn/Shape_3"
  op: "Shape"
  input: "cond_2/rnn/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_2/rnn/strided_slice_2/stack"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/rnn/strided_slice_2/stack_1"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond_2/rnn/strided_slice_2/stack_2"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/rnn/strided_slice_2"
  op: "StridedSlice"
  input: "cond_2/rnn/Shape_3"
  input: "cond_2/rnn/strided_slice_2/stack"
  input: "cond_2/rnn/strided_slice_2/stack_1"
  input: "cond_2/rnn/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond_2/rnn/ExpandDims/dim"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_2/rnn/ExpandDims"
  op: "ExpandDims"
  input: "cond_2/rnn/strided_slice_2"
  input: "cond_2/rnn/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/Const_1"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "cond_2/rnn/concat_1/axis"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_2/rnn/concat_1"
  op: "ConcatV2"
  input: "cond_2/rnn/ExpandDims"
  input: "cond_2/rnn/Const_1"
  input: "cond_2/rnn/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/zeros/Const"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "cond_2/rnn/zeros"
  op: "Fill"
  input: "cond_2/rnn/concat_1"
  input: "cond_2/rnn/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_2/rnn/Const_2"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_2/rnn/Min"
  op: "Min"
  input: "cond_2/rnn/CheckSeqLen"
  input: "cond_2/rnn/Const_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cond_2/rnn/Const_3"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_2/rnn/Max"
  op: "Max"
  input: "cond_2/rnn/CheckSeqLen"
  input: "cond_2/rnn/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cond_2/rnn/time"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_2/rnn/TensorArray"
  op: "TensorArrayV3"
  input: "cond_2/rnn/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "cond_2/rnn/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "cond_2/rnn/TensorArray_1"
  op: "TensorArrayV3"
  input: "cond_2/rnn/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "cond_2/rnn/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "cond_2/rnn/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "cond_2/rnn/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_2/rnn/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_2/rnn/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/rnn/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/rnn/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "cond_2/rnn/TensorArrayUnstack/Shape"
  input: "cond_2/rnn/TensorArrayUnstack/strided_slice/stack"
  input: "cond_2/rnn/TensorArrayUnstack/strided_slice/stack_1"
  input: "cond_2/rnn/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond_2/rnn/TensorArrayUnstack/range/start"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_2/rnn/TensorArrayUnstack/range/delta"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/rnn/TensorArrayUnstack/range"
  op: "Range"
  input: "cond_2/rnn/TensorArrayUnstack/range/start"
  input: "cond_2/rnn/TensorArrayUnstack/strided_slice"
  input: "cond_2/rnn/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "cond_2/rnn/TensorArray_1"
  input: "cond_2/rnn/TensorArrayUnstack/range"
  input: "cond_2/rnn/transpose"
  input: "cond_2/rnn/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/Maximum/x"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/rnn/Maximum"
  op: "Maximum"
  input: "cond_2/rnn/Maximum/x"
  input: "cond_2/rnn/Max"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/Minimum"
  op: "Minimum"
  input: "cond_2/rnn/strided_slice_1"
  input: "cond_2/rnn/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/iteration_counter"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Switch"
  op: "Switch"
  input: "Squeeze"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Squeeze"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Enter"
  op: "Enter"
  input: "cond_2/rnn/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond_2/rnn/while/Enter_1"
  op: "Enter"
  input: "cond_2/rnn/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond_2/rnn/while/Enter_2"
  op: "Enter"
  input: "cond_2/rnn/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond_2/rnn/while/Enter_3"
  op: "Enter"
  input: "cond_2/rnn/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond_2/rnn/while/Merge"
  op: "Merge"
  input: "cond_2/rnn/while/Enter"
  input: "cond_2/rnn/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Merge_1"
  op: "Merge"
  input: "cond_2/rnn/while/Enter_1"
  input: "cond_2/rnn/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Merge_2"
  op: "Merge"
  input: "cond_2/rnn/while/Enter_2"
  input: "cond_2/rnn/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Merge_3"
  op: "Merge"
  input: "cond_2/rnn/while/Enter_3"
  input: "cond_2/rnn/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Less"
  op: "Less"
  input: "cond_2/rnn/while/Merge"
  input: "cond_2/rnn/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Less/Enter"
  op: "Enter"
  input: "cond_2/rnn/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond_2/rnn/while/Less_1"
  op: "Less"
  input: "cond_2/rnn/while/Merge_1"
  input: "cond_2/rnn/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Less_1/Enter"
  op: "Enter"
  input: "cond_2/rnn/Minimum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond_2/rnn/while/LogicalAnd"
  op: "LogicalAnd"
  input: "cond_2/rnn/while/Less"
  input: "cond_2/rnn/while/Less_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/LoopCond"
  op: "LoopCond"
  input: "cond_2/rnn/while/LogicalAnd"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Switch_1"
  op: "Switch"
  input: "cond_2/rnn/while/Merge"
  input: "cond_2/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Switch_2"
  op: "Switch"
  input: "cond_2/rnn/while/Merge_1"
  input: "cond_2/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Switch_3"
  op: "Switch"
  input: "cond_2/rnn/while/Merge_2"
  input: "cond_2/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Switch_4"
  op: "Switch"
  input: "cond_2/rnn/while/Merge_3"
  input: "cond_2/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Identity"
  op: "Identity"
  input: "cond_2/rnn/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Identity_1"
  op: "Identity"
  input: "cond_2/rnn/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Identity_2"
  op: "Identity"
  input: "cond_2/rnn/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Identity_3"
  op: "Identity"
  input: "cond_2/rnn/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/add/y"
  op: "Const"
  input: "^cond_2/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/add"
  op: "Add"
  input: "cond_2/rnn/while/Identity"
  input: "cond_2/rnn/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "cond_2/rnn/while/TensorArrayReadV3/Enter"
  input: "cond_2/rnn/while/Identity_1"
  input: "cond_2/rnn/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_2/rnn/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "cond_2/rnn/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond_2/rnn/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "cond_2/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond_2/rnn/while/GreaterEqual"
  op: "GreaterEqual"
  input: "cond_2/rnn/while/Identity_1"
  input: "cond_2/rnn/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/GreaterEqual/Enter"
  op: "Enter"
  input: "cond_2/rnn/CheckSeqLen"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond_2/rnn/while/ExpandDims/dim"
  op: "Const"
  input: "^cond_2/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/ExpandDims"
  op: "ExpandDims"
  input: "cond_2/rnn/while/Identity_3"
  input: "cond_2/rnn/while/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/add_1"
  op: "Add"
  input: "cond_2/rnn/while/ExpandDims"
  input: "cond_2/rnn/while/add_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/add_1/Enter"
  op: "Enter"
  input: "cond_2/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond_2/rnn/while/ReduceLogSumExp/Max/reduction_indices"
  op: "Const"
  input: "^cond_2/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/ReduceLogSumExp/Max"
  op: "Max"
  input: "cond_2/rnn/while/add_1"
  input: "cond_2/rnn/while/ReduceLogSumExp/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "cond_2/rnn/while/ReduceLogSumExp/IsFinite"
  op: "IsFinite"
  input: "cond_2/rnn/while/ReduceLogSumExp/Max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/ReduceLogSumExp/zeros_like"
  op: "ZerosLike"
  input: "cond_2/rnn/while/ReduceLogSumExp/Max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/ReduceLogSumExp/Select"
  op: "Select"
  input: "cond_2/rnn/while/ReduceLogSumExp/IsFinite"
  input: "cond_2/rnn/while/ReduceLogSumExp/Max"
  input: "cond_2/rnn/while/ReduceLogSumExp/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/ReduceLogSumExp/StopGradient"
  op: "StopGradient"
  input: "cond_2/rnn/while/ReduceLogSumExp/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/ReduceLogSumExp/Sub"
  op: "Sub"
  input: "cond_2/rnn/while/add_1"
  input: "cond_2/rnn/while/ReduceLogSumExp/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/ReduceLogSumExp/Exp"
  op: "Exp"
  input: "cond_2/rnn/while/ReduceLogSumExp/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/ReduceLogSumExp/Sum/reduction_indices"
  op: "Const"
  input: "^cond_2/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/ReduceLogSumExp/Sum"
  op: "Sum"
  input: "cond_2/rnn/while/ReduceLogSumExp/Exp"
  input: "cond_2/rnn/while/ReduceLogSumExp/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cond_2/rnn/while/ReduceLogSumExp/Log"
  op: "Log"
  input: "cond_2/rnn/while/ReduceLogSumExp/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/ReduceLogSumExp/Shape"
  op: "Shape"
  input: "cond_2/rnn/while/ReduceLogSumExp/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_2/rnn/while/ReduceLogSumExp/Reshape"
  op: "Reshape"
  input: "cond_2/rnn/while/ReduceLogSumExp/StopGradient"
  input: "cond_2/rnn/while/ReduceLogSumExp/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/ReduceLogSumExp/Add"
  op: "Add"
  input: "cond_2/rnn/while/ReduceLogSumExp/Log"
  input: "cond_2/rnn/while/ReduceLogSumExp/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/add_2"
  op: "Add"
  input: "cond_2/rnn/while/TensorArrayReadV3"
  input: "cond_2/rnn/while/ReduceLogSumExp/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Select"
  op: "Select"
  input: "cond_2/rnn/while/GreaterEqual"
  input: "cond_2/rnn/while/Select/Enter"
  input: "cond_2/rnn/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/add_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Select/Enter"
  op: "Enter"
  input: "cond_2/rnn/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/add_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond_2/rnn/while/Select_1"
  op: "Select"
  input: "cond_2/rnn/while/GreaterEqual"
  input: "cond_2/rnn/while/Identity_3"
  input: "cond_2/rnn/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/add_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "cond_2/rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "cond_2/rnn/while/Identity_1"
  input: "cond_2/rnn/while/Select"
  input: "cond_2/rnn/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/add_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "cond_2/rnn/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/add_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cond_2/rnn/while/add_3/y"
  op: "Const"
  input: "^cond_2/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/add_3"
  op: "Add"
  input: "cond_2/rnn/while/Identity_1"
  input: "cond_2/rnn/while/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/NextIteration"
  op: "NextIteration"
  input: "cond_2/rnn/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/NextIteration_1"
  op: "NextIteration"
  input: "cond_2/rnn/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/NextIteration_2"
  op: "NextIteration"
  input: "cond_2/rnn/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/NextIteration_3"
  op: "NextIteration"
  input: "cond_2/rnn/while/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Exit"
  op: "Exit"
  input: "cond_2/rnn/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Exit_1"
  op: "Exit"
  input: "cond_2/rnn/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Exit_2"
  op: "Exit"
  input: "cond_2/rnn/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/while/Exit_3"
  op: "Exit"
  input: "cond_2/rnn/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "cond_2/rnn/TensorArray"
  input: "cond_2/rnn/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/TensorArrayStack/range/start"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_2/rnn/TensorArrayStack/range/delta"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/rnn/TensorArrayStack/range"
  op: "Range"
  input: "cond_2/rnn/TensorArrayStack/range/start"
  input: "cond_2/rnn/TensorArrayStack/TensorArraySizeV3"
  input: "cond_2/rnn/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "cond_2/rnn/TensorArray"
  input: "cond_2/rnn/TensorArrayStack/range"
  input: "cond_2/rnn/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 6
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/Const_4"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "cond_2/rnn/Rank_1"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond_2/rnn/range_1/start"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond_2/rnn/range_1/delta"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/rnn/range_1"
  op: "Range"
  input: "cond_2/rnn/range_1/start"
  input: "cond_2/rnn/Rank_1"
  input: "cond_2/rnn/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/concat_2/values_0"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "cond_2/rnn/concat_2/axis"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_2/rnn/concat_2"
  op: "ConcatV2"
  input: "cond_2/rnn/concat_2/values_0"
  input: "cond_2/rnn/range_1"
  input: "cond_2/rnn/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/rnn/transpose_1"
  op: "Transpose"
  input: "cond_2/rnn/TensorArrayStack/TensorArrayGatherV3"
  input: "cond_2/rnn/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp_1/Max/reduction_indices"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp_1/Max"
  op: "Max"
  input: "cond_2/rnn/while/Exit_3"
  input: "cond_2/ReduceLogSumExp_1/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp_1/IsFinite"
  op: "IsFinite"
  input: "cond_2/ReduceLogSumExp_1/Max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp_1/zeros_like"
  op: "ZerosLike"
  input: "cond_2/ReduceLogSumExp_1/Max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp_1/Select"
  op: "Select"
  input: "cond_2/ReduceLogSumExp_1/IsFinite"
  input: "cond_2/ReduceLogSumExp_1/Max"
  input: "cond_2/ReduceLogSumExp_1/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp_1/StopGradient"
  op: "StopGradient"
  input: "cond_2/ReduceLogSumExp_1/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp_1/Sub"
  op: "Sub"
  input: "cond_2/rnn/while/Exit_3"
  input: "cond_2/ReduceLogSumExp_1/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp_1/Exp"
  op: "Exp"
  input: "cond_2/ReduceLogSumExp_1/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp_1/Sum/reduction_indices"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp_1/Sum"
  op: "Sum"
  input: "cond_2/ReduceLogSumExp_1/Exp"
  input: "cond_2/ReduceLogSumExp_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp_1/Log"
  op: "Log"
  input: "cond_2/ReduceLogSumExp_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp_1/Shape"
  op: "Shape"
  input: "cond_2/ReduceLogSumExp_1/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp_1/Reshape"
  op: "Reshape"
  input: "cond_2/ReduceLogSumExp_1/StopGradient"
  input: "cond_2/ReduceLogSumExp_1/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/ReduceLogSumExp_1/Add"
  op: "Add"
  input: "cond_2/ReduceLogSumExp_1/Log"
  input: "cond_2/ReduceLogSumExp_1/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/LessEqual_1/y"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_2/LessEqual_1"
  op: "LessEqual"
  input: "cond_2/sub/Switch"
  input: "cond_2/LessEqual_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/zeros_like_1"
  op: "ZerosLike"
  input: "cond_2/ReduceLogSumExp_1/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/Select_1"
  op: "Select"
  input: "cond_2/LessEqual_1"
  input: "cond_2/zeros_like_1"
  input: "cond_2/ReduceLogSumExp_1/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/Merge"
  op: "Merge"
  input: "cond_2/Select_1"
  input: "cond_2/Select"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "sub_1"
  op: "Sub"
  input: "cond_1/Merge"
  input: "cond_2/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "Neg"
  op: "Neg"
  input: "sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "Rank"
  op: "Rank"
  input: "Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "range"
  op: "Range"
  input: "range/start"
  input: "Rank"
  input: "range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Mean"
  op: "Mean"
  input: "Neg"
  input: "range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SequenceMask_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "SequenceMask_1/Max"
  op: "Max"
  input: "IteratorGetNext:1"
  input: "SequenceMask_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SequenceMask_1/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "SequenceMask_1/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SequenceMask_1/Range"
  op: "Range"
  input: "SequenceMask_1/Const_1"
  input: "SequenceMask_1/Max"
  input: "SequenceMask_1/Const_2"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "SequenceMask_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "SequenceMask_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:1"
  input: "SequenceMask_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "SequenceMask_1/Cast"
  op: "Cast"
  input: "SequenceMask_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "SequenceMask_1/Less"
  op: "Less"
  input: "SequenceMask_1/Range"
  input: "SequenceMask_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Cast"
  op: "Cast"
  input: "cond/Merge"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Equal_3"
  op: "Equal"
  input: "Cast"
  input: "hash_table_Lookup"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "ToFloat_1"
  op: "Cast"
  input: "Equal_3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "accuracy/total/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "accuracy/total"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "accuracy/total/Assign"
  op: "Assign"
  input: "accuracy/total"
  input: "accuracy/total/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "accuracy/total/read"
  op: "Identity"
  input: "accuracy/total"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/count/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "accuracy/count"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "accuracy/count/Assign"
  op: "Assign"
  input: "accuracy/count"
  input: "accuracy/count/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "accuracy/count/read"
  op: "Identity"
  input: "accuracy/count"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/ToFloat"
  op: "Cast"
  input: "SequenceMask_1/Less"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/weights/shape"
  op: "Shape"
  input: "accuracy/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/values/shape"
  op: "Shape"
  input: "ToFloat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_scalar/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_scalar"
  op: "Equal"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_scalar/x"
  input: "accuracy/broadcast_weights/assert_broadcastable/weights/rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/Switch"
  op: "Switch"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_scalar"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_scalar"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/switch_t"
  op: "Identity"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/switch_f"
  op: "Identity"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id"
  op: "Identity"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_scalar"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/Switch_1"
  op: "Switch"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_scalar"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/broadcast_weights/assert_broadcastable/is_scalar"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
  op: "Equal"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank/Switch"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank/Switch"
  op: "Switch"
  input: "accuracy/broadcast_weights/assert_broadcastable/values/rank"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/broadcast_weights/assert_broadcastable/values/rank"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank/Switch_1"
  op: "Switch"
  input: "accuracy/broadcast_weights/assert_broadcastable/weights/rank"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/broadcast_weights/assert_broadcastable/weights/rank"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch"
  op: "Switch"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  op: "Identity"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_f"
  op: "Identity"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id"
  op: "Identity"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
  op: "Const"
  input: "^accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
  op: "ExpandDims"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch_1:1"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch"
  op: "Switch"
  input: "accuracy/broadcast_weights/assert_broadcastable/values/shape"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/broadcast_weights/assert_broadcastable/values/shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch_1"
  op: "Switch"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/broadcast_weights/assert_broadcastable/values/shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
  op: "Const"
  input: "^accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
  op: "Const"
  input: "^accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like"
  op: "Fill"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
  op: "Const"
  input: "^accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/concat"
  op: "ConcatV2"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
  op: "Const"
  input: "^accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
  op: "ExpandDims"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch_1:1"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch"
  op: "Switch"
  input: "accuracy/broadcast_weights/assert_broadcastable/weights/shape"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/broadcast_weights/assert_broadcastable/weights/shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch_1"
  op: "Switch"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/broadcast_weights/assert_broadcastable/weights/shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation"
  op: "DenseToDenseSetOperation"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "set_operation"
    value {
      s: "a-b"
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
  op: "Size"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/x"
  op: "Const"
  input: "^accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims"
  op: "Equal"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/x"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch_1"
  op: "Switch"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Merge"
  op: "Merge"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch_1"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/Merge"
  op: "Merge"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Merge"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/Switch_1:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights can not be broadcast to values."
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights.shape="
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "accuracy/ToFloat:0"
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "values.shape="
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "ToFloat_1:0"
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "is_scalar="
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Switch"
  op: "Switch"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/Merge"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/Merge"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/switch_t"
  op: "Identity"
  input: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
  op: "Identity"
  input: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/pred_id"
  op: "Identity"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/Merge"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/NoOp"
  op: "NoOp"
  input: "^accuracy/broadcast_weights/assert_broadcastable/AssertGuard/switch_t"
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/control_dependency"
  op: "Identity"
  input: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/switch_t"
  input: "^accuracy/broadcast_weights/assert_broadcastable/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/broadcast_weights/assert_broadcastable/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^accuracy/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights can not be broadcast to values."
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^accuracy/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights.shape="
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^accuracy/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "accuracy/ToFloat:0"
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_4"
  op: "Const"
  input: "^accuracy/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "values.shape="
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_5"
  op: "Const"
  input: "^accuracy/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "ToFloat_1:0"
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_7"
  op: "Const"
  input: "^accuracy/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "is_scalar="
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert"
  op: "Assert"
  input: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch"
  input: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_0"
  input: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_1"
  input: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_2"
  input: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch_1"
  input: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_4"
  input: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_5"
  input: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch_2"
  input: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_7"
  input: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch_3"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/Merge"
  input: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/broadcast_weights/assert_broadcastable/is_valid_shape/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "accuracy/broadcast_weights/assert_broadcastable/weights/shape"
  input: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/broadcast_weights/assert_broadcastable/weights/shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "accuracy/broadcast_weights/assert_broadcastable/values/shape"
  input: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/broadcast_weights/assert_broadcastable/values/shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch_3"
  op: "Switch"
  input: "accuracy/broadcast_weights/assert_broadcastable/is_scalar"
  input: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/broadcast_weights/assert_broadcastable/is_scalar"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
  input: "^accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Merge"
  op: "Merge"
  input: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/control_dependency_1"
  input: "accuracy/broadcast_weights/assert_broadcastable/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/ones_like/Shape"
  op: "Shape"
  input: "ToFloat_1"
  input: "^accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "accuracy/broadcast_weights/ones_like/Const"
  op: "Const"
  input: "^accuracy/broadcast_weights/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "accuracy/broadcast_weights/ones_like"
  op: "Fill"
  input: "accuracy/broadcast_weights/ones_like/Shape"
  input: "accuracy/broadcast_weights/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "accuracy/broadcast_weights"
  op: "Mul"
  input: "accuracy/ToFloat"
  input: "accuracy/broadcast_weights/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "accuracy/Mul"
  op: "Mul"
  input: "ToFloat_1"
  input: "accuracy/broadcast_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "accuracy/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "accuracy/Sum"
  op: "Sum"
  input: "accuracy/broadcast_weights"
  input: "accuracy/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "accuracy/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "accuracy/Sum_1"
  op: "Sum"
  input: "accuracy/Mul"
  input: "accuracy/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "accuracy/AssignAdd"
  op: "AssignAdd"
  input: "accuracy/total"
  input: "accuracy/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "accuracy/AssignAdd_1"
  op: "AssignAdd"
  input: "accuracy/count"
  input: "accuracy/Sum"
  input: "^accuracy/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "accuracy/Maximum/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "accuracy/Maximum"
  op: "Maximum"
  input: "accuracy/count/read"
  input: "accuracy/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/value"
  op: "DivNoNan"
  input: "accuracy/total/read"
  input: "accuracy/Maximum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/Maximum_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "accuracy/Maximum_1"
  op: "Maximum"
  input: "accuracy/AssignAdd_1"
  input: "accuracy/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/update_op"
  op: "DivNoNan"
  input: "accuracy/AssignAdd"
  input: "accuracy/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "total_confusion_matrix/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_confusion_matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "total_confusion_matrix"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_confusion_matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "total_confusion_matrix/Assign"
  op: "Assign"
  input: "total_confusion_matrix"
  input: "total_confusion_matrix/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_confusion_matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "total_confusion_matrix/read"
  op: "Identity"
  input: "total_confusion_matrix"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_confusion_matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "ToInt64"
  op: "Cast"
  input: "cond/Merge"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "ToInt64_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "ToInt64_1"
  op: "Cast"
  input: "ToInt64_1/x"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Reshape_3/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Reshape_3"
  op: "Reshape"
  input: "ToInt64"
  input: "Reshape_3/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Reshape_4/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Reshape_4"
  op: "Reshape"
  input: "hash_table_Lookup"
  input: "Reshape_4/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Reshape_5/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Reshape_5"
  op: "Reshape"
  input: "SequenceMask_1/Less"
  input: "Reshape_5/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "confusion_matrix/assert_non_negative/Const"
  input: "Reshape_4"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/All"
  op: "All"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/LessEqual"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`labels` contains negative values"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (Reshape_4:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/All"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
  input: "^confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`labels` contains negative values"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (Reshape_4:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/All"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix/assert_non_negative/assert_less_equal/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "Reshape_4"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  input: "^confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/control_dependency"
  op: "Identity"
  input: "Reshape_4"
  input: "^confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "confusion_matrix/assert_non_negative_1/Const"
  input: "Reshape_3"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/All"
  op: "All"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/LessEqual"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`predictions` contains negative values"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (Reshape_3:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/All"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_t"
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_t"
  input: "^confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`predictions` contains negative values"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (Reshape_3:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/All"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix/assert_non_negative_1/assert_less_equal/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "Reshape_3"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_f"
  input: "^confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/control_dependency_1"
  op: "Identity"
  input: "Reshape_3"
  input: "^confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Less"
  op: "Less"
  input: "confusion_matrix/control_dependency"
  input: "ToInt64_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/All"
  op: "All"
  input: "confusion_matrix/assert_less/Less"
  input: "confusion_matrix/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`labels` out of bound"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x < y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (confusion_matrix/control_dependency:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (ToInt64_1:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "confusion_matrix/assert_less/All"
  input: "confusion_matrix/assert_less/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "confusion_matrix/assert_less/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^confusion_matrix/assert_less/Assert/AssertGuard/switch_t"
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/switch_t"
  input: "^confusion_matrix/assert_less/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix/assert_less/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^confusion_matrix/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`labels` out of bound"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^confusion_matrix/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x < y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^confusion_matrix/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (confusion_matrix/control_dependency:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/Assert/data_4"
  op: "Const"
  input: "^confusion_matrix/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (ToInt64_1:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/Assert/Switch"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/Assert/data_0"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/Assert/data_1"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/Assert/data_2"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/Assert/Switch_1"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/Assert/data_4"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT64
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "confusion_matrix/assert_less/All"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix/assert_less/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "confusion_matrix/control_dependency"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "ToInt64_1"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ToInt64_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/switch_f"
  input: "^confusion_matrix/assert_less/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix/assert_less/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/control_dependency_1"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/control_dependency_2"
  op: "Identity"
  input: "confusion_matrix/control_dependency"
  input: "^confusion_matrix/assert_less/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Less"
  op: "Less"
  input: "confusion_matrix/control_dependency_1"
  input: "ToInt64_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/All"
  op: "All"
  input: "confusion_matrix/assert_less_1/Less"
  input: "confusion_matrix/assert_less_1/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`predictions` out of bound"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x < y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (confusion_matrix/control_dependency_1:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (ToInt64_1:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "confusion_matrix/assert_less_1/All"
  input: "confusion_matrix/assert_less_1/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "confusion_matrix/assert_less_1/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^confusion_matrix/assert_less_1/Assert/AssertGuard/switch_t"
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/switch_t"
  input: "^confusion_matrix/assert_less_1/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix/assert_less_1/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^confusion_matrix/assert_less_1/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`predictions` out of bound"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^confusion_matrix/assert_less_1/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x < y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^confusion_matrix/assert_less_1/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (confusion_matrix/control_dependency_1:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert/data_4"
  op: "Const"
  input: "^confusion_matrix/assert_less_1/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (ToInt64_1:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert/Switch"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert/data_0"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert/data_1"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert/data_2"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert/Switch_1"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert/data_4"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT64
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "confusion_matrix/assert_less_1/All"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix/assert_less_1/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "confusion_matrix/control_dependency_1"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "ToInt64_1"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ToInt64_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/switch_f"
  input: "^confusion_matrix/assert_less_1/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix/assert_less_1/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/control_dependency_1"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/control_dependency_3"
  op: "Identity"
  input: "confusion_matrix/control_dependency_1"
  input: "^confusion_matrix/assert_less_1/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/Cast"
  op: "Cast"
  input: "Reshape_5"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/stack"
  op: "Pack"
  input: "ToInt64_1"
  input: "ToInt64_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "confusion_matrix/stack_1"
  op: "Pack"
  input: "confusion_matrix/control_dependency_2"
  input: "confusion_matrix/control_dependency_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
}
node {
  name: "confusion_matrix/ToInt32"
  op: "Cast"
  input: "confusion_matrix/stack"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "confusion_matrix/zeros"
  op: "Fill"
  input: "confusion_matrix/ToInt32"
  input: "confusion_matrix/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "confusion_matrix/SparseTensorDenseAdd"
  op: "SparseTensorDenseAdd"
  input: "confusion_matrix/stack_1"
  input: "confusion_matrix/Cast"
  input: "confusion_matrix/stack"
  input: "confusion_matrix/zeros"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "AssignAdd"
  op: "AssignAdd"
  input: "total_confusion_matrix"
  input: "confusion_matrix/SparseTensorDenseAdd"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_confusion_matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "mul_4/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "mul_4"
  op: "Mul"
  input: "total_confusion_matrix/read"
  input: "mul_4/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "DiagPart"
  op: "DiagPart"
  input: "mul_4"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum"
  op: "Sum"
  input: "DiagPart"
  input: "Const_5"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mul_5/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "mul_5"
  op: "Mul"
  input: "total_confusion_matrix/read"
  input: "mul_5/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "Const_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Sum_1"
  op: "Sum"
  input: "mul_5"
  input: "Const_6"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mul_6/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
        tensor_content: "\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "mul_6"
  op: "Mul"
  input: "total_confusion_matrix/read"
  input: "mul_6/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "Const_7"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Sum_2"
  op: "Sum"
  input: "mul_6"
  input: "Const_7"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ToFloat_2"
  op: "Cast"
  input: "Sum"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ToFloat_3"
  op: "Cast"
  input: "Sum_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_like"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Equal_4"
  op: "Equal"
  input: "ToFloat_3"
  input: "zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "truediv"
  op: "RealDiv"
  input: "ToFloat_2"
  input: "ToFloat_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Select"
  op: "Select"
  input: "Equal_4"
  input: "zeros_like"
  input: "truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ToFloat_4"
  op: "Cast"
  input: "Sum"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ToFloat_5"
  op: "Cast"
  input: "Sum_2"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_like_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Equal_5"
  op: "Equal"
  input: "ToFloat_5"
  input: "zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "truediv_1"
  op: "RealDiv"
  input: "ToFloat_4"
  input: "ToFloat_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Select_1"
  op: "Select"
  input: "Equal_5"
  input: "zeros_like_1"
  input: "truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_7/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "mul_7"
  op: "Mul"
  input: "mul_7/x"
  input: "Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_8"
  op: "Mul"
  input: "mul_7"
  input: "Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_9/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "mul_9"
  op: "Mul"
  input: "mul_9/x"
  input: "Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "add_1"
  op: "Add"
  input: "mul_9"
  input: "Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_like_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Equal_6"
  op: "Equal"
  input: "add_1"
  input: "zeros_like_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "truediv_2"
  op: "RealDiv"
  input: "mul_8"
  input: "add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Select_2"
  op: "Select"
  input: "Equal_6"
  input: "zeros_like_2"
  input: "truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_10/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "mul_10"
  op: "Mul"
  input: "AssignAdd"
  input: "mul_10/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "DiagPart_1"
  op: "DiagPart"
  input: "mul_10"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "Const_8"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_3"
  op: "Sum"
  input: "DiagPart_1"
  input: "Const_8"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mul_11/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "mul_11"
  op: "Mul"
  input: "AssignAdd"
  input: "mul_11/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "Const_9"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Sum_4"
  op: "Sum"
  input: "mul_11"
  input: "Const_9"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mul_12/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
        tensor_content: "\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "mul_12"
  op: "Mul"
  input: "AssignAdd"
  input: "mul_12/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "Const_10"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Sum_5"
  op: "Sum"
  input: "mul_12"
  input: "Const_10"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ToFloat_6"
  op: "Cast"
  input: "Sum_3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ToFloat_7"
  op: "Cast"
  input: "Sum_4"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_like_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Equal_7"
  op: "Equal"
  input: "ToFloat_7"
  input: "zeros_like_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "truediv_3"
  op: "RealDiv"
  input: "ToFloat_6"
  input: "ToFloat_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Select_3"
  op: "Select"
  input: "Equal_7"
  input: "zeros_like_3"
  input: "truediv_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ToFloat_8"
  op: "Cast"
  input: "Sum_3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ToFloat_9"
  op: "Cast"
  input: "Sum_5"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_like_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Equal_8"
  op: "Equal"
  input: "ToFloat_9"
  input: "zeros_like_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "truediv_4"
  op: "RealDiv"
  input: "ToFloat_8"
  input: "ToFloat_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Select_4"
  op: "Select"
  input: "Equal_8"
  input: "zeros_like_4"
  input: "truediv_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_13/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "mul_13"
  op: "Mul"
  input: "mul_13/x"
  input: "Select_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_14"
  op: "Mul"
  input: "mul_13"
  input: "Select_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_15/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "mul_15"
  op: "Mul"
  input: "mul_15/x"
  input: "Select_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "add_2"
  op: "Add"
  input: "mul_15"
  input: "Select_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_like_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Equal_9"
  op: "Equal"
  input: "add_2"
  input: "zeros_like_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "truediv_5"
  op: "RealDiv"
  input: "mul_14"
  input: "add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Select_5"
  op: "Select"
  input: "Equal_9"
  input: "zeros_like_5"
  input: "truediv_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "total_confusion_matrix_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_confusion_matrix_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "total_confusion_matrix_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_confusion_matrix_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "total_confusion_matrix_1/Assign"
  op: "Assign"
  input: "total_confusion_matrix_1"
  input: "total_confusion_matrix_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_confusion_matrix_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "total_confusion_matrix_1/read"
  op: "Identity"
  input: "total_confusion_matrix_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_confusion_matrix_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "ToInt64_2"
  op: "Cast"
  input: "cond/Merge"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "ToInt64_3/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "ToInt64_3"
  op: "Cast"
  input: "ToInt64_3/x"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Reshape_6/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Reshape_6"
  op: "Reshape"
  input: "ToInt64_2"
  input: "Reshape_6/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Reshape_7/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Reshape_7"
  op: "Reshape"
  input: "hash_table_Lookup"
  input: "Reshape_7/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Reshape_8/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Reshape_8"
  op: "Reshape"
  input: "SequenceMask_1/Less"
  input: "Reshape_8/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "confusion_matrix_1/assert_non_negative/Const"
  input: "Reshape_7"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative/assert_less_equal/All"
  op: "All"
  input: "confusion_matrix_1/assert_non_negative/assert_less_equal/LessEqual"
  input: "confusion_matrix_1/assert_non_negative/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`labels` contains negative values"
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (Reshape_7:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "confusion_matrix_1/assert_non_negative/assert_less_equal/All"
  input: "confusion_matrix_1/assert_non_negative/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "confusion_matrix_1/assert_non_negative/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
}
node {
  name: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
  input: "^confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`labels` contains negative values"
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (Reshape_7:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  input: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  input: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  input: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  input: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "confusion_matrix_1/assert_non_negative/assert_less_equal/All"
  input: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_1/assert_non_negative/assert_less_equal/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "Reshape_7"
  input: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  input: "^confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  input: "confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/control_dependency"
  op: "Identity"
  input: "Reshape_7"
  input: "^confusion_matrix_1/assert_non_negative/assert_less_equal/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "confusion_matrix_1/assert_non_negative_1/Const"
  input: "Reshape_6"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/All"
  op: "All"
  input: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/LessEqual"
  input: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`predictions` contains negative values"
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (Reshape_6:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/All"
  input: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_t"
}
node {
  name: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_t"
  input: "^confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`predictions` contains negative values"
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (Reshape_6:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  input: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  input: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  input: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  input: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/All"
  input: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_1/assert_non_negative_1/assert_less_equal/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "Reshape_6"
  input: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_f"
  input: "^confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  input: "confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/control_dependency_1"
  op: "Identity"
  input: "Reshape_6"
  input: "^confusion_matrix_1/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/Less"
  op: "Less"
  input: "confusion_matrix_1/control_dependency"
  input: "ToInt64_3"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/All"
  op: "All"
  input: "confusion_matrix_1/assert_less/Less"
  input: "confusion_matrix_1/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`labels` out of bound"
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x < y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (confusion_matrix_1/control_dependency:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/Assert/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (ToInt64_3:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "confusion_matrix_1/assert_less/All"
  input: "confusion_matrix_1/assert_less/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "confusion_matrix_1/assert_less/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "confusion_matrix_1/assert_less/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "confusion_matrix_1/assert_less/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^confusion_matrix_1/assert_less/Assert/AssertGuard/switch_t"
}
node {
  name: "confusion_matrix_1/assert_less/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "confusion_matrix_1/assert_less/Assert/AssertGuard/switch_t"
  input: "^confusion_matrix_1/assert_less/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_1/assert_less/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^confusion_matrix_1/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`labels` out of bound"
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^confusion_matrix_1/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x < y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^confusion_matrix_1/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (confusion_matrix_1/control_dependency:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/Assert/AssertGuard/Assert/data_4"
  op: "Const"
  input: "^confusion_matrix_1/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (ToInt64_3:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "confusion_matrix_1/assert_less/Assert/AssertGuard/Assert/Switch"
  input: "confusion_matrix_1/assert_less/Assert/AssertGuard/Assert/data_0"
  input: "confusion_matrix_1/assert_less/Assert/AssertGuard/Assert/data_1"
  input: "confusion_matrix_1/assert_less/Assert/AssertGuard/Assert/data_2"
  input: "confusion_matrix_1/assert_less/Assert/AssertGuard/Assert/Switch_1"
  input: "confusion_matrix_1/assert_less/Assert/AssertGuard/Assert/data_4"
  input: "confusion_matrix_1/assert_less/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT64
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "confusion_matrix_1/assert_less/All"
  input: "confusion_matrix_1/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_1/assert_less/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "confusion_matrix_1/control_dependency"
  input: "confusion_matrix_1/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "ToInt64_3"
  input: "confusion_matrix_1/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ToInt64_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "confusion_matrix_1/assert_less/Assert/AssertGuard/switch_f"
  input: "^confusion_matrix_1/assert_less/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_1/assert_less/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "confusion_matrix_1/assert_less/Assert/AssertGuard/control_dependency_1"
  input: "confusion_matrix_1/assert_less/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/control_dependency_2"
  op: "Identity"
  input: "confusion_matrix_1/control_dependency"
  input: "^confusion_matrix_1/assert_less/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/Less"
  op: "Less"
  input: "confusion_matrix_1/control_dependency_1"
  input: "ToInt64_3"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/All"
  op: "All"
  input: "confusion_matrix_1/assert_less_1/Less"
  input: "confusion_matrix_1/assert_less_1/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`predictions` out of bound"
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x < y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (confusion_matrix_1/control_dependency_1:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/Assert/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (ToInt64_3:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "confusion_matrix_1/assert_less_1/All"
  input: "confusion_matrix_1/assert_less_1/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "confusion_matrix_1/assert_less_1/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^confusion_matrix_1/assert_less_1/Assert/AssertGuard/switch_t"
}
node {
  name: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/switch_t"
  input: "^confusion_matrix_1/assert_less_1/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_1/assert_less_1/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^confusion_matrix_1/assert_less_1/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`predictions` out of bound"
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^confusion_matrix_1/assert_less_1/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x < y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^confusion_matrix_1/assert_less_1/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (confusion_matrix_1/control_dependency_1:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/Assert/data_4"
  op: "Const"
  input: "^confusion_matrix_1/assert_less_1/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (ToInt64_3:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/Assert/Switch"
  input: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/Assert/data_0"
  input: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/Assert/data_1"
  input: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/Assert/data_2"
  input: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/Assert/Switch_1"
  input: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/Assert/data_4"
  input: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT64
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "confusion_matrix_1/assert_less_1/All"
  input: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_1/assert_less_1/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "confusion_matrix_1/control_dependency_1"
  input: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "ToInt64_3"
  input: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ToInt64_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/switch_f"
  input: "^confusion_matrix_1/assert_less_1/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_1/assert_less_1/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/control_dependency_1"
  input: "confusion_matrix_1/assert_less_1/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/control_dependency_3"
  op: "Identity"
  input: "confusion_matrix_1/control_dependency_1"
  input: "^confusion_matrix_1/assert_less_1/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/Cast"
  op: "Cast"
  input: "Reshape_8"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/stack"
  op: "Pack"
  input: "ToInt64_3"
  input: "ToInt64_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "confusion_matrix_1/stack_1"
  op: "Pack"
  input: "confusion_matrix_1/control_dependency_2"
  input: "confusion_matrix_1/control_dependency_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
}
node {
  name: "confusion_matrix_1/ToInt32"
  op: "Cast"
  input: "confusion_matrix_1/stack"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_1/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "confusion_matrix_1/zeros"
  op: "Fill"
  input: "confusion_matrix_1/ToInt32"
  input: "confusion_matrix_1/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "confusion_matrix_1/SparseTensorDenseAdd"
  op: "SparseTensorDenseAdd"
  input: "confusion_matrix_1/stack_1"
  input: "confusion_matrix_1/Cast"
  input: "confusion_matrix_1/stack"
  input: "confusion_matrix_1/zeros"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "AssignAdd_1"
  op: "AssignAdd"
  input: "total_confusion_matrix_1"
  input: "confusion_matrix_1/SparseTensorDenseAdd"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_confusion_matrix_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "mul_16/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "mul_16"
  op: "Mul"
  input: "total_confusion_matrix_1/read"
  input: "mul_16/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "DiagPart_2"
  op: "DiagPart"
  input: "mul_16"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "Const_11"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_6"
  op: "Sum"
  input: "DiagPart_2"
  input: "Const_11"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mul_17/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "mul_17"
  op: "Mul"
  input: "total_confusion_matrix_1/read"
  input: "mul_17/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "Const_12"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Sum_7"
  op: "Sum"
  input: "mul_17"
  input: "Const_12"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mul_18/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "mul_18"
  op: "Mul"
  input: "total_confusion_matrix_1/read"
  input: "mul_18/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "Const_13"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Sum_8"
  op: "Sum"
  input: "mul_18"
  input: "Const_13"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ToFloat_10"
  op: "Cast"
  input: "Sum_6"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ToFloat_11"
  op: "Cast"
  input: "Sum_7"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_like_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Equal_10"
  op: "Equal"
  input: "ToFloat_11"
  input: "zeros_like_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "truediv_6"
  op: "RealDiv"
  input: "ToFloat_10"
  input: "ToFloat_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Select_6"
  op: "Select"
  input: "Equal_10"
  input: "zeros_like_6"
  input: "truediv_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ToFloat_12"
  op: "Cast"
  input: "Sum_6"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ToFloat_13"
  op: "Cast"
  input: "Sum_8"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_like_7"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Equal_11"
  op: "Equal"
  input: "ToFloat_13"
  input: "zeros_like_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "truediv_7"
  op: "RealDiv"
  input: "ToFloat_12"
  input: "ToFloat_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Select_7"
  op: "Select"
  input: "Equal_11"
  input: "zeros_like_7"
  input: "truediv_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_19/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "mul_19"
  op: "Mul"
  input: "mul_19/x"
  input: "Select_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_20"
  op: "Mul"
  input: "mul_19"
  input: "Select_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_21/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "mul_21"
  op: "Mul"
  input: "mul_21/x"
  input: "Select_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "add_3"
  op: "Add"
  input: "mul_21"
  input: "Select_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_like_8"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Equal_12"
  op: "Equal"
  input: "add_3"
  input: "zeros_like_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "truediv_8"
  op: "RealDiv"
  input: "mul_20"
  input: "add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Select_8"
  op: "Select"
  input: "Equal_12"
  input: "zeros_like_8"
  input: "truediv_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_22/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "mul_22"
  op: "Mul"
  input: "AssignAdd_1"
  input: "mul_22/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "DiagPart_3"
  op: "DiagPart"
  input: "mul_22"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "Const_14"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_9"
  op: "Sum"
  input: "DiagPart_3"
  input: "Const_14"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mul_23/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "mul_23"
  op: "Mul"
  input: "AssignAdd_1"
  input: "mul_23/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "Const_15"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Sum_10"
  op: "Sum"
  input: "mul_23"
  input: "Const_15"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mul_24/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "mul_24"
  op: "Mul"
  input: "AssignAdd_1"
  input: "mul_24/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "Const_16"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Sum_11"
  op: "Sum"
  input: "mul_24"
  input: "Const_16"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ToFloat_14"
  op: "Cast"
  input: "Sum_9"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ToFloat_15"
  op: "Cast"
  input: "Sum_10"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_like_9"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Equal_13"
  op: "Equal"
  input: "ToFloat_15"
  input: "zeros_like_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "truediv_9"
  op: "RealDiv"
  input: "ToFloat_14"
  input: "ToFloat_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Select_9"
  op: "Select"
  input: "Equal_13"
  input: "zeros_like_9"
  input: "truediv_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ToFloat_16"
  op: "Cast"
  input: "Sum_9"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ToFloat_17"
  op: "Cast"
  input: "Sum_11"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_like_10"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Equal_14"
  op: "Equal"
  input: "ToFloat_17"
  input: "zeros_like_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "truediv_10"
  op: "RealDiv"
  input: "ToFloat_16"
  input: "ToFloat_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Select_10"
  op: "Select"
  input: "Equal_14"
  input: "zeros_like_10"
  input: "truediv_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_25/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "mul_25"
  op: "Mul"
  input: "mul_25/x"
  input: "Select_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_26"
  op: "Mul"
  input: "mul_25"
  input: "Select_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_27/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "mul_27"
  op: "Mul"
  input: "mul_27/x"
  input: "Select_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "add_4"
  op: "Add"
  input: "mul_27"
  input: "Select_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_like_11"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Equal_15"
  op: "Equal"
  input: "add_4"
  input: "zeros_like_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "truediv_11"
  op: "RealDiv"
  input: "mul_26"
  input: "add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Select_11"
  op: "Select"
  input: "Equal_15"
  input: "zeros_like_11"
  input: "truediv_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "total_confusion_matrix_2/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_confusion_matrix_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "total_confusion_matrix_2"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_confusion_matrix_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "total_confusion_matrix_2/Assign"
  op: "Assign"
  input: "total_confusion_matrix_2"
  input: "total_confusion_matrix_2/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_confusion_matrix_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "total_confusion_matrix_2/read"
  op: "Identity"
  input: "total_confusion_matrix_2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_confusion_matrix_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "ToInt64_4"
  op: "Cast"
  input: "cond/Merge"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "ToInt64_5/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "ToInt64_5"
  op: "Cast"
  input: "ToInt64_5/x"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Reshape_9/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Reshape_9"
  op: "Reshape"
  input: "ToInt64_4"
  input: "Reshape_9/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Reshape_10/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Reshape_10"
  op: "Reshape"
  input: "hash_table_Lookup"
  input: "Reshape_10/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Reshape_11/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Reshape_11"
  op: "Reshape"
  input: "SequenceMask_1/Less"
  input: "Reshape_11/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "confusion_matrix_2/assert_non_negative/Const"
  input: "Reshape_10"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative/assert_less_equal/All"
  op: "All"
  input: "confusion_matrix_2/assert_non_negative/assert_less_equal/LessEqual"
  input: "confusion_matrix_2/assert_non_negative/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`labels` contains negative values"
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (Reshape_10:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "confusion_matrix_2/assert_non_negative/assert_less_equal/All"
  input: "confusion_matrix_2/assert_non_negative/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "confusion_matrix_2/assert_non_negative/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
}
node {
  name: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
  input: "^confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`labels` contains negative values"
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (Reshape_10:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  input: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  input: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  input: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  input: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "confusion_matrix_2/assert_non_negative/assert_less_equal/All"
  input: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_2/assert_non_negative/assert_less_equal/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "Reshape_10"
  input: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_10"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  input: "^confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  input: "confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/control_dependency"
  op: "Identity"
  input: "Reshape_10"
  input: "^confusion_matrix_2/assert_non_negative/assert_less_equal/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_10"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "confusion_matrix_2/assert_non_negative_1/Const"
  input: "Reshape_9"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/All"
  op: "All"
  input: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/LessEqual"
  input: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`predictions` contains negative values"
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (Reshape_9:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/All"
  input: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_t"
}
node {
  name: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_t"
  input: "^confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`predictions` contains negative values"
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (Reshape_9:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  input: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  input: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  input: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  input: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/All"
  input: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_2/assert_non_negative_1/assert_less_equal/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "Reshape_9"
  input: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_9"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_f"
  input: "^confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  input: "confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/control_dependency_1"
  op: "Identity"
  input: "Reshape_9"
  input: "^confusion_matrix_2/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_9"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/Less"
  op: "Less"
  input: "confusion_matrix_2/control_dependency"
  input: "ToInt64_5"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/All"
  op: "All"
  input: "confusion_matrix_2/assert_less/Less"
  input: "confusion_matrix_2/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`labels` out of bound"
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x < y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (confusion_matrix_2/control_dependency:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/Assert/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (ToInt64_5:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "confusion_matrix_2/assert_less/All"
  input: "confusion_matrix_2/assert_less/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "confusion_matrix_2/assert_less/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "confusion_matrix_2/assert_less/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "confusion_matrix_2/assert_less/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^confusion_matrix_2/assert_less/Assert/AssertGuard/switch_t"
}
node {
  name: "confusion_matrix_2/assert_less/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "confusion_matrix_2/assert_less/Assert/AssertGuard/switch_t"
  input: "^confusion_matrix_2/assert_less/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_2/assert_less/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^confusion_matrix_2/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`labels` out of bound"
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^confusion_matrix_2/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x < y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^confusion_matrix_2/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (confusion_matrix_2/control_dependency:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/Assert/AssertGuard/Assert/data_4"
  op: "Const"
  input: "^confusion_matrix_2/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (ToInt64_5:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "confusion_matrix_2/assert_less/Assert/AssertGuard/Assert/Switch"
  input: "confusion_matrix_2/assert_less/Assert/AssertGuard/Assert/data_0"
  input: "confusion_matrix_2/assert_less/Assert/AssertGuard/Assert/data_1"
  input: "confusion_matrix_2/assert_less/Assert/AssertGuard/Assert/data_2"
  input: "confusion_matrix_2/assert_less/Assert/AssertGuard/Assert/Switch_1"
  input: "confusion_matrix_2/assert_less/Assert/AssertGuard/Assert/data_4"
  input: "confusion_matrix_2/assert_less/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT64
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "confusion_matrix_2/assert_less/All"
  input: "confusion_matrix_2/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_2/assert_less/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "confusion_matrix_2/control_dependency"
  input: "confusion_matrix_2/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_10"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "ToInt64_5"
  input: "confusion_matrix_2/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ToInt64_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "confusion_matrix_2/assert_less/Assert/AssertGuard/switch_f"
  input: "^confusion_matrix_2/assert_less/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_2/assert_less/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "confusion_matrix_2/assert_less/Assert/AssertGuard/control_dependency_1"
  input: "confusion_matrix_2/assert_less/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/control_dependency_2"
  op: "Identity"
  input: "confusion_matrix_2/control_dependency"
  input: "^confusion_matrix_2/assert_less/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_10"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/Less"
  op: "Less"
  input: "confusion_matrix_2/control_dependency_1"
  input: "ToInt64_5"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/All"
  op: "All"
  input: "confusion_matrix_2/assert_less_1/Less"
  input: "confusion_matrix_2/assert_less_1/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`predictions` out of bound"
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x < y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (confusion_matrix_2/control_dependency_1:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/Assert/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (ToInt64_5:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "confusion_matrix_2/assert_less_1/All"
  input: "confusion_matrix_2/assert_less_1/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "confusion_matrix_2/assert_less_1/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^confusion_matrix_2/assert_less_1/Assert/AssertGuard/switch_t"
}
node {
  name: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/switch_t"
  input: "^confusion_matrix_2/assert_less_1/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_2/assert_less_1/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^confusion_matrix_2/assert_less_1/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`predictions` out of bound"
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^confusion_matrix_2/assert_less_1/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x < y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^confusion_matrix_2/assert_less_1/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (confusion_matrix_2/control_dependency_1:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/Assert/data_4"
  op: "Const"
  input: "^confusion_matrix_2/assert_less_1/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (ToInt64_5:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/Assert/Switch"
  input: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/Assert/data_0"
  input: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/Assert/data_1"
  input: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/Assert/data_2"
  input: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/Assert/Switch_1"
  input: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/Assert/data_4"
  input: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT64
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "confusion_matrix_2/assert_less_1/All"
  input: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_2/assert_less_1/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "confusion_matrix_2/control_dependency_1"
  input: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_9"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "ToInt64_5"
  input: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ToInt64_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/switch_f"
  input: "^confusion_matrix_2/assert_less_1/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix_2/assert_less_1/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/control_dependency_1"
  input: "confusion_matrix_2/assert_less_1/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/control_dependency_3"
  op: "Identity"
  input: "confusion_matrix_2/control_dependency_1"
  input: "^confusion_matrix_2/assert_less_1/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_9"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/Cast"
  op: "Cast"
  input: "Reshape_11"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/stack"
  op: "Pack"
  input: "ToInt64_5"
  input: "ToInt64_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "confusion_matrix_2/stack_1"
  op: "Pack"
  input: "confusion_matrix_2/control_dependency_2"
  input: "confusion_matrix_2/control_dependency_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
}
node {
  name: "confusion_matrix_2/ToInt32"
  op: "Cast"
  input: "confusion_matrix_2/stack"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "confusion_matrix_2/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "confusion_matrix_2/zeros"
  op: "Fill"
  input: "confusion_matrix_2/ToInt32"
  input: "confusion_matrix_2/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "confusion_matrix_2/SparseTensorDenseAdd"
  op: "SparseTensorDenseAdd"
  input: "confusion_matrix_2/stack_1"
  input: "confusion_matrix_2/Cast"
  input: "confusion_matrix_2/stack"
  input: "confusion_matrix_2/zeros"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "AssignAdd_2"
  op: "AssignAdd"
  input: "total_confusion_matrix_2"
  input: "confusion_matrix_2/SparseTensorDenseAdd"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_confusion_matrix_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "mul_28/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "mul_28"
  op: "Mul"
  input: "total_confusion_matrix_2/read"
  input: "mul_28/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "DiagPart_4"
  op: "DiagPart"
  input: "mul_28"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "Const_17"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_12"
  op: "Sum"
  input: "DiagPart_4"
  input: "Const_17"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mul_29/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "mul_29"
  op: "Mul"
  input: "total_confusion_matrix_2/read"
  input: "mul_29/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "Const_18"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Sum_13"
  op: "Sum"
  input: "mul_29"
  input: "Const_18"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mul_30/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "mul_30"
  op: "Mul"
  input: "total_confusion_matrix_2/read"
  input: "mul_30/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "Const_19"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Sum_14"
  op: "Sum"
  input: "mul_30"
  input: "Const_19"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ToFloat_18"
  op: "Cast"
  input: "Sum_12"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ToFloat_19"
  op: "Cast"
  input: "Sum_13"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_like_12"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Equal_16"
  op: "Equal"
  input: "ToFloat_19"
  input: "zeros_like_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "truediv_12"
  op: "RealDiv"
  input: "ToFloat_18"
  input: "ToFloat_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Select_12"
  op: "Select"
  input: "Equal_16"
  input: "zeros_like_12"
  input: "truediv_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ToFloat_20"
  op: "Cast"
  input: "Sum_12"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ToFloat_21"
  op: "Cast"
  input: "Sum_14"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_like_13"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Equal_17"
  op: "Equal"
  input: "ToFloat_21"
  input: "zeros_like_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "truediv_13"
  op: "RealDiv"
  input: "ToFloat_20"
  input: "ToFloat_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Select_13"
  op: "Select"
  input: "Equal_17"
  input: "zeros_like_13"
  input: "truediv_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_31/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "mul_31"
  op: "Mul"
  input: "mul_31/x"
  input: "Select_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_32"
  op: "Mul"
  input: "mul_31"
  input: "Select_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_33/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "mul_33"
  op: "Mul"
  input: "mul_33/x"
  input: "Select_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "add_5"
  op: "Add"
  input: "mul_33"
  input: "Select_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_like_14"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Equal_18"
  op: "Equal"
  input: "add_5"
  input: "zeros_like_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "truediv_14"
  op: "RealDiv"
  input: "mul_32"
  input: "add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Select_14"
  op: "Select"
  input: "Equal_18"
  input: "zeros_like_14"
  input: "truediv_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_34/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "mul_34"
  op: "Mul"
  input: "AssignAdd_2"
  input: "mul_34/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "DiagPart_5"
  op: "DiagPart"
  input: "mul_34"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "Const_20"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_15"
  op: "Sum"
  input: "DiagPart_5"
  input: "Const_20"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mul_35/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "mul_35"
  op: "Mul"
  input: "AssignAdd_2"
  input: "mul_35/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "Const_21"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Sum_16"
  op: "Sum"
  input: "mul_35"
  input: "Const_21"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mul_36/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "mul_36"
  op: "Mul"
  input: "AssignAdd_2"
  input: "mul_36/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "Const_22"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Sum_17"
  op: "Sum"
  input: "mul_36"
  input: "Const_22"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ToFloat_22"
  op: "Cast"
  input: "Sum_15"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ToFloat_23"
  op: "Cast"
  input: "Sum_16"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_like_15"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Equal_19"
  op: "Equal"
  input: "ToFloat_23"
  input: "zeros_like_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "truediv_15"
  op: "RealDiv"
  input: "ToFloat_22"
  input: "ToFloat_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Select_15"
  op: "Select"
  input: "Equal_19"
  input: "zeros_like_15"
  input: "truediv_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ToFloat_24"
  op: "Cast"
  input: "Sum_15"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ToFloat_25"
  op: "Cast"
  input: "Sum_17"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_like_16"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Equal_20"
  op: "Equal"
  input: "ToFloat_25"
  input: "zeros_like_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "truediv_16"
  op: "RealDiv"
  input: "ToFloat_24"
  input: "ToFloat_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Select_16"
  op: "Select"
  input: "Equal_20"
  input: "zeros_like_16"
  input: "truediv_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_37/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "mul_37"
  op: "Mul"
  input: "mul_37/x"
  input: "Select_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_38"
  op: "Mul"
  input: "mul_37"
  input: "Select_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_39/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "mul_39"
  op: "Mul"
  input: "mul_39/x"
  input: "Select_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "add_6"
  op: "Add"
  input: "mul_39"
  input: "Select_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_like_17"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Equal_21"
  op: "Equal"
  input: "add_6"
  input: "zeros_like_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "truediv_17"
  op: "RealDiv"
  input: "mul_38"
  input: "add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Select_17"
  op: "Select"
  input: "Equal_21"
  input: "zeros_like_17"
  input: "truediv_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "acc/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "acc"
      }
    }
  }
}
node {
  name: "acc"
  op: "ScalarSummary"
  input: "acc/tags"
  input: "accuracy/update_op"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "precision/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "precision"
      }
    }
  }
}
node {
  name: "precision"
  op: "ScalarSummary"
  input: "precision/tags"
  input: "Select_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "recall/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "recall"
      }
    }
  }
}
node {
  name: "recall"
  op: "ScalarSummary"
  input: "recall/tags"
  input: "Select_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "f1/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "f1"
      }
    }
  }
}
node {
  name: "f1"
  op: "ScalarSummary"
  input: "f1/tags"
  input: "Select_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/f_count"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/f_count_1"
  op: "Enter"
  input: "gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge"
  op: "Merge"
  input: "gradients/f_count_1"
  input: "gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch"
  op: "Switch"
  input: "gradients/Merge"
  input: "cond_2/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Add/y"
  op: "Const"
  input: "^cond_2/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Add"
  op: "Add"
  input: "gradients/Switch:1"
  input: "gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration"
  op: "NextIteration"
  input: "gradients/Add"
  input: "^gradients/cond_2/rnn/while/ExpandDims_grad/Reshape/StackPushV2"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Exp_grad/mul/StackPushV2"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/StackPushV2"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Reshape/StackPushV2"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/StackPushV2"
  input: "^gradients/cond_2/rnn/while/Select_1_grad/Select/StackPushV2"
  input: "^gradients/cond_2/rnn/while/Select_1_grad/zeros_like/StackPushV2"
  input: "^gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPushV2"
  input: "^gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_2"
  op: "Exit"
  input: "gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/b_count_1"
  op: "Enter"
  input: "gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_1"
  op: "Merge"
  input: "gradients/b_count_1"
  input: "gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "gradients/Merge_1"
  input: "gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/b_count_2"
  op: "LoopCond"
  input: "gradients/GreaterEqual"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_1"
  op: "Switch"
  input: "gradients/Merge_1"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Sub"
  op: "Sub"
  input: "gradients/Switch_1:1"
  input: "gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_1"
  op: "NextIteration"
  input: "gradients/Sub"
  input: "^gradients/cond_2/rnn/while/Select_1_grad/zeros_like/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_3"
  op: "Exit"
  input: "gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape"
  op: "Shape"
  input: "Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Size"
  op: "Size"
  input: "gradients/Mean_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/add"
  op: "Add"
  input: "range"
  input: "gradients/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/mod"
  op: "FloorMod"
  input: "gradients/Mean_grad/add"
  input: "gradients/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape_1"
  op: "Shape"
  input: "gradients/Mean_grad/mod"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/range"
  op: "Range"
  input: "gradients/Mean_grad/range/start"
  input: "gradients/Mean_grad/Size"
  input: "gradients/Mean_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Fill"
  op: "Fill"
  input: "gradients/Mean_grad/Shape_1"
  input: "gradients/Mean_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/Mean_grad/range"
  input: "gradients/Mean_grad/mod"
  input: "gradients/Mean_grad/Shape"
  input: "gradients/Mean_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum"
  op: "Maximum"
  input: "gradients/Mean_grad/DynamicStitch"
  input: "gradients/Mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/Mean_grad/Shape"
  input: "gradients/Mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Reshape"
  op: "Reshape"
  input: "gradients/Fill"
  input: "gradients/Mean_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Tile"
  op: "Tile"
  input: "gradients/Mean_grad/Reshape"
  input: "gradients/Mean_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape_2"
  op: "Shape"
  input: "Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Prod"
  op: "Prod"
  input: "gradients/Mean_grad/Shape_2"
  input: "gradients/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Prod_1"
  op: "Prod"
  input: "gradients/Mean_grad/Shape_3"
  input: "gradients/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum_1"
  op: "Maximum"
  input: "gradients/Mean_grad/Prod_1"
  input: "gradients/Mean_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/floordiv_1"
  op: "FloorDiv"
  input: "gradients/Mean_grad/Prod"
  input: "gradients/Mean_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Cast"
  op: "Cast"
  input: "gradients/Mean_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/truediv"
  op: "RealDiv"
  input: "gradients/Mean_grad/Tile"
  input: "gradients/Mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/Neg_grad/Neg"
  op: "Neg"
  input: "gradients/Mean_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/sub_1_grad/Shape"
  op: "Shape"
  input: "cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sub_1_grad/Shape_1"
  op: "Shape"
  input: "cond_2/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sub_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/sub_1_grad/Shape"
  input: "gradients/sub_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sub_1_grad/Sum"
  op: "Sum"
  input: "gradients/Neg_grad/Neg"
  input: "gradients/sub_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sub_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/sub_1_grad/Sum"
  input: "gradients/sub_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/sub_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/Neg_grad/Neg"
  input: "gradients/sub_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sub_1_grad/Neg"
  op: "Neg"
  input: "gradients/sub_1_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/sub_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/sub_1_grad/Neg"
  input: "gradients/sub_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sub_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/sub_1_grad/Reshape"
  input: "^gradients/sub_1_grad/Reshape_1"
}
node {
  name: "gradients/sub_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sub_1_grad/Reshape"
  input: "^gradients/sub_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sub_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/sub_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sub_1_grad/Reshape_1"
  input: "^gradients/sub_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sub_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/sub_1_grad/tuple/control_dependency"
  input: "cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sub_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/cond_1/Merge_grad/cond_grad"
}
node {
  name: "gradients/cond_1/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/cond_1/Merge_grad/cond_grad"
  input: "^gradients/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sub_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/cond_1/Merge_grad/cond_grad:1"
  input: "^gradients/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sub_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/sub_1_grad/tuple/control_dependency_1"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sub_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/cond_2/Merge_grad/cond_grad"
}
node {
  name: "gradients/cond_2/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/cond_2/Merge_grad/cond_grad"
  input: "^gradients/cond_2/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sub_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/cond_2/Merge_grad/cond_grad:1"
  input: "^gradients/cond_2/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sub_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/add_3_grad/Shape"
  op: "Shape"
  input: "cond_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_1/add_3_grad/Shape_1"
  op: "Shape"
  input: "cond_1/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_1/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/cond_1/add_3_grad/Shape"
  input: "gradients/cond_1/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/add_3_grad/Sum"
  op: "Sum"
  input: "gradients/cond_1/Merge_grad/tuple/control_dependency"
  input: "gradients/cond_1/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_1/add_3_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_1/add_3_grad/Sum"
  input: "gradients/cond_1/add_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/add_3_grad/Sum_1"
  op: "Sum"
  input: "gradients/cond_1/Merge_grad/tuple/control_dependency"
  input: "gradients/cond_1/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_1/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/cond_1/add_3_grad/Sum_1"
  input: "gradients/cond_1/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/add_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/cond_1/add_3_grad/Reshape"
  input: "^gradients/cond_1/add_3_grad/Reshape_1"
}
node {
  name: "gradients/cond_1/add_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/cond_1/add_3_grad/Reshape"
  input: "^gradients/cond_1/add_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/add_3_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/add_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/cond_1/add_3_grad/Reshape_1"
  input: "^gradients/cond_1/add_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/add_3_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Select_grad/zeros_like"
  op: "ZerosLike"
  input: "cond_1/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Select_grad/Select"
  op: "Select"
  input: "cond_1/LessEqual"
  input: "gradients/cond_1/Merge_grad/tuple/control_dependency_1"
  input: "gradients/cond_1/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Select_grad/Select_1"
  op: "Select"
  input: "cond_1/LessEqual"
  input: "gradients/cond_1/Select_grad/zeros_like"
  input: "gradients/cond_1/Merge_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/cond_1/Select_grad/Select"
  input: "^gradients/cond_1/Select_grad/Select_1"
}
node {
  name: "gradients/cond_1/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/cond_1/Select_grad/Select"
  input: "^gradients/cond_1/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/cond_1/Select_grad/Select_1"
  input: "^gradients/cond_1/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Select_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/Select_1_grad/zeros_like"
  op: "ZerosLike"
  input: "cond_2/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/Select_1_grad/Select"
  op: "Select"
  input: "cond_2/LessEqual_1"
  input: "gradients/cond_2/Merge_grad/tuple/control_dependency"
  input: "gradients/cond_2/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/Select_1_grad/Select_1"
  op: "Select"
  input: "cond_2/LessEqual_1"
  input: "gradients/cond_2/Select_1_grad/zeros_like"
  input: "gradients/cond_2/Merge_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/cond_2/Select_1_grad/Select"
  input: "^gradients/cond_2/Select_1_grad/Select_1"
}
node {
  name: "gradients/cond_2/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/cond_2/Select_1_grad/Select"
  input: "^gradients/cond_2/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/cond_2/Select_1_grad/Select_1"
  input: "^gradients/cond_2/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/Select_grad/zeros_like"
  op: "ZerosLike"
  input: "cond_2/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/Select_grad/Select"
  op: "Select"
  input: "cond_2/LessEqual"
  input: "gradients/cond_2/Merge_grad/tuple/control_dependency_1"
  input: "gradients/cond_2/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/Select_grad/Select_1"
  op: "Select"
  input: "cond_2/LessEqual"
  input: "gradients/cond_2/Select_grad/zeros_like"
  input: "gradients/cond_2/Merge_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/cond_2/Select_grad/Select"
  input: "^gradients/cond_2/Select_grad/Select_1"
}
node {
  name: "gradients/cond_2/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/cond_2/Select_grad/Select"
  input: "^gradients/cond_2/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/cond_2/Select_grad/Select_1"
  input: "^gradients/cond_2/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/Select_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_grad/Shape"
  op: "Shape"
  input: "cond_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_1/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_grad/add"
  op: "Add"
  input: "cond_1/Sum/reduction_indices"
  input: "gradients/cond_1/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_grad/mod"
  op: "FloorMod"
  input: "gradients/cond_1/Sum_grad/add"
  input: "gradients/cond_1/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_grad/range"
  op: "Range"
  input: "gradients/cond_1/Sum_grad/range/start"
  input: "gradients/cond_1/Sum_grad/Size"
  input: "gradients/cond_1/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/cond_1/Sum_grad/Shape_1"
  input: "gradients/cond_1/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_1/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/cond_1/Sum_grad/range"
  input: "gradients/cond_1/Sum_grad/mod"
  input: "gradients/cond_1/Sum_grad/Shape"
  input: "gradients/cond_1/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_grad/Maximum"
  op: "Maximum"
  input: "gradients/cond_1/Sum_grad/DynamicStitch"
  input: "gradients/cond_1/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/cond_1/Sum_grad/Shape"
  input: "gradients/cond_1/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_1/add_3_grad/tuple/control_dependency"
  input: "gradients/cond_1/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/cond_1/Sum_grad/Reshape"
  input: "gradients/cond_1/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_1_grad/Shape"
  op: "Shape"
  input: "cond_1/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_1/Sum_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_1_grad/add"
  op: "Add"
  input: "cond_1/Sum_1/reduction_indices"
  input: "gradients/cond_1/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_1_grad/mod"
  op: "FloorMod"
  input: "gradients/cond_1/Sum_1_grad/add"
  input: "gradients/cond_1/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_1_grad/range"
  op: "Range"
  input: "gradients/cond_1/Sum_1_grad/range/start"
  input: "gradients/cond_1/Sum_1_grad/Size"
  input: "gradients/cond_1/Sum_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_1_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_1_grad/Fill"
  op: "Fill"
  input: "gradients/cond_1/Sum_1_grad/Shape_1"
  input: "gradients/cond_1/Sum_1_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_1/Sum_1_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/cond_1/Sum_1_grad/range"
  input: "gradients/cond_1/Sum_1_grad/mod"
  input: "gradients/cond_1/Sum_1_grad/Shape"
  input: "gradients/cond_1/Sum_1_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_1_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_1_grad/Maximum"
  op: "Maximum"
  input: "gradients/cond_1/Sum_1_grad/DynamicStitch"
  input: "gradients/cond_1/Sum_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_1_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/cond_1/Sum_1_grad/Shape"
  input: "gradients/cond_1/Sum_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_1/add_3_grad/tuple/control_dependency_1"
  input: "gradients/cond_1/Sum_1_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Sum_1_grad/Tile"
  op: "Tile"
  input: "gradients/cond_1/Sum_1_grad/Reshape"
  input: "gradients/cond_1/Sum_1_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/mul_3_grad/Shape"
  op: "Shape"
  input: "cond_1/Reshape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_1/mul_3_grad/Shape_1"
  op: "Shape"
  input: "cond_1/SequenceMask/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_1/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/cond_1/mul_3_grad/Shape"
  input: "gradients/cond_1/mul_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/mul_3_grad/Mul"
  op: "Mul"
  input: "gradients/cond_1/Sum_grad/Tile"
  input: "cond_1/SequenceMask/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/mul_3_grad/Sum"
  op: "Sum"
  input: "gradients/cond_1/mul_3_grad/Mul"
  input: "gradients/cond_1/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_1/mul_3_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_1/mul_3_grad/Sum"
  input: "gradients/cond_1/mul_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/mul_3_grad/Mul_1"
  op: "Mul"
  input: "cond_1/Reshape_3"
  input: "gradients/cond_1/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/mul_3_grad/Sum_1"
  op: "Sum"
  input: "gradients/cond_1/mul_3_grad/Mul_1"
  input: "gradients/cond_1/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_1/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/cond_1/mul_3_grad/Sum_1"
  input: "gradients/cond_1/mul_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/mul_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/cond_1/mul_3_grad/Reshape"
  input: "^gradients/cond_1/mul_3_grad/Reshape_1"
}
node {
  name: "gradients/cond_1/mul_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/cond_1/mul_3_grad/Reshape"
  input: "^gradients/cond_1/mul_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/mul_3_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/mul_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/cond_1/mul_3_grad/Reshape_1"
  input: "^gradients/cond_1/mul_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/mul_3_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/mul_5_grad/Shape"
  op: "Shape"
  input: "cond_1/GatherV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_1/mul_5_grad/Shape_1"
  op: "Shape"
  input: "cond_1/Slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_1/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/cond_1/mul_5_grad/Shape"
  input: "gradients/cond_1/mul_5_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/mul_5_grad/Mul"
  op: "Mul"
  input: "gradients/cond_1/Sum_1_grad/Tile"
  input: "cond_1/Slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/mul_5_grad/Sum"
  op: "Sum"
  input: "gradients/cond_1/mul_5_grad/Mul"
  input: "gradients/cond_1/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_1/mul_5_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_1/mul_5_grad/Sum"
  input: "gradients/cond_1/mul_5_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/mul_5_grad/Mul_1"
  op: "Mul"
  input: "cond_1/GatherV2_1"
  input: "gradients/cond_1/Sum_1_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/mul_5_grad/Sum_1"
  op: "Sum"
  input: "gradients/cond_1/mul_5_grad/Mul_1"
  input: "gradients/cond_1/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_1/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/cond_1/mul_5_grad/Sum_1"
  input: "gradients/cond_1/mul_5_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/mul_5_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/cond_1/mul_5_grad/Reshape"
  input: "^gradients/cond_1/mul_5_grad/Reshape_1"
}
node {
  name: "gradients/cond_1/mul_5_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/cond_1/mul_5_grad/Reshape"
  input: "^gradients/cond_1/mul_5_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/mul_5_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/mul_5_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/cond_1/mul_5_grad/Reshape_1"
  input: "^gradients/cond_1/mul_5_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/mul_5_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherNd_grad/Shape"
  op: "Shape"
  input: "cond_1/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "gradients/cond_1/GatherNd_grad/ScatterNd"
  op: "ScatterNd"
  input: "cond_1/concat"
  input: "gradients/cond_1/Select_grad/tuple/control_dependency_1"
  input: "gradients/cond_1/GatherNd_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/Shape"
  op: "Shape"
  input: "cond_2/ReduceLogSumExp_1/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/Shape_1"
  op: "Shape"
  input: "cond_2/ReduceLogSumExp_1/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/Shape"
  input: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/Sum"
  op: "Sum"
  input: "gradients/cond_2/Select_1_grad/tuple/control_dependency_1"
  input: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/Sum"
  input: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/Sum_1"
  op: "Sum"
  input: "gradients/cond_2/Select_1_grad/tuple/control_dependency_1"
  input: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/Sum_1"
  input: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/cond_2/ReduceLogSumExp_1/Add_grad/Reshape"
  input: "^gradients/cond_2/ReduceLogSumExp_1/Add_grad/Reshape_1"
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/Reshape"
  input: "^gradients/cond_2/ReduceLogSumExp_1/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp_1/Add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/Reshape_1"
  input: "^gradients/cond_2/ReduceLogSumExp_1/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp_1/Add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Add_grad/Shape"
  op: "Shape"
  input: "cond_2/ReduceLogSumExp/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Add_grad/Shape_1"
  op: "Shape"
  input: "cond_2/ReduceLogSumExp/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/cond_2/ReduceLogSumExp/Add_grad/Shape"
  input: "gradients/cond_2/ReduceLogSumExp/Add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Add_grad/Sum"
  op: "Sum"
  input: "gradients/cond_2/Select_grad/tuple/control_dependency_1"
  input: "gradients/cond_2/ReduceLogSumExp/Add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Add_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_2/ReduceLogSumExp/Add_grad/Sum"
  input: "gradients/cond_2/ReduceLogSumExp/Add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Add_grad/Sum_1"
  op: "Sum"
  input: "gradients/cond_2/Select_grad/tuple/control_dependency_1"
  input: "gradients/cond_2/ReduceLogSumExp/Add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/cond_2/ReduceLogSumExp/Add_grad/Sum_1"
  input: "gradients/cond_2/ReduceLogSumExp/Add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/cond_2/ReduceLogSumExp/Add_grad/Reshape"
  input: "^gradients/cond_2/ReduceLogSumExp/Add_grad/Reshape_1"
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/cond_2/ReduceLogSumExp/Add_grad/Reshape"
  input: "^gradients/cond_2/ReduceLogSumExp/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp/Add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/cond_2/ReduceLogSumExp/Add_grad/Reshape_1"
  input: "^gradients/cond_2/ReduceLogSumExp/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp/Add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Reshape_3_grad/Shape"
  op: "Shape"
  input: "cond_1/GatherV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_1/Reshape_3_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_1/mul_3_grad/tuple/control_dependency"
  input: "gradients/cond_1/Reshape_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_1/Reshape_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 1
          }
        }
        int64_val: 36
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_1_grad/ToInt32"
  op: "Cast"
  input: "gradients/cond_1/GatherV2_1_grad/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_1/Reshape_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_1_grad/Size"
  op: "Size"
  input: "cond_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_1_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_1_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients/cond_1/GatherV2_1_grad/Size"
  input: "gradients/cond_1/GatherV2_1_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_1_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_1_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_1_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_1_grad/strided_slice"
  op: "StridedSlice"
  input: "gradients/cond_1/GatherV2_1_grad/ToInt32"
  input: "gradients/cond_1/GatherV2_1_grad/strided_slice/stack"
  input: "gradients/cond_1/GatherV2_1_grad/strided_slice/stack_1"
  input: "gradients/cond_1/GatherV2_1_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_1_grad/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_1_grad/concat"
  op: "ConcatV2"
  input: "gradients/cond_1/GatherV2_1_grad/ExpandDims"
  input: "gradients/cond_1/GatherV2_1_grad/strided_slice"
  input: "gradients/cond_1/GatherV2_1_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_1/mul_5_grad/tuple/control_dependency"
  input: "gradients/cond_1/GatherV2_1_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_1_grad/Reshape_1"
  op: "Reshape"
  input: "cond_1/add_2"
  input: "gradients/cond_1/GatherV2_1_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Squeeze_grad/Shape"
  op: "Shape"
  input: "cond_1/Shape/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_1/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_1/GatherNd_grad/ScatterNd"
  input: "gradients/cond_1/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Reshape_grad/Shape"
  op: "Shape"
  input: "cond_2/ReduceLogSumExp_1/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/tuple/control_dependency_1"
  input: "gradients/cond_2/ReduceLogSumExp_1/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Reshape_grad/Shape"
  op: "Shape"
  input: "cond_2/ReduceLogSumExp/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_2/ReduceLogSumExp/Add_grad/tuple/control_dependency_1"
  input: "gradients/cond_2/ReduceLogSumExp/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_grad/Shape"
  op: "Shape"
  input: "cond_1/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_1/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_grad/ToInt32"
  op: "Cast"
  input: "gradients/cond_1/GatherV2_grad/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_1/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_grad/Size"
  op: "Size"
  input: "cond_1/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients/cond_1/GatherV2_grad/Size"
  input: "gradients/cond_1/GatherV2_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_grad/strided_slice"
  op: "StridedSlice"
  input: "gradients/cond_1/GatherV2_grad/ToInt32"
  input: "gradients/cond_1/GatherV2_grad/strided_slice/stack"
  input: "gradients/cond_1/GatherV2_grad/strided_slice/stack_1"
  input: "gradients/cond_1/GatherV2_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_grad/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_grad/concat"
  op: "ConcatV2"
  input: "gradients/cond_1/GatherV2_grad/ExpandDims"
  input: "gradients/cond_1/GatherV2_grad/strided_slice"
  input: "gradients/cond_1/GatherV2_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_1/Reshape_3_grad/Reshape"
  input: "gradients/cond_1/GatherV2_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherV2_grad/Reshape_1"
  op: "Reshape"
  input: "cond_1/Reshape_2"
  input: "gradients/cond_1/GatherV2_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Reshape_4_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\006\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/cond_1/Reshape_4_grad/Reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/cond_1/Reshape_4_grad/Reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_1/Reshape_4_grad/Reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_1/Reshape_4_grad/Reshape/strided_slice"
  op: "StridedSlice"
  input: "gradients/cond_1/GatherV2_1_grad/ToInt32"
  input: "gradients/cond_1/Reshape_4_grad/Reshape/strided_slice/stack"
  input: "gradients/cond_1/Reshape_4_grad/Reshape/strided_slice/stack_1"
  input: "gradients/cond_1/Reshape_4_grad/Reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/cond_1/Reshape_4_grad/Reshape/tensor"
  op: "UnsortedSegmentSum"
  input: "gradients/cond_1/GatherV2_1_grad/Reshape"
  input: "gradients/cond_1/GatherV2_1_grad/Reshape_1"
  input: "gradients/cond_1/Reshape_4_grad/Reshape/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 36
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Reshape_4_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_1/Reshape_4_grad/Reshape/tensor"
  input: "gradients/cond_1/Reshape_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_2"
  op: "Switch"
  input: "dense/BiasAdd"
  input: "cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Identity"
  op: "Identity"
  input: "gradients/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Shape_1"
  op: "Shape"
  input: "gradients/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros/Const"
  op: "Const"
  input: "^gradients/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros"
  op: "Fill"
  input: "gradients/Shape_1"
  input: "gradients/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_1/Shape/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros"
  input: "gradients/cond_1/Squeeze_grad/Reshape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Reshape_1_grad/Shape"
  op: "Shape"
  input: "cond_1/Shape_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_1/Reshape_1_grad/Reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/cond_1/Reshape_1_grad/Reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_1/Reshape_1_grad/Reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_1/Reshape_1_grad/Reshape/strided_slice"
  op: "StridedSlice"
  input: "gradients/cond_1/GatherV2_grad/ToInt32"
  input: "gradients/cond_1/Reshape_1_grad/Reshape/strided_slice/stack"
  input: "gradients/cond_1/Reshape_1_grad/Reshape/strided_slice/stack_1"
  input: "gradients/cond_1/Reshape_1_grad/Reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/cond_1/Reshape_1_grad/Reshape/tensor"
  op: "UnsortedSegmentSum"
  input: "gradients/cond_1/GatherV2_grad/Reshape"
  input: "gradients/cond_1/GatherV2_grad/Reshape_1"
  input: "gradients/cond_1/Reshape_1_grad/Reshape/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_1/Reshape_1_grad/Reshape/tensor"
  input: "gradients/cond_1/Reshape_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_3"
  op: "Switch"
  input: "crf/read"
  input: "cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Identity_1"
  op: "Identity"
  input: "gradients/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Shape_2"
  op: "Shape"
  input: "gradients/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_1/Const"
  op: "Const"
  input: "^gradients/Identity_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_1"
  op: "Fill"
  input: "gradients/Shape_2"
  input: "gradients/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_1/Reshape_4/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/cond_1/Reshape_4_grad/Reshape"
  input: "gradients/zeros_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "cond_2/ReduceLogSumExp_1/Sum"
  input: "^gradients/cond_2/ReduceLogSumExp_1/Add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Log_grad/mul"
  op: "Mul"
  input: "gradients/cond_2/ReduceLogSumExp_1/Add_grad/tuple/control_dependency"
  input: "gradients/cond_2/ReduceLogSumExp_1/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "cond_2/ReduceLogSumExp/Sum"
  input: "^gradients/cond_2/ReduceLogSumExp/Add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Log_grad/mul"
  op: "Mul"
  input: "gradients/cond_2/ReduceLogSumExp/Add_grad/tuple/control_dependency"
  input: "gradients/cond_2/ReduceLogSumExp/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_4"
  op: "Switch"
  input: "dense/BiasAdd"
  input: "cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Identity_2"
  op: "Identity"
  input: "gradients/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Shape_3"
  op: "Shape"
  input: "gradients/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_2/Const"
  op: "Const"
  input: "^gradients/Identity_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_2"
  op: "Fill"
  input: "gradients/Shape_3"
  input: "gradients/zeros_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_1/Shape_1/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/cond_1/Reshape_1_grad/Reshape"
  input: "gradients/zeros_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Shape"
  op: "Shape"
  input: "cond_2/ReduceLogSumExp_1/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/add"
  op: "Add"
  input: "cond_2/ReduceLogSumExp_1/Sum/reduction_indices"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/mod"
  op: "FloorMod"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/add"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/range"
  op: "Range"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/range/start"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Size"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Shape_1"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/range"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/mod"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Shape"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Maximum"
  op: "Maximum"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/DynamicStitch"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Shape"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_2/ReduceLogSumExp_1/Log_grad/mul"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Reshape"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sum_grad/Shape"
  op: "Shape"
  input: "cond_2/ReduceLogSumExp/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sum_grad/add"
  op: "Add"
  input: "cond_2/ReduceLogSumExp/Sum/reduction_indices"
  input: "gradients/cond_2/ReduceLogSumExp/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sum_grad/mod"
  op: "FloorMod"
  input: "gradients/cond_2/ReduceLogSumExp/Sum_grad/add"
  input: "gradients/cond_2/ReduceLogSumExp/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sum_grad/range"
  op: "Range"
  input: "gradients/cond_2/ReduceLogSumExp/Sum_grad/range/start"
  input: "gradients/cond_2/ReduceLogSumExp/Sum_grad/Size"
  input: "gradients/cond_2/ReduceLogSumExp/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/cond_2/ReduceLogSumExp/Sum_grad/Shape_1"
  input: "gradients/cond_2/ReduceLogSumExp/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/cond_2/ReduceLogSumExp/Sum_grad/range"
  input: "gradients/cond_2/ReduceLogSumExp/Sum_grad/mod"
  input: "gradients/cond_2/ReduceLogSumExp/Sum_grad/Shape"
  input: "gradients/cond_2/ReduceLogSumExp/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sum_grad/Maximum"
  op: "Maximum"
  input: "gradients/cond_2/ReduceLogSumExp/Sum_grad/DynamicStitch"
  input: "gradients/cond_2/ReduceLogSumExp/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/cond_2/ReduceLogSumExp/Sum_grad/Shape"
  input: "gradients/cond_2/ReduceLogSumExp/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_2/ReduceLogSumExp/Log_grad/mul"
  input: "gradients/cond_2/ReduceLogSumExp/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/cond_2/ReduceLogSumExp/Sum_grad/Reshape"
  input: "gradients/cond_2/ReduceLogSumExp/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Exp_grad/mul"
  op: "Mul"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sum_grad/Tile"
  input: "cond_2/ReduceLogSumExp_1/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Exp_grad/mul"
  op: "Mul"
  input: "gradients/cond_2/ReduceLogSumExp/Sum_grad/Tile"
  input: "cond_2/ReduceLogSumExp/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/Shape"
  op: "Shape"
  input: "cond_2/rnn/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/Shape_1"
  op: "Shape"
  input: "cond_2/ReduceLogSumExp_1/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/Shape"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/Sum"
  op: "Sum"
  input: "gradients/cond_2/ReduceLogSumExp_1/Exp_grad/mul"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/Sum"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/cond_2/ReduceLogSumExp_1/Exp_grad/mul"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/Neg"
  op: "Neg"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/Neg"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/cond_2/ReduceLogSumExp_1/Sub_grad/Reshape"
  input: "^gradients/cond_2/ReduceLogSumExp_1/Sub_grad/Reshape_1"
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/Reshape"
  input: "^gradients/cond_2/ReduceLogSumExp_1/Sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp_1/Sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/Reshape_1"
  input: "^gradients/cond_2/ReduceLogSumExp_1/Sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp_1/Sub_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sub_grad/Shape"
  op: "Shape"
  input: "cond_2/ReduceLogSumExp/Max/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sub_grad/Shape_1"
  op: "Shape"
  input: "cond_2/ReduceLogSumExp/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/cond_2/ReduceLogSumExp/Sub_grad/Shape"
  input: "gradients/cond_2/ReduceLogSumExp/Sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sub_grad/Sum"
  op: "Sum"
  input: "gradients/cond_2/ReduceLogSumExp/Exp_grad/mul"
  input: "gradients/cond_2/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_2/ReduceLogSumExp/Sub_grad/Sum"
  input: "gradients/cond_2/ReduceLogSumExp/Sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/cond_2/ReduceLogSumExp/Exp_grad/mul"
  input: "gradients/cond_2/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sub_grad/Neg"
  op: "Neg"
  input: "gradients/cond_2/ReduceLogSumExp/Sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/cond_2/ReduceLogSumExp/Sub_grad/Neg"
  input: "gradients/cond_2/ReduceLogSumExp/Sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/cond_2/ReduceLogSumExp/Sub_grad/Reshape"
  input: "^gradients/cond_2/ReduceLogSumExp/Sub_grad/Reshape_1"
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/cond_2/ReduceLogSumExp/Sub_grad/Reshape"
  input: "^gradients/cond_2/ReduceLogSumExp/Sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp/Sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/cond_2/ReduceLogSumExp/Sub_grad/Reshape_1"
  input: "^gradients/cond_2/ReduceLogSumExp/Sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp/Sub_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN"
  op: "AddN"
  input: "gradients/cond_2/ReduceLogSumExp_1/Reshape_grad/Reshape"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp_1/Reshape_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_1"
  op: "AddN"
  input: "gradients/cond_2/ReduceLogSumExp/Reshape_grad/Reshape"
  input: "gradients/cond_2/ReduceLogSumExp/Sub_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp/Reshape_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "gradients/cond_2/ReduceLogSumExp_1/Sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Switch_5"
  op: "Switch"
  input: "Squeeze"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Identity_3"
  op: "Identity"
  input: "gradients/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Shape_4"
  op: "Shape"
  input: "gradients/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_4/Const"
  op: "Const"
  input: "^gradients/Identity_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_4"
  op: "Fill"
  input: "gradients/Shape_4"
  input: "gradients/zeros_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/ReduceLogSumExp/Max/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_4"
  input: "gradients/cond_2/ReduceLogSumExp/Sub_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "gradients/cond_2/rnn/while/Exit_3_grad/b_exit"
  input: "gradients/cond_2/rnn/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/Switch_4_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/cond_2/rnn/while/Merge_3_grad/Switch"
}
node {
  name: "gradients/cond_2/rnn/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/cond_2/rnn/while/Merge_3_grad/Switch"
  input: "^gradients/cond_2/rnn/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/cond_2/rnn/while/Merge_3_grad/Switch:1"
  input: "^gradients/cond_2/rnn/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "gradients/cond_2/rnn/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_6"
  op: "Switch"
  input: "Squeeze"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Identity_4"
  op: "Identity"
  input: "gradients/Switch_6:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Shape_5"
  op: "Shape"
  input: "gradients/Switch_6:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_5/Const"
  op: "Const"
  input: "^gradients/Identity_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_5"
  op: "Fill"
  input: "gradients/Shape_5"
  input: "gradients/zeros_5/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/cond_2/rnn/while/Enter_3_grad/Exit"
  input: "gradients/zeros_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like"
  op: "ZerosLike"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/f_acc"
  op: "StackV2"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/f_acc"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/StackPushV2"
  op: "StackPushV2"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Enter"
  input: "cond_2/rnn/while/Identity_3"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch_1"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch_1/Enter"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch_1/Enter_1"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch_1/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch_1/Enter_1"
  op: "Enter"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/StackPopV2"
  op: "StackPopV2"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/b_sync"
  op: "ControlTrigger"
  input: "^gradients/cond_2/rnn/while/ExpandDims_grad/Reshape/StackPopV2"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Exp_grad/mul/StackPopV2"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/StackPopV2"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Reshape/StackPopV2"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/StackPopV2"
  input: "^gradients/cond_2/rnn/while/Select_1_grad/Select/StackPopV2"
  input: "^gradients/cond_2/rnn/while/Select_1_grad/zeros_like/StackPopV2"
  input: "^gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  input: "^gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/Select"
  op: "Select"
  input: "gradients/cond_2/rnn/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/cond_2/rnn/while/Merge_3_grad/tuple/control_dependency_1"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/Select/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/Select/f_acc"
  op: "StackV2"
  input: "gradients/cond_2/rnn/while/Select_1_grad/Select/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/Select/Switch"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/Select_1_grad/Select/f_acc"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/Select/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/Select_1_grad/Select/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "gradients/cond_2/rnn/while/Select_1_grad/Select/Enter"
  input: "cond_2/rnn/while/GreaterEqual"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/Select/Switch_1"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/Select_1_grad/Select/Switch_1/Enter"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch_1/Enter_1"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/Select/Switch_1/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/Select_1_grad/Select/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "gradients/cond_2/rnn/while/Select_1_grad/Select/Switch_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/Select_1"
  op: "Select"
  input: "gradients/cond_2/rnn/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like"
  input: "gradients/cond_2/rnn/while/Merge_3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/cond_2/rnn/while/Select_1_grad/Select"
  input: "^gradients/cond_2/rnn/while/Select_1_grad/Select_1"
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/cond_2/rnn/while/Select_1_grad/Select"
  input: "^gradients/cond_2/rnn/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/cond_2/rnn/while/Select_1_grad/Select_1"
  input: "^gradients/cond_2/rnn/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_2"
  op: "AddN"
  input: "gradients/cond_2/ReduceLogSumExp/Max/Switch_grad/cond_grad"
  input: "gradients/cond_2/rnn/while/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/ReduceLogSumExp/Max/Switch_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Squeeze_grad/Shape"
  op: "Shape"
  input: "Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "gradients/AddN_2"
  input: "gradients/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/Shape"
  op: "Shape"
  input: "cond_2/rnn/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/Shape_1"
  op: "Shape"
  input: "cond_2/rnn/while/ReduceLogSumExp/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/add_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/add_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Switch"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/f_acc"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/add_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Enter"
  input: "gradients/cond_2/rnn/while/add_2_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Switch_1"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Switch_1/Enter"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch_1/Enter_1"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/add_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Switch_1/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/add_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Switch_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/add_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/add_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Switch_2"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/add_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/cond_2/rnn/while/add_2_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Switch_3"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Switch_3/Enter"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch_1/Enter_1"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/add_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Switch_3/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/add_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/Switch_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/Sum"
  op: "Sum"
  input: "gradients/cond_2/rnn/while/Select_1_grad/tuple/control_dependency_1"
  input: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_2/rnn/while/add_2_grad/Sum"
  input: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/cond_2/rnn/while/Select_1_grad/tuple/control_dependency_1"
  input: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/cond_2/rnn/while/add_2_grad/Sum_1"
  input: "gradients/cond_2/rnn/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/cond_2/rnn/while/add_2_grad/Reshape"
  input: "^gradients/cond_2/rnn/while/add_2_grad/Reshape_1"
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/cond_2/rnn/while/add_2_grad/Reshape"
  input: "^gradients/cond_2/rnn/while/add_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/add_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/cond_2/rnn/while/add_2_grad/Reshape_1"
  input: "^gradients/cond_2/rnn/while/add_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/add_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Slice_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/Slice_grad/Shape"
  op: "Shape"
  input: "Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Slice_grad/stack/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Slice_grad/stack"
  op: "Pack"
  input: "gradients/Slice_grad/Rank"
  input: "gradients/Slice_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/Slice_grad/Reshape"
  op: "Reshape"
  input: "Slice/begin"
  input: "gradients/Slice_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Slice_grad/Shape_1"
  op: "Shape"
  input: "dense/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Slice_grad/sub"
  op: "Sub"
  input: "gradients/Slice_grad/Shape_1"
  input: "gradients/Slice_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Slice_grad/sub_1"
  op: "Sub"
  input: "gradients/Slice_grad/sub"
  input: "Slice/begin"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Slice_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/Slice_grad/sub_1"
  input: "gradients/Slice_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Slice_grad/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Slice_grad/concat"
  op: "ConcatV2"
  input: "gradients/Slice_grad/Reshape"
  input: "gradients/Slice_grad/Reshape_1"
  input: "gradients/Slice_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Slice_grad/Pad"
  op: "Pad"
  input: "gradients/Squeeze_grad/Reshape"
  input: "gradients/Slice_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "cond_2/rnn/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "cond_2/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  input: "gradients/cond_2/rnn/while/add_2_grad/tuple/control_dependency"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  op: "StackV2"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Switch"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPushV2"
  op: "StackPushV2"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "cond_2/rnn/while/Identity_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Switch_1"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Switch_1/Enter"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch_1/Enter_1"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Switch_1/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  op: "StackPopV2"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Switch_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Shape"
  op: "Shape"
  input: "cond_2/rnn/while/ReduceLogSumExp/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Shape_1"
  op: "Shape"
  input: "cond_2/rnn/while/ReduceLogSumExp/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Switch"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/f_acc"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Enter"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Switch_1"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Switch_1/Enter"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch_1/Enter_1"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Switch_1/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Switch_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Switch_2"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/f_acc_1"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Switch_3"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Switch_3/Enter"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch_1/Enter_1"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Switch_3/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/Switch_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Sum"
  op: "Sum"
  input: "gradients/cond_2/rnn/while/add_2_grad/tuple/control_dependency_1"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Sum"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Sum_1"
  op: "Sum"
  input: "gradients/cond_2/rnn/while/add_2_grad/tuple/control_dependency_1"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Sum_1"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Reshape"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Reshape_1"
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Reshape"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Reshape_1"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Shape"
  op: "Shape"
  input: "cond_2/rnn/while/ReduceLogSumExp/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/tuple/control_dependency_1"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Reshape/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Reshape/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Reshape/f_acc"
  op: "StackV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Reshape/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Reshape/Switch"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Reshape/f_acc"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Reshape/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Reshape/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Reshape/StackPushV2"
  op: "StackPushV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Reshape/Enter"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Reshape/Switch_1"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Reshape/Switch_1/Enter"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch_1/Enter_1"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Reshape/Switch_1/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Reshape/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Reshape/StackPopV2"
  op: "StackPopV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Reshape/Switch_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "cond_2/rnn/TensorArray_1"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/cond_2/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/cond_2/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "gradients/cond_2/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "cond_2/rnn/TensorArrayUnstack/range"
  input: "gradients/cond_2/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/cond_2/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^gradients/cond_2/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
}
node {
  name: "gradients/cond_2/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/cond_2/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^gradients/cond_2/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/cond_2/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/cond_2/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "cond_2/rnn/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/cond_2/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  input: "gradients/cond_2/rnn/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/StackPopV2"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/ReduceLogSumExp/Sum"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/f_acc"
  op: "StackV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/ReduceLogSumExp/Sum"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/Switch"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/f_acc"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/ReduceLogSumExp/Sum"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/StackPushV2"
  op: "StackPushV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/Enter"
  input: "cond_2/rnn/while/ReduceLogSumExp/Sum"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/Switch_1"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/Switch_1/Enter"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch_1/Enter_1"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/ReduceLogSumExp/Sum"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/Switch_1/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/ReduceLogSumExp/Sum"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/StackPopV2"
  op: "StackPopV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/Switch_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/mul"
  op: "Mul"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Add_grad/tuple/control_dependency"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/Slice_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/cond_2/Slice_grad/Shape"
  op: "Shape"
  input: "cond_2/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/Slice_grad/stack/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_2/Slice_grad/stack"
  op: "Pack"
  input: "gradients/cond_2/Slice_grad/Rank"
  input: "gradients/cond_2/Slice_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/cond_2/Slice_grad/Reshape"
  op: "Reshape"
  input: "cond_2/Slice/begin"
  input: "gradients/cond_2/Slice_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/Slice_grad/Shape_1"
  op: "Shape"
  input: "cond_2/Slice/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/Slice_grad/sub"
  op: "Sub"
  input: "gradients/cond_2/Slice_grad/Shape_1"
  input: "gradients/cond_2/Slice_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/Slice_grad/sub_1"
  op: "Sub"
  input: "gradients/cond_2/Slice_grad/sub"
  input: "cond_2/Slice/begin"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/Slice_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/cond_2/Slice_grad/sub_1"
  input: "gradients/cond_2/Slice_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/Slice_grad/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_2/Slice_grad/concat"
  op: "ConcatV2"
  input: "gradients/cond_2/Slice_grad/Reshape"
  input: "gradients/cond_2/Slice_grad/Reshape_1"
  input: "gradients/cond_2/Slice_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/Slice_grad/Pad"
  op: "Pad"
  input: "gradients/cond_2/rnn/transpose_grad/transpose"
  input: "gradients/cond_2/Slice_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
  op: "Shape"
  input: "cond_2/rnn/while/ReduceLogSumExp/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Size"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/add"
  op: "Add"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/add/Const"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/add/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/mod"
  op: "FloorMod"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/add"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/range/start"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/range/delta"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/range"
  op: "Range"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/range/start"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Size"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Fill/value"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape_1"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/range"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/mod"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/StackPopV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/f_acc"
  op: "StackV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/Switch"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/f_acc"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/StackPushV2"
  op: "StackPushV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/Enter"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/Switch_1"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/Switch_1/Enter"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch_1/Enter_1"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/Switch_1/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/StackPopV2"
  op: "StackPopV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/Switch_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Maximum/y"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Maximum"
  op: "Maximum"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/StackPopV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Log_grad/mul"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Reshape"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_7"
  op: "Switch"
  input: "dense/BiasAdd"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Identity_5"
  op: "Identity"
  input: "gradients/Switch_7:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Shape_6"
  op: "Shape"
  input: "gradients/Switch_7:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_6/Const"
  op: "Const"
  input: "^gradients/Identity_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_6"
  op: "Fill"
  input: "gradients/Shape_6"
  input: "gradients/zeros_6/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/Slice/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/cond_2/Slice_grad/Pad"
  input: "gradients/zeros_6"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Exp_grad/mul"
  op: "Mul"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sum_grad/Tile"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Exp_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Exp_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/ReduceLogSumExp/Exp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Exp_grad/mul/f_acc"
  op: "StackV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Exp_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/ReduceLogSumExp/Exp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Exp_grad/mul/Switch"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Exp_grad/mul/f_acc"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/ReduceLogSumExp/Exp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Exp_grad/mul/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Exp_grad/mul/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Exp_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Exp_grad/mul/Enter"
  input: "cond_2/rnn/while/ReduceLogSumExp/Exp"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Exp_grad/mul/Switch_1"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Exp_grad/mul/Switch_1/Enter"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch_1/Enter_1"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/ReduceLogSumExp/Exp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Exp_grad/mul/Switch_1/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Exp_grad/mul/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cond_2/rnn/while/ReduceLogSumExp/Exp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Exp_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Exp_grad/mul/Switch_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_3"
  op: "AddN"
  input: "gradients/cond_1/Shape/Switch_grad/cond_grad"
  input: "gradients/cond_1/Shape_1/Switch_grad/cond_grad"
  input: "gradients/Slice_grad/Pad"
  input: "gradients/cond_2/Slice/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Shape/Switch_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/AddN_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/dense/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/AddN_3"
  input: "^gradients/dense/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/dense/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/AddN_3"
  input: "^gradients/dense/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Shape/Switch_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/dense/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/dense/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Shape"
  op: "Shape"
  input: "cond_2/rnn/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Shape_1"
  op: "Shape"
  input: "cond_2/rnn/while/ReduceLogSumExp/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Switch"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/f_acc"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Enter"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Switch_1"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Switch_1/Enter"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch_1/Enter_1"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Switch_1/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Switch_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Switch_2"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/f_acc_1"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Switch_3"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Switch_3/Enter"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch_1/Enter_1"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Switch_3/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/Switch_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Sum"
  op: "Sum"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Exp_grad/mul"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Sum"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Exp_grad/mul"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Neg"
  op: "Neg"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Neg"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Reshape"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Reshape_1"
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Reshape"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Reshape_1"
  input: "^gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/Tensordot_grad/Shape"
  op: "Shape"
  input: "dense/Tensordot/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/dense/Tensordot_grad/Reshape"
  op: "Reshape"
  input: "gradients/dense/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/dense/Tensordot_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_4"
  op: "AddN"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Reshape"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ReduceLogSumExp/Reshape_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/Tensordot/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/dense/Tensordot_grad/Reshape"
  input: "dense/Tensordot/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/dense/Tensordot/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dense/Tensordot/Reshape"
  input: "gradients/dense/Tensordot_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/dense/Tensordot/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/dense/Tensordot/MatMul_grad/MatMul"
  input: "^gradients/dense/Tensordot/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/dense/Tensordot/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/dense/Tensordot/MatMul_grad/MatMul"
  input: "^gradients/dense/Tensordot/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense/Tensordot/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/Tensordot/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/dense/Tensordot/MatMul_grad/MatMul_1"
  input: "^gradients/dense/Tensordot/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense/Tensordot/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/Tensordot/Reshape_grad/Shape"
  op: "Shape"
  input: "dense/Tensordot/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/dense/Tensordot/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/dense/Tensordot/MatMul_grad/tuple/control_dependency"
  input: "gradients/dense/Tensordot/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/Tensordot/Reshape_1_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\310\000\000\000\006\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/dense/Tensordot/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/dense/Tensordot/MatMul_grad/tuple/control_dependency_1"
  input: "gradients/dense/Tensordot/Reshape_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/Tensordot/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "dense/Tensordot/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/Tensordot/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/dense/Tensordot/Reshape_grad/Reshape"
  input: "gradients/dense/Tensordot/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/Tensordot/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "dense/Tensordot/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/Tensordot/transpose_1_grad/transpose"
  op: "Transpose"
  input: "gradients/dense/Tensordot/Reshape_1_grad/Reshape"
  input: "gradients/dense/Tensordot/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/mul_grad/Shape"
  op: "Shape"
  input: "dropout_2/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/mul_grad/Shape_1"
  op: "Shape"
  input: "dropout_2/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/dropout_2/dropout/mul_grad/Shape"
  input: "gradients/dropout_2/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/mul_grad/Mul"
  op: "Mul"
  input: "gradients/dense/Tensordot/transpose_grad/transpose"
  input: "dropout_2/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/mul_grad/Sum"
  op: "Sum"
  input: "gradients/dropout_2/dropout/mul_grad/Mul"
  input: "gradients/dropout_2/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/dropout_2/dropout/mul_grad/Sum"
  input: "gradients/dropout_2/dropout/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/mul_grad/Mul_1"
  op: "Mul"
  input: "dropout_2/dropout/truediv"
  input: "gradients/dense/Tensordot/transpose_grad/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/dropout_2/dropout/mul_grad/Mul_1"
  input: "gradients/dropout_2/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/dropout_2/dropout/mul_grad/Sum_1"
  input: "gradients/dropout_2/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/dropout_2/dropout/mul_grad/Reshape"
  input: "^gradients/dropout_2/dropout/mul_grad/Reshape_1"
}
node {
  name: "gradients/dropout_2/dropout/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/dropout_2/dropout/mul_grad/Reshape"
  input: "^gradients/dropout_2/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dropout_2/dropout/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/dropout_2/dropout/mul_grad/Reshape_1"
  input: "^gradients/dropout_2/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dropout_2/dropout/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1_grad/Shape"
  op: "Shape"
  input: "cond_2/rnn/while/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\006\000\000\000\006\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/cond_2/rnn/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs/Switch"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs/f_acc"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs/Enter"
  input: "gradients/cond_2/rnn/while/add_1_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs/Switch_1"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs/Switch_1/Enter"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch_1/Enter_1"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs/Switch_1/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs/Switch_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1_grad/Sum"
  op: "Sum"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/tuple/control_dependency"
  input: "gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_2/rnn/while/add_1_grad/Sum"
  input: "gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/cond_2/rnn/while/ReduceLogSumExp/Sub_grad/tuple/control_dependency"
  input: "gradients/cond_2/rnn/while/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/cond_2/rnn/while/add_1_grad/Sum_1"
  input: "gradients/cond_2/rnn/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/cond_2/rnn/while/add_1_grad/Reshape"
  input: "^gradients/cond_2/rnn/while/add_1_grad/Reshape_1"
}
node {
  name: "gradients/cond_2/rnn/while/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/cond_2/rnn/while/add_1_grad/Reshape"
  input: "^gradients/cond_2/rnn/while/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/cond_2/rnn/while/add_1_grad/Reshape_1"
  input: "^gradients/cond_2/rnn/while/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/truediv_grad/Shape"
  op: "Shape"
  input: "transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/truediv_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/dropout_2/dropout/truediv_grad/Shape"
  input: "gradients/dropout_2/dropout/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/dropout_2/dropout/mul_grad/tuple/control_dependency"
  input: "dropout_2/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/truediv_grad/Sum"
  op: "Sum"
  input: "gradients/dropout_2/dropout/truediv_grad/RealDiv"
  input: "gradients/dropout_2/dropout/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/truediv_grad/Reshape"
  op: "Reshape"
  input: "gradients/dropout_2/dropout/truediv_grad/Sum"
  input: "gradients/dropout_2/dropout/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/truediv_grad/Neg"
  op: "Neg"
  input: "transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/dropout_2/dropout/truediv_grad/Neg"
  input: "dropout_2/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/dropout_2/dropout/truediv_grad/RealDiv_1"
  input: "dropout_2/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/truediv_grad/mul"
  op: "Mul"
  input: "gradients/dropout_2/dropout/mul_grad/tuple/control_dependency"
  input: "gradients/dropout_2/dropout/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/truediv_grad/Sum_1"
  op: "Sum"
  input: "gradients/dropout_2/dropout/truediv_grad/mul"
  input: "gradients/dropout_2/dropout/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/dropout_2/dropout/truediv_grad/Sum_1"
  input: "gradients/dropout_2/dropout/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/truediv_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/dropout_2/dropout/truediv_grad/Reshape"
  input: "^gradients/dropout_2/dropout/truediv_grad/Reshape_1"
}
node {
  name: "gradients/dropout_2/dropout/truediv_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/dropout_2/dropout/truediv_grad/Reshape"
  input: "^gradients/dropout_2/dropout/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dropout_2/dropout/truediv_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/truediv_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/dropout_2/dropout/truediv_grad/Reshape_1"
  input: "^gradients/dropout_2/dropout/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dropout_2/dropout/truediv_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ExpandDims_grad/Shape"
  op: "Shape"
  input: "cond_2/rnn/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_2/rnn/while/add_1_grad/tuple/control_dependency"
  input: "gradients/cond_2/rnn/while/ExpandDims_grad/Reshape/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ExpandDims_grad/Reshape/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ExpandDims_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ExpandDims_grad/Reshape/f_acc"
  op: "StackV2"
  input: "gradients/cond_2/rnn/while/ExpandDims_grad/Reshape/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ExpandDims_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ExpandDims_grad/Reshape/Switch"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/ExpandDims_grad/Reshape/f_acc"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ExpandDims_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ExpandDims_grad/Reshape/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/ExpandDims_grad/Reshape/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ExpandDims_grad/Reshape/StackPushV2"
  op: "StackPushV2"
  input: "gradients/cond_2/rnn/while/ExpandDims_grad/Reshape/Enter"
  input: "gradients/cond_2/rnn/while/ExpandDims_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ExpandDims_grad/Reshape/Switch_1"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/ExpandDims_grad/Reshape/Switch_1/Enter"
  input: "gradients/cond_2/rnn/while/Select_1_grad/zeros_like/Switch_1/Enter_1"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ExpandDims_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ExpandDims_grad/Reshape/Switch_1/Enter"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/ExpandDims_grad/Reshape/Switch"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/ExpandDims_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/ExpandDims_grad/Reshape/StackPopV2"
  op: "StackPopV2"
  input: "gradients/cond_2/rnn/while/ExpandDims_grad/Reshape/Switch_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1/Enter_grad/b_acc"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/cond_2/rnn/while/add_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/cond_2/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/cond_2/rnn/while/add_1/Enter_grad/b_acc_1"
  input: "gradients/cond_2/rnn/while/add_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/cond_2/rnn/while/add_1/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
        shape {
          dim {
            size: 1
          }
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1/Enter_grad/Add"
  op: "Add"
  input: "gradients/cond_2/rnn/while/add_1/Enter_grad/Switch:1"
  input: "gradients/cond_2/rnn/while/add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/cond_2/rnn/while/add_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/add_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/cond_2/rnn/while/add_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/transpose_1_grad/transpose"
  op: "Transpose"
  input: "gradients/dropout_2/dropout/truediv_grad/tuple/control_dependency"
  input: "gradients/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_5"
  op: "AddN"
  input: "gradients/cond_2/rnn/while/Select_1_grad/tuple/control_dependency"
  input: "gradients/cond_2/rnn/while/ExpandDims_grad/Reshape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_2/rnn/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/ExpandDims_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\006\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/cond_2/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_2/rnn/while/add_1/Enter_grad/b_acc_3"
  input: "gradients/cond_2/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/concat_1_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/concat_1_grad/mod"
  op: "FloorMod"
  input: "concat_1/axis"
  input: "gradients/concat_1_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/concat_1_grad/Shape"
  op: "Shape"
  input: "lstm_fused_cell/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/concat_1_grad/ShapeN"
  op: "ShapeN"
  input: "lstm_fused_cell/mul"
  input: "ReverseSequence_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/concat_1_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/concat_1_grad/mod"
  input: "gradients/concat_1_grad/ShapeN"
  input: "gradients/concat_1_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/concat_1_grad/Slice"
  op: "Slice"
  input: "gradients/transpose_1_grad/transpose"
  input: "gradients/concat_1_grad/ConcatOffset"
  input: "gradients/concat_1_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/concat_1_grad/Slice_1"
  op: "Slice"
  input: "gradients/transpose_1_grad/transpose"
  input: "gradients/concat_1_grad/ConcatOffset:1"
  input: "gradients/concat_1_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/concat_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/concat_1_grad/Slice"
  input: "^gradients/concat_1_grad/Slice_1"
}
node {
  name: "gradients/concat_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/concat_1_grad/Slice"
  input: "^gradients/concat_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/concat_1_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/concat_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/concat_1_grad/Slice_1"
  input: "^gradients/concat_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/concat_1_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_2/rnn/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_8"
  op: "Switch"
  input: "crf/read"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Identity_6"
  op: "Identity"
  input: "gradients/Switch_8:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Shape_7"
  op: "Shape"
  input: "gradients/Switch_8:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_7/Const"
  op: "Const"
  input: "^gradients/Identity_6"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_7"
  op: "Fill"
  input: "gradients/Shape_7"
  input: "gradients/zeros_7/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_2/ExpandDims/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/cond_2/ExpandDims_grad/Reshape"
  input: "gradients/zeros_7"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell/mul_grad/Shape"
  op: "Shape"
  input: "lstm_fused_cell/BlockLSTM:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_fused_cell/mul_grad/Shape_1"
  op: "Shape"
  input: "lstm_fused_cell/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_fused_cell/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_fused_cell/mul_grad/Shape"
  input: "gradients/lstm_fused_cell/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell/mul_grad/Mul"
  op: "Mul"
  input: "gradients/concat_1_grad/tuple/control_dependency"
  input: "lstm_fused_cell/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell/mul_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_fused_cell/mul_grad/Mul"
  input: "gradients/lstm_fused_cell/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_fused_cell/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_fused_cell/mul_grad/Sum"
  input: "gradients/lstm_fused_cell/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell/mul_grad/Mul_1"
  op: "Mul"
  input: "lstm_fused_cell/BlockLSTM:6"
  input: "gradients/concat_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_fused_cell/mul_grad/Mul_1"
  input: "gradients/lstm_fused_cell/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_fused_cell/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_fused_cell/mul_grad/Sum_1"
  input: "gradients/lstm_fused_cell/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_fused_cell/mul_grad/Reshape"
  input: "^gradients/lstm_fused_cell/mul_grad/Reshape_1"
}
node {
  name: "gradients/lstm_fused_cell/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_fused_cell/mul_grad/Reshape"
  input: "^gradients/lstm_fused_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_fused_cell/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_fused_cell/mul_grad/Reshape_1"
  input: "^gradients/lstm_fused_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_fused_cell/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/ReverseSequence_1_grad/ReverseSequence"
  op: "ReverseSequence"
  input: "gradients/concat_1_grad/tuple/control_dependency_1"
  input: "IteratorGetNext:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 1
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/AddN_6"
  op: "AddN"
  input: "gradients/cond_1/Reshape_4/Switch_grad/cond_grad"
  input: "gradients/cond_2/ExpandDims/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/Reshape_4/Switch_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like"
  op: "ZerosLike"
  input: "lstm_fused_cell/BlockLSTM"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_1"
  op: "ZerosLike"
  input: "lstm_fused_cell/BlockLSTM:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_2"
  op: "ZerosLike"
  input: "lstm_fused_cell/BlockLSTM:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_3"
  op: "ZerosLike"
  input: "lstm_fused_cell/BlockLSTM:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_4"
  op: "ZerosLike"
  input: "lstm_fused_cell/BlockLSTM:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_5"
  op: "ZerosLike"
  input: "lstm_fused_cell/BlockLSTM:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell/BlockLSTM_grad/BlockLSTMGrad"
  op: "BlockLSTMGrad"
  input: "lstm_fused_cell/ToInt64"
  input: "transpose"
  input: "lstm_fused_cell/zeros"
  input: "lstm_fused_cell/zeros"
  input: "lstm_fused_cell/kernel/read"
  input: "lstm_fused_cell/zeros_1"
  input: "lstm_fused_cell/zeros_1"
  input: "lstm_fused_cell/zeros_1"
  input: "lstm_fused_cell/bias/read"
  input: "lstm_fused_cell/BlockLSTM"
  input: "lstm_fused_cell/BlockLSTM:1"
  input: "lstm_fused_cell/BlockLSTM:2"
  input: "lstm_fused_cell/BlockLSTM:3"
  input: "lstm_fused_cell/BlockLSTM:4"
  input: "lstm_fused_cell/BlockLSTM:5"
  input: "lstm_fused_cell/BlockLSTM:6"
  input: "gradients/zeros_like_1"
  input: "gradients/lstm_fused_cell/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: 450
          }
          dim {
            size: 400
          }
        }
        shape {
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_peephole"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_fused_cell/BlockLSTM_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_fused_cell/BlockLSTM_grad/BlockLSTMGrad"
}
node {
  name: "gradients/lstm_fused_cell/BlockLSTM_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_fused_cell/BlockLSTM_grad/BlockLSTMGrad"
  input: "^gradients/lstm_fused_cell/BlockLSTM_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_fused_cell/BlockLSTM_grad/BlockLSTMGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell/BlockLSTM_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_fused_cell/BlockLSTM_grad/BlockLSTMGrad:1"
  input: "^gradients/lstm_fused_cell/BlockLSTM_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_fused_cell/BlockLSTM_grad/BlockLSTMGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell/BlockLSTM_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lstm_fused_cell/BlockLSTM_grad/BlockLSTMGrad:2"
  input: "^gradients/lstm_fused_cell/BlockLSTM_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_fused_cell/BlockLSTM_grad/BlockLSTMGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell/BlockLSTM_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/lstm_fused_cell/BlockLSTM_grad/BlockLSTMGrad:3"
  input: "^gradients/lstm_fused_cell/BlockLSTM_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_fused_cell/BlockLSTM_grad/BlockLSTMGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 450
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell/BlockLSTM_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/lstm_fused_cell/BlockLSTM_grad/BlockLSTMGrad:4"
  input: "^gradients/lstm_fused_cell/BlockLSTM_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_fused_cell/BlockLSTM_grad/BlockLSTMGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell/BlockLSTM_grad/tuple/control_dependency_5"
  op: "Identity"
  input: "gradients/lstm_fused_cell/BlockLSTM_grad/BlockLSTMGrad:5"
  input: "^gradients/lstm_fused_cell/BlockLSTM_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_fused_cell/BlockLSTM_grad/BlockLSTMGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell/BlockLSTM_grad/tuple/control_dependency_6"
  op: "Identity"
  input: "gradients/lstm_fused_cell/BlockLSTM_grad/BlockLSTMGrad:6"
  input: "^gradients/lstm_fused_cell/BlockLSTM_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_fused_cell/BlockLSTM_grad/BlockLSTMGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell/BlockLSTM_grad/tuple/control_dependency_7"
  op: "Identity"
  input: "gradients/lstm_fused_cell/BlockLSTM_grad/BlockLSTMGrad:7"
  input: "^gradients/lstm_fused_cell/BlockLSTM_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_fused_cell/BlockLSTM_grad/BlockLSTMGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell_1/mul_grad/Shape"
  op: "Shape"
  input: "lstm_fused_cell_1/BlockLSTM:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_fused_cell_1/mul_grad/Shape_1"
  op: "Shape"
  input: "lstm_fused_cell_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_fused_cell_1/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_fused_cell_1/mul_grad/Shape"
  input: "gradients/lstm_fused_cell_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell_1/mul_grad/Mul"
  op: "Mul"
  input: "gradients/ReverseSequence_1_grad/ReverseSequence"
  input: "lstm_fused_cell_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell_1/mul_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_fused_cell_1/mul_grad/Mul"
  input: "gradients/lstm_fused_cell_1/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_fused_cell_1/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_fused_cell_1/mul_grad/Sum"
  input: "gradients/lstm_fused_cell_1/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell_1/mul_grad/Mul_1"
  op: "Mul"
  input: "lstm_fused_cell_1/BlockLSTM:6"
  input: "gradients/ReverseSequence_1_grad/ReverseSequence"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell_1/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_fused_cell_1/mul_grad/Mul_1"
  input: "gradients/lstm_fused_cell_1/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_fused_cell_1/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_fused_cell_1/mul_grad/Sum_1"
  input: "gradients/lstm_fused_cell_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell_1/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_fused_cell_1/mul_grad/Reshape"
  input: "^gradients/lstm_fused_cell_1/mul_grad/Reshape_1"
}
node {
  name: "gradients/lstm_fused_cell_1/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_fused_cell_1/mul_grad/Reshape"
  input: "^gradients/lstm_fused_cell_1/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_fused_cell_1/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell_1/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_fused_cell_1/mul_grad/Reshape_1"
  input: "^gradients/lstm_fused_cell_1/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_fused_cell_1/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_6"
  op: "ZerosLike"
  input: "lstm_fused_cell_1/BlockLSTM"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_7"
  op: "ZerosLike"
  input: "lstm_fused_cell_1/BlockLSTM:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_8"
  op: "ZerosLike"
  input: "lstm_fused_cell_1/BlockLSTM:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_9"
  op: "ZerosLike"
  input: "lstm_fused_cell_1/BlockLSTM:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_10"
  op: "ZerosLike"
  input: "lstm_fused_cell_1/BlockLSTM:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_11"
  op: "ZerosLike"
  input: "lstm_fused_cell_1/BlockLSTM:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell_1/BlockLSTM_grad/BlockLSTMGrad"
  op: "BlockLSTMGrad"
  input: "lstm_fused_cell_1/ToInt64"
  input: "ReverseSequence"
  input: "lstm_fused_cell_1/zeros"
  input: "lstm_fused_cell_1/zeros"
  input: "lstm_fused_cell_1/kernel/read"
  input: "lstm_fused_cell_1/zeros_1"
  input: "lstm_fused_cell_1/zeros_1"
  input: "lstm_fused_cell_1/zeros_1"
  input: "lstm_fused_cell_1/bias/read"
  input: "lstm_fused_cell_1/BlockLSTM"
  input: "lstm_fused_cell_1/BlockLSTM:1"
  input: "lstm_fused_cell_1/BlockLSTM:2"
  input: "lstm_fused_cell_1/BlockLSTM:3"
  input: "lstm_fused_cell_1/BlockLSTM:4"
  input: "lstm_fused_cell_1/BlockLSTM:5"
  input: "lstm_fused_cell_1/BlockLSTM:6"
  input: "gradients/zeros_like_7"
  input: "gradients/lstm_fused_cell_1/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: 450
          }
          dim {
            size: 400
          }
        }
        shape {
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_peephole"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_fused_cell_1/BlockLSTM_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_fused_cell_1/BlockLSTM_grad/BlockLSTMGrad"
}
node {
  name: "gradients/lstm_fused_cell_1/BlockLSTM_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_fused_cell_1/BlockLSTM_grad/BlockLSTMGrad"
  input: "^gradients/lstm_fused_cell_1/BlockLSTM_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_fused_cell_1/BlockLSTM_grad/BlockLSTMGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell_1/BlockLSTM_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_fused_cell_1/BlockLSTM_grad/BlockLSTMGrad:1"
  input: "^gradients/lstm_fused_cell_1/BlockLSTM_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_fused_cell_1/BlockLSTM_grad/BlockLSTMGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell_1/BlockLSTM_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lstm_fused_cell_1/BlockLSTM_grad/BlockLSTMGrad:2"
  input: "^gradients/lstm_fused_cell_1/BlockLSTM_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_fused_cell_1/BlockLSTM_grad/BlockLSTMGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell_1/BlockLSTM_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/lstm_fused_cell_1/BlockLSTM_grad/BlockLSTMGrad:3"
  input: "^gradients/lstm_fused_cell_1/BlockLSTM_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_fused_cell_1/BlockLSTM_grad/BlockLSTMGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 450
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell_1/BlockLSTM_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/lstm_fused_cell_1/BlockLSTM_grad/BlockLSTMGrad:4"
  input: "^gradients/lstm_fused_cell_1/BlockLSTM_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_fused_cell_1/BlockLSTM_grad/BlockLSTMGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell_1/BlockLSTM_grad/tuple/control_dependency_5"
  op: "Identity"
  input: "gradients/lstm_fused_cell_1/BlockLSTM_grad/BlockLSTMGrad:5"
  input: "^gradients/lstm_fused_cell_1/BlockLSTM_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_fused_cell_1/BlockLSTM_grad/BlockLSTMGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell_1/BlockLSTM_grad/tuple/control_dependency_6"
  op: "Identity"
  input: "gradients/lstm_fused_cell_1/BlockLSTM_grad/BlockLSTMGrad:6"
  input: "^gradients/lstm_fused_cell_1/BlockLSTM_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_fused_cell_1/BlockLSTM_grad/BlockLSTMGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_fused_cell_1/BlockLSTM_grad/tuple/control_dependency_7"
  op: "Identity"
  input: "gradients/lstm_fused_cell_1/BlockLSTM_grad/BlockLSTMGrad:7"
  input: "^gradients/lstm_fused_cell_1/BlockLSTM_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_fused_cell_1/BlockLSTM_grad/BlockLSTMGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "gradients/ReverseSequence_grad/ReverseSequence"
  op: "ReverseSequence"
  input: "gradients/lstm_fused_cell_1/BlockLSTM_grad/tuple/control_dependency"
  input: "IteratorGetNext:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 1
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/AddN_7"
  op: "AddN"
  input: "gradients/lstm_fused_cell/BlockLSTM_grad/tuple/control_dependency"
  input: "gradients/ReverseSequence_grad/ReverseSequence"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_fused_cell/BlockLSTM_grad/BlockLSTMGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
}
node {
  name: "gradients/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/AddN_7"
  input: "gradients/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_grad/Shape"
  op: "Shape"
  input: "dropout_1/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_grad/Shape_1"
  op: "Shape"
  input: "dropout_1/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/dropout_1/dropout/mul_grad/Shape"
  input: "gradients/dropout_1/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_grad/Mul"
  op: "Mul"
  input: "gradients/transpose_grad/transpose"
  input: "dropout_1/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_grad/Sum"
  op: "Sum"
  input: "gradients/dropout_1/dropout/mul_grad/Mul"
  input: "gradients/dropout_1/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/dropout_1/dropout/mul_grad/Sum"
  input: "gradients/dropout_1/dropout/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_grad/Mul_1"
  op: "Mul"
  input: "dropout_1/dropout/truediv"
  input: "gradients/transpose_grad/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/dropout_1/dropout/mul_grad/Mul_1"
  input: "gradients/dropout_1/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/dropout_1/dropout/mul_grad/Sum_1"
  input: "gradients/dropout_1/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/dropout_1/dropout/mul_grad/Reshape"
  input: "^gradients/dropout_1/dropout/mul_grad/Reshape_1"
}
node {
  name: "gradients/dropout_1/dropout/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/dropout_1/dropout/mul_grad/Reshape"
  input: "^gradients/dropout_1/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dropout_1/dropout/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/dropout_1/dropout/mul_grad/Reshape_1"
  input: "^gradients/dropout_1/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dropout_1/dropout/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/truediv_grad/Shape"
  op: "Shape"
  input: "concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/truediv_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/dropout_1/dropout/truediv_grad/Shape"
  input: "gradients/dropout_1/dropout/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/dropout_1/dropout/mul_grad/tuple/control_dependency"
  input: "dropout_1/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/truediv_grad/Sum"
  op: "Sum"
  input: "gradients/dropout_1/dropout/truediv_grad/RealDiv"
  input: "gradients/dropout_1/dropout/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/truediv_grad/Reshape"
  op: "Reshape"
  input: "gradients/dropout_1/dropout/truediv_grad/Sum"
  input: "gradients/dropout_1/dropout/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/truediv_grad/Neg"
  op: "Neg"
  input: "concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/dropout_1/dropout/truediv_grad/Neg"
  input: "dropout_1/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/dropout_1/dropout/truediv_grad/RealDiv_1"
  input: "dropout_1/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/truediv_grad/mul"
  op: "Mul"
  input: "gradients/dropout_1/dropout/mul_grad/tuple/control_dependency"
  input: "gradients/dropout_1/dropout/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/truediv_grad/Sum_1"
  op: "Sum"
  input: "gradients/dropout_1/dropout/truediv_grad/mul"
  input: "gradients/dropout_1/dropout/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/dropout_1/dropout/truediv_grad/Sum_1"
  input: "gradients/dropout_1/dropout/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/truediv_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/dropout_1/dropout/truediv_grad/Reshape"
  input: "^gradients/dropout_1/dropout/truediv_grad/Reshape_1"
}
node {
  name: "gradients/dropout_1/dropout/truediv_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/dropout_1/dropout/truediv_grad/Reshape"
  input: "^gradients/dropout_1/dropout/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dropout_1/dropout/truediv_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/truediv_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/dropout_1/dropout/truediv_grad/Reshape_1"
  input: "^gradients/dropout_1/dropout/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dropout_1/dropout/truediv_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/concat_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/concat_grad/mod"
  op: "FloorMod"
  input: "concat/axis"
  input: "gradients/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/concat_grad/Shape"
  op: "Shape"
  input: "embedding_lookup_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/concat_grad/ShapeN"
  op: "ShapeN"
  input: "embedding_lookup_1/Identity"
  input: "Reshape_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/concat_grad/mod"
  input: "gradients/concat_grad/ShapeN"
  input: "gradients/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/concat_grad/Slice"
  op: "Slice"
  input: "gradients/dropout_1/dropout/truediv_grad/tuple/control_dependency"
  input: "gradients/concat_grad/ConcatOffset"
  input: "gradients/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "gradients/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/dropout_1/dropout/truediv_grad/tuple/control_dependency"
  input: "gradients/concat_grad/ConcatOffset:1"
  input: "gradients/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "gradients/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/concat_grad/Slice"
  input: "^gradients/concat_grad/Slice_1"
}
node {
  name: "gradients/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/concat_grad/Slice"
  input: "^gradients/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "gradients/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/concat_grad/Slice_1"
  input: "^gradients/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Reshape_2_grad/Shape"
  op: "Shape"
  input: "Max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Reshape_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/concat_grad/tuple/control_dependency_1"
  input: "gradients/Reshape_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Max_grad/Shape"
  op: "Shape"
  input: "add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Max_grad/Size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/Max_grad/add"
  op: "Add"
  input: "Max/reduction_indices"
  input: "gradients/Max_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Max_grad/mod"
  op: "FloorMod"
  input: "gradients/Max_grad/add"
  input: "gradients/Max_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Max_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Max_grad/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Max_grad/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Max_grad/range"
  op: "Range"
  input: "gradients/Max_grad/range/start"
  input: "gradients/Max_grad/Size"
  input: "gradients/Max_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Max_grad/Fill/value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Max_grad/Fill"
  op: "Fill"
  input: "gradients/Max_grad/Shape_1"
  input: "gradients/Max_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Max_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/Max_grad/range"
  input: "gradients/Max_grad/mod"
  input: "gradients/Max_grad/Shape"
  input: "gradients/Max_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Max_grad/Reshape"
  op: "Reshape"
  input: "Max"
  input: "gradients/Max_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Max_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/Reshape_2_grad/Reshape"
  input: "gradients/Max_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Max_grad/Equal"
  op: "Equal"
  input: "gradients/Max_grad/Reshape"
  input: "add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Max_grad/Cast"
  op: "Cast"
  input: "gradients/Max_grad/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Max_grad/Sum"
  op: "Sum"
  input: "gradients/Max_grad/Cast"
  input: "Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Max_grad/Reshape_2"
  op: "Reshape"
  input: "gradients/Max_grad/Sum"
  input: "gradients/Max_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Max_grad/div"
  op: "RealDiv"
  input: "gradients/Max_grad/Cast"
  input: "gradients/Max_grad/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Max_grad/mul"
  op: "Mul"
  input: "gradients/Max_grad/div"
  input: "gradients/Max_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_grad/Shape"
  op: "Shape"
  input: "mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_grad/Shape_1"
  op: "Shape"
  input: "mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/add_grad/Shape"
  input: "gradients/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_grad/Sum"
  op: "Sum"
  input: "gradients/Max_grad/mul"
  input: "gradients/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/add_grad/Sum"
  input: "gradients/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/Max_grad/mul"
  input: "gradients/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/add_grad/Sum_1"
  input: "gradients/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/add_grad/Reshape"
  input: "^gradients/add_grad/Reshape_1"
}
node {
  name: "gradients/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/add_grad/Reshape"
  input: "^gradients/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/add_grad/Reshape_1"
  input: "^gradients/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_3_grad/Shape"
  op: "Shape"
  input: "sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mul_3_grad/Shape_1"
  op: "Shape"
  input: "Min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/mul_3_grad/Shape"
  input: "gradients/mul_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_3_grad/Mul"
  op: "Mul"
  input: "gradients/add_grad/tuple/control_dependency_1"
  input: "Min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_3_grad/Sum"
  op: "Sum"
  input: "gradients/mul_3_grad/Mul"
  input: "gradients/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mul_3_grad/Reshape"
  op: "Reshape"
  input: "gradients/mul_3_grad/Sum"
  input: "gradients/mul_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_3_grad/Mul_1"
  op: "Mul"
  input: "sub"
  input: "gradients/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_3_grad/Sum_1"
  op: "Sum"
  input: "gradients/mul_3_grad/Mul_1"
  input: "gradients/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/mul_3_grad/Sum_1"
  input: "gradients/mul_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mul_3_grad/Reshape"
  input: "^gradients/mul_3_grad/Reshape_1"
}
node {
  name: "gradients/mul_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mul_3_grad/Reshape"
  input: "^gradients/mul_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_3_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mul_3_grad/Reshape_1"
  input: "^gradients/mul_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_3_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Min_grad/Shape"
  op: "Shape"
  input: "mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Min_grad/Size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/Min_grad/add"
  op: "Add"
  input: "Min/reduction_indices"
  input: "gradients/Min_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Min_grad/mod"
  op: "FloorMod"
  input: "gradients/Min_grad/add"
  input: "gradients/Min_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Min_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Min_grad/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Min_grad/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Min_grad/range"
  op: "Range"
  input: "gradients/Min_grad/range/start"
  input: "gradients/Min_grad/Size"
  input: "gradients/Min_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Min_grad/Fill/value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Min_grad/Fill"
  op: "Fill"
  input: "gradients/Min_grad/Shape_1"
  input: "gradients/Min_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Min_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/Min_grad/range"
  input: "gradients/Min_grad/mod"
  input: "gradients/Min_grad/Shape"
  input: "gradients/Min_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Min_grad/Reshape"
  op: "Reshape"
  input: "Min"
  input: "gradients/Min_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Min_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/mul_3_grad/tuple/control_dependency_1"
  input: "gradients/Min_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Min_grad/Equal"
  op: "Equal"
  input: "gradients/Min_grad/Reshape"
  input: "mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Min_grad/Cast"
  op: "Cast"
  input: "gradients/Min_grad/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Min_grad/Sum"
  op: "Sum"
  input: "gradients/Min_grad/Cast"
  input: "Min/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Min_grad/Reshape_2"
  op: "Reshape"
  input: "gradients/Min_grad/Sum"
  input: "gradients/Min_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Min_grad/div"
  op: "RealDiv"
  input: "gradients/Min_grad/Cast"
  input: "gradients/Min_grad/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Min_grad/mul"
  op: "Mul"
  input: "gradients/Min_grad/div"
  input: "gradients/Min_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_8"
  op: "AddN"
  input: "gradients/add_grad/tuple/control_dependency"
  input: "gradients/Min_grad/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_2_grad/Shape"
  op: "Shape"
  input: "conv1d/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mul_2_grad/Shape_1"
  op: "Shape"
  input: "ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/mul_2_grad/Shape"
  input: "gradients/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_2_grad/Mul"
  op: "Mul"
  input: "gradients/AddN_8"
  input: "ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_2_grad/Sum"
  op: "Sum"
  input: "gradients/mul_2_grad/Mul"
  input: "gradients/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mul_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/mul_2_grad/Sum"
  input: "gradients/mul_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_2_grad/Mul_1"
  op: "Mul"
  input: "conv1d/BiasAdd"
  input: "gradients/AddN_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/mul_2_grad/Mul_1"
  input: "gradients/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/mul_2_grad/Sum_1"
  input: "gradients/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mul_2_grad/Reshape"
  input: "^gradients/mul_2_grad/Reshape_1"
}
node {
  name: "gradients/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mul_2_grad/Reshape"
  input: "^gradients/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mul_2_grad/Reshape_1"
  input: "^gradients/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv1d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/conv1d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv1d/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/mul_2_grad/tuple/control_dependency"
}
node {
  name: "gradients/conv1d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mul_2_grad/tuple/control_dependency"
  input: "^gradients/conv1d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv1d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv1d/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/conv1d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv1d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv1d/conv1d/Squeeze_grad/Shape"
  op: "Shape"
  input: "conv1d/conv1d/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/conv1d/conv1d/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "gradients/conv1d/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/conv1d/conv1d/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: -1
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv1d/conv1d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "conv1d/conv1d/ExpandDims"
  input: "conv1d/conv1d/ExpandDims_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/conv1d/conv1d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/conv1d/conv1d/Conv2D_grad/ShapeN"
  input: "conv1d/conv1d/ExpandDims_1"
  input: "gradients/conv1d/conv1d/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv1d/conv1d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv1d/conv1d/ExpandDims"
  input: "gradients/conv1d/conv1d/Conv2D_grad/ShapeN:1"
  input: "gradients/conv1d/conv1d/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 100
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv1d/conv1d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv1d/conv1d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv1d/conv1d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/conv1d/conv1d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv1d/conv1d/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/conv1d/conv1d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv1d/conv1d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv1d/conv1d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv1d/conv1d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv1d/conv1d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv1d/conv1d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 100
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv1d/conv1d/ExpandDims_grad/Shape"
  op: "Shape"
  input: "mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/conv1d/conv1d/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "gradients/conv1d/conv1d/Conv2D_grad/tuple/control_dependency"
  input: "gradients/conv1d/conv1d/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv1d/conv1d/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000d\000\000\0002\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/conv1d/conv1d/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/conv1d/conv1d/Conv2D_grad/tuple/control_dependency_1"
  input: "gradients/conv1d/conv1d/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 100
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_1_grad/Shape"
  op: "Shape"
  input: "Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mul_1_grad/Shape_1"
  op: "Shape"
  input: "ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/mul_1_grad/Shape"
  input: "gradients/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/conv1d/conv1d/ExpandDims_grad/Reshape"
  input: "ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/mul_1_grad/Mul"
  input: "gradients/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/mul_1_grad/Sum"
  input: "gradients/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_1_grad/Mul_1"
  op: "Mul"
  input: "Reshape_1"
  input: "gradients/conv1d/conv1d/ExpandDims_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/mul_1_grad/Mul_1"
  input: "gradients/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/mul_1_grad/Sum_1"
  input: "gradients/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mul_1_grad/Reshape"
  input: "^gradients/mul_1_grad/Reshape_1"
}
node {
  name: "gradients/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mul_1_grad/Reshape"
  input: "^gradients/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mul_1_grad/Reshape_1"
  input: "^gradients/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Reshape_1_grad/Shape"
  op: "Shape"
  input: "dropout/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/mul_1_grad/tuple/control_dependency"
  input: "gradients/Reshape_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout/dropout/mul_grad/Shape"
  op: "Shape"
  input: "dropout/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/dropout/dropout/mul_grad/Shape_1"
  op: "Shape"
  input: "dropout/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/dropout/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/dropout/dropout/mul_grad/Shape"
  input: "gradients/dropout/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout/dropout/mul_grad/Mul"
  op: "Mul"
  input: "gradients/Reshape_1_grad/Reshape"
  input: "dropout/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout/dropout/mul_grad/Sum"
  op: "Sum"
  input: "gradients/dropout/dropout/mul_grad/Mul"
  input: "gradients/dropout/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/dropout/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/dropout/dropout/mul_grad/Sum"
  input: "gradients/dropout/dropout/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout/dropout/mul_grad/Mul_1"
  op: "Mul"
  input: "dropout/dropout/truediv"
  input: "gradients/Reshape_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/dropout/dropout/mul_grad/Mul_1"
  input: "gradients/dropout/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/dropout/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/dropout/dropout/mul_grad/Sum_1"
  input: "gradients/dropout/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout/dropout/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/dropout/dropout/mul_grad/Reshape"
  input: "^gradients/dropout/dropout/mul_grad/Reshape_1"
}
node {
  name: "gradients/dropout/dropout/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/dropout/dropout/mul_grad/Reshape"
  input: "^gradients/dropout/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dropout/dropout/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout/dropout/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/dropout/dropout/mul_grad/Reshape_1"
  input: "^gradients/dropout/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dropout/dropout/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout/dropout/truediv_grad/Shape"
  op: "Shape"
  input: "embedding_lookup/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/dropout/dropout/truediv_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout/dropout/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/dropout/dropout/truediv_grad/Shape"
  input: "gradients/dropout/dropout/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout/dropout/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/dropout/dropout/mul_grad/tuple/control_dependency"
  input: "dropout/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout/dropout/truediv_grad/Sum"
  op: "Sum"
  input: "gradients/dropout/dropout/truediv_grad/RealDiv"
  input: "gradients/dropout/dropout/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/dropout/dropout/truediv_grad/Reshape"
  op: "Reshape"
  input: "gradients/dropout/dropout/truediv_grad/Sum"
  input: "gradients/dropout/dropout/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout/dropout/truediv_grad/Neg"
  op: "Neg"
  input: "embedding_lookup/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout/dropout/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/dropout/dropout/truediv_grad/Neg"
  input: "dropout/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout/dropout/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/dropout/dropout/truediv_grad/RealDiv_1"
  input: "dropout/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout/dropout/truediv_grad/mul"
  op: "Mul"
  input: "gradients/dropout/dropout/mul_grad/tuple/control_dependency"
  input: "gradients/dropout/dropout/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout/dropout/truediv_grad/Sum_1"
  op: "Sum"
  input: "gradients/dropout/dropout/truediv_grad/mul"
  input: "gradients/dropout/dropout/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/dropout/dropout/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/dropout/dropout/truediv_grad/Sum_1"
  input: "gradients/dropout/dropout/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/dropout/dropout/truediv_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/dropout/dropout/truediv_grad/Reshape"
  input: "^gradients/dropout/dropout/truediv_grad/Reshape_1"
}
node {
  name: "gradients/dropout/dropout/truediv_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/dropout/dropout/truediv_grad/Reshape"
  input: "^gradients/dropout/dropout/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dropout/dropout/truediv_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout/dropout/truediv_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/dropout/dropout/truediv_grad/Reshape_1"
  input: "^gradients/dropout/dropout/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dropout/dropout/truediv_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/embedding_lookup_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "$\000\000\000\000\000\000\000d\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/embedding_lookup_grad/ToInt32"
  op: "Cast"
  input: "gradients/embedding_lookup_grad/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/embedding_lookup_grad/Size"
  op: "Size"
  input: "string_to_index_1_Lookup"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/embedding_lookup_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/embedding_lookup_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients/embedding_lookup_grad/Size"
  input: "gradients/embedding_lookup_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/embedding_lookup_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/embedding_lookup_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/embedding_lookup_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/embedding_lookup_grad/strided_slice"
  op: "StridedSlice"
  input: "gradients/embedding_lookup_grad/ToInt32"
  input: "gradients/embedding_lookup_grad/strided_slice/stack"
  input: "gradients/embedding_lookup_grad/strided_slice/stack_1"
  input: "gradients/embedding_lookup_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/embedding_lookup_grad/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/embedding_lookup_grad/concat"
  op: "ConcatV2"
  input: "gradients/embedding_lookup_grad/ExpandDims"
  input: "gradients/embedding_lookup_grad/strided_slice"
  input: "gradients/embedding_lookup_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/embedding_lookup_grad/Reshape"
  op: "Reshape"
  input: "gradients/dropout/dropout/truediv_grad/tuple/control_dependency"
  input: "gradients/embedding_lookup_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/embedding_lookup_grad/Reshape_1"
  op: "Reshape"
  input: "string_to_index_1_Lookup"
  input: "gradients/embedding_lookup_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "beta1_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta1_power/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta1_power/read"
  op: "Identity"
  input: "beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "beta2_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta2_power/Assign"
  op: "Assign"
  input: "beta2_power"
  input: "beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta2_power/read"
  op: "Identity"
  input: "beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "chars_embeddings/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "$\000\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "chars_embeddings/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "chars_embeddings/Adam/Initializer/zeros"
  op: "Fill"
  input: "chars_embeddings/Adam/Initializer/zeros/shape_as_tensor"
  input: "chars_embeddings/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 36
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "chars_embeddings/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 36
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 36
        }
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "chars_embeddings/Adam/Assign"
  op: "Assign"
  input: "chars_embeddings/Adam"
  input: "chars_embeddings/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 36
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "chars_embeddings/Adam/read"
  op: "Identity"
  input: "chars_embeddings/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 36
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "chars_embeddings/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "$\000\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "chars_embeddings/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "chars_embeddings/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "chars_embeddings/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "chars_embeddings/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 36
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "chars_embeddings/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 36
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 36
        }
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "chars_embeddings/Adam_1/Assign"
  op: "Assign"
  input: "chars_embeddings/Adam_1"
  input: "chars_embeddings/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 36
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "chars_embeddings/Adam_1/read"
  op: "Identity"
  input: "chars_embeddings/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 36
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "conv1d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000d\000\000\0002\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "conv1d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "conv1d/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 100
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 100
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 100
        }
        dim {
          size: 50
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d/kernel/Adam/Assign"
  op: "Assign"
  input: "conv1d/kernel/Adam"
  input: "conv1d/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 100
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d/kernel/Adam/read"
  op: "Identity"
  input: "conv1d/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 100
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "conv1d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000d\000\000\0002\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "conv1d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "conv1d/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 100
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 100
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 100
        }
        dim {
          size: 50
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d/kernel/Adam_1/Assign"
  op: "Assign"
  input: "conv1d/kernel/Adam_1"
  input: "conv1d/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 100
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d/kernel/Adam_1/read"
  op: "Identity"
  input: "conv1d/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 100
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "conv1d/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 50
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 50
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d/bias/Adam/Assign"
  op: "Assign"
  input: "conv1d/bias/Adam"
  input: "conv1d/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d/bias/Adam/read"
  op: "Identity"
  input: "conv1d/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "conv1d/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 50
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 50
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d/bias/Adam_1/Assign"
  op: "Assign"
  input: "conv1d/bias/Adam_1"
  input: "conv1d/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d/bias/Adam_1/read"
  op: "Identity"
  input: "conv1d/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\302\001\000\000\220\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_fused_cell/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_fused_cell/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "lstm_fused_cell/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "lstm_fused_cell/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 450
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_fused_cell/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 450
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 450
        }
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_fused_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "lstm_fused_cell/kernel/Adam"
  input: "lstm_fused_cell/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 450
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_fused_cell/kernel/Adam/read"
  op: "Identity"
  input: "lstm_fused_cell/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 450
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\302\001\000\000\220\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_fused_cell/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_fused_cell/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "lstm_fused_cell/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "lstm_fused_cell/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 450
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_fused_cell/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 450
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 450
        }
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_fused_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "lstm_fused_cell/kernel/Adam_1"
  input: "lstm_fused_cell/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 450
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_fused_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "lstm_fused_cell/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 450
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 400
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_fused_cell/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_fused_cell/bias/Adam/Assign"
  op: "Assign"
  input: "lstm_fused_cell/bias/Adam"
  input: "lstm_fused_cell/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_fused_cell/bias/Adam/read"
  op: "Identity"
  input: "lstm_fused_cell/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 400
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_fused_cell/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_fused_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "lstm_fused_cell/bias/Adam_1"
  input: "lstm_fused_cell/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_fused_cell/bias/Adam_1/read"
  op: "Identity"
  input: "lstm_fused_cell/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\302\001\000\000\220\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "lstm_fused_cell_1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "lstm_fused_cell_1/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 450
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 450
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 450
        }
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel/Adam/Assign"
  op: "Assign"
  input: "lstm_fused_cell_1/kernel/Adam"
  input: "lstm_fused_cell_1/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 450
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel/Adam/read"
  op: "Identity"
  input: "lstm_fused_cell_1/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 450
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\302\001\000\000\220\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "lstm_fused_cell_1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "lstm_fused_cell_1/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 450
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 450
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 450
        }
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel/Adam_1/Assign"
  op: "Assign"
  input: "lstm_fused_cell_1/kernel/Adam_1"
  input: "lstm_fused_cell_1/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 450
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_fused_cell_1/kernel/Adam_1/read"
  op: "Identity"
  input: "lstm_fused_cell_1/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 450
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 400
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_fused_cell_1/bias/Adam/Assign"
  op: "Assign"
  input: "lstm_fused_cell_1/bias/Adam"
  input: "lstm_fused_cell_1/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_fused_cell_1/bias/Adam/read"
  op: "Identity"
  input: "lstm_fused_cell_1/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 400
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_fused_cell_1/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_fused_cell_1/bias/Adam_1/Assign"
  op: "Assign"
  input: "lstm_fused_cell_1/bias/Adam_1"
  input: "lstm_fused_cell_1/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_fused_cell_1/bias/Adam_1/read"
  op: "Identity"
  input: "lstm_fused_cell_1/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\310\000\000\000\006\000\000\000"
      }
    }
  }
}
node {
  name: "dense/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "dense/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "dense/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense/kernel/Adam/Assign"
  op: "Assign"
  input: "dense/kernel/Adam"
  input: "dense/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense/kernel/Adam/read"
  op: "Identity"
  input: "dense/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "dense/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\310\000\000\000\006\000\000\000"
      }
    }
  }
}
node {
  name: "dense/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "dense/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "dense/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense/kernel/Adam_1/Assign"
  op: "Assign"
  input: "dense/kernel/Adam_1"
  input: "dense/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense/kernel/Adam_1/read"
  op: "Identity"
  input: "dense/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "dense/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense/bias/Adam/Assign"
  op: "Assign"
  input: "dense/bias/Adam"
  input: "dense/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense/bias/Adam/read"
  op: "Identity"
  input: "dense/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "dense/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense/bias/Adam_1/Assign"
  op: "Assign"
  input: "dense/bias/Adam_1"
  input: "dense/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense/bias/Adam_1/read"
  op: "Identity"
  input: "dense/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "crf/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "crf/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "crf/Adam/Assign"
  op: "Assign"
  input: "crf/Adam"
  input: "crf/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "crf/Adam/read"
  op: "Identity"
  input: "crf/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "crf/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "crf/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "crf/Adam_1/Assign"
  op: "Assign"
  input: "crf/Adam_1"
  input: "crf/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "crf/Adam_1/read"
  op: "Identity"
  input: "crf/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "Adam/learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "Adam/beta1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "Adam/beta2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "Adam/epsilon"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "Adam/update_chars_embeddings/Unique"
  op: "Unique"
  input: "gradients/embedding_lookup_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Adam/update_chars_embeddings/Shape"
  op: "Shape"
  input: "Adam/update_chars_embeddings/Unique"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Adam/update_chars_embeddings/strided_slice/stack"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Adam/update_chars_embeddings/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Adam/update_chars_embeddings/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Adam/update_chars_embeddings/strided_slice"
  op: "StridedSlice"
  input: "Adam/update_chars_embeddings/Shape"
  input: "Adam/update_chars_embeddings/strided_slice/stack"
  input: "Adam/update_chars_embeddings/strided_slice/stack_1"
  input: "Adam/update_chars_embeddings/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Adam/update_chars_embeddings/UnsortedSegmentSum"
  op: "UnsortedSegmentSum"
  input: "gradients/embedding_lookup_grad/Reshape"
  input: "Adam/update_chars_embeddings/Unique:1"
  input: "Adam/update_chars_embeddings/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "Adam/update_chars_embeddings/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Adam/update_chars_embeddings/sub"
  op: "Sub"
  input: "Adam/update_chars_embeddings/sub/x"
  input: "beta2_power/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/update_chars_embeddings/Sqrt"
  op: "Sqrt"
  input: "Adam/update_chars_embeddings/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/update_chars_embeddings/mul"
  op: "Mul"
  input: "Adam/learning_rate"
  input: "Adam/update_chars_embeddings/Sqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/update_chars_embeddings/sub_1/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Adam/update_chars_embeddings/sub_1"
  op: "Sub"
  input: "Adam/update_chars_embeddings/sub_1/x"
  input: "beta1_power/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/update_chars_embeddings/truediv"
  op: "RealDiv"
  input: "Adam/update_chars_embeddings/mul"
  input: "Adam/update_chars_embeddings/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/update_chars_embeddings/sub_2/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Adam/update_chars_embeddings/sub_2"
  op: "Sub"
  input: "Adam/update_chars_embeddings/sub_2/x"
  input: "Adam/beta1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/update_chars_embeddings/mul_1"
  op: "Mul"
  input: "Adam/update_chars_embeddings/UnsortedSegmentSum"
  input: "Adam/update_chars_embeddings/sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "Adam/update_chars_embeddings/mul_2"
  op: "Mul"
  input: "chars_embeddings/Adam/read"
  input: "Adam/beta1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 36
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "Adam/update_chars_embeddings/Assign"
  op: "Assign"
  input: "chars_embeddings/Adam"
  input: "Adam/update_chars_embeddings/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 36
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/update_chars_embeddings/ScatterAdd"
  op: "ScatterAdd"
  input: "chars_embeddings/Adam"
  input: "Adam/update_chars_embeddings/Unique"
  input: "Adam/update_chars_embeddings/mul_1"
  input: "^Adam/update_chars_embeddings/Assign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 36
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_chars_embeddings/mul_3"
  op: "Mul"
  input: "Adam/update_chars_embeddings/UnsortedSegmentSum"
  input: "Adam/update_chars_embeddings/UnsortedSegmentSum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "Adam/update_chars_embeddings/sub_3/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Adam/update_chars_embeddings/sub_3"
  op: "Sub"
  input: "Adam/update_chars_embeddings/sub_3/x"
  input: "Adam/beta2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/update_chars_embeddings/mul_4"
  op: "Mul"
  input: "Adam/update_chars_embeddings/mul_3"
  input: "Adam/update_chars_embeddings/sub_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "Adam/update_chars_embeddings/mul_5"
  op: "Mul"
  input: "chars_embeddings/Adam_1/read"
  input: "Adam/beta2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 36
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "Adam/update_chars_embeddings/Assign_1"
  op: "Assign"
  input: "chars_embeddings/Adam_1"
  input: "Adam/update_chars_embeddings/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 36
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/update_chars_embeddings/ScatterAdd_1"
  op: "ScatterAdd"
  input: "chars_embeddings/Adam_1"
  input: "Adam/update_chars_embeddings/Unique"
  input: "Adam/update_chars_embeddings/mul_4"
  input: "^Adam/update_chars_embeddings/Assign_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 36
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_chars_embeddings/Sqrt_1"
  op: "Sqrt"
  input: "Adam/update_chars_embeddings/ScatterAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 36
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "Adam/update_chars_embeddings/mul_6"
  op: "Mul"
  input: "Adam/update_chars_embeddings/truediv"
  input: "Adam/update_chars_embeddings/ScatterAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 36
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "Adam/update_chars_embeddings/add"
  op: "Add"
  input: "Adam/update_chars_embeddings/Sqrt_1"
  input: "Adam/epsilon"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 36
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "Adam/update_chars_embeddings/truediv_1"
  op: "RealDiv"
  input: "Adam/update_chars_embeddings/mul_6"
  input: "Adam/update_chars_embeddings/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 36
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "Adam/update_chars_embeddings/AssignSub"
  op: "AssignSub"
  input: "chars_embeddings"
  input: "Adam/update_chars_embeddings/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 36
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_chars_embeddings/group_deps"
  op: "NoOp"
  input: "^Adam/update_chars_embeddings/AssignSub"
  input: "^Adam/update_chars_embeddings/ScatterAdd"
  input: "^Adam/update_chars_embeddings/ScatterAdd_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
}
node {
  name: "Adam/update_conv1d/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "conv1d/kernel"
  input: "conv1d/kernel/Adam"
  input: "conv1d/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/conv1d/conv1d/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 100
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_conv1d/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "conv1d/bias"
  input: "conv1d/bias/Adam"
  input: "conv1d/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/conv1d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lstm_fused_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "lstm_fused_cell/kernel"
  input: "lstm_fused_cell/kernel/Adam"
  input: "lstm_fused_cell/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/lstm_fused_cell/BlockLSTM_grad/tuple/control_dependency_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 450
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lstm_fused_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "lstm_fused_cell/bias"
  input: "lstm_fused_cell/bias/Adam"
  input: "lstm_fused_cell/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/lstm_fused_cell/BlockLSTM_grad/tuple/control_dependency_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lstm_fused_cell_1/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "lstm_fused_cell_1/kernel"
  input: "lstm_fused_cell_1/kernel/Adam"
  input: "lstm_fused_cell_1/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/lstm_fused_cell_1/BlockLSTM_grad/tuple/control_dependency_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 450
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lstm_fused_cell_1/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "lstm_fused_cell_1/bias"
  input: "lstm_fused_cell_1/bias/Adam"
  input: "lstm_fused_cell_1/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/lstm_fused_cell_1/BlockLSTM_grad/tuple/control_dependency_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_dense/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "dense/kernel"
  input: "dense/kernel/Adam"
  input: "dense/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/dense/Tensordot/transpose_1_grad/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_dense/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "dense/bias"
  input: "dense/bias/Adam"
  input: "dense/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/dense/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_crf/ApplyAdam"
  op: "ApplyAdam"
  input: "crf"
  input: "crf/Adam"
  input: "crf/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/mul"
  op: "Mul"
  input: "beta1_power/read"
  input: "Adam/beta1"
  input: "^Adam/update_chars_embeddings/group_deps"
  input: "^Adam/update_conv1d/bias/ApplyAdam"
  input: "^Adam/update_conv1d/kernel/ApplyAdam"
  input: "^Adam/update_crf/ApplyAdam"
  input: "^Adam/update_dense/bias/ApplyAdam"
  input: "^Adam/update_dense/kernel/ApplyAdam"
  input: "^Adam/update_lstm_fused_cell/bias/ApplyAdam"
  input: "^Adam/update_lstm_fused_cell/kernel/ApplyAdam"
  input: "^Adam/update_lstm_fused_cell_1/bias/ApplyAdam"
  input: "^Adam/update_lstm_fused_cell_1/kernel/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "Adam/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/mul_1"
  op: "Mul"
  input: "beta2_power/read"
  input: "Adam/beta2"
  input: "^Adam/update_chars_embeddings/group_deps"
  input: "^Adam/update_conv1d/bias/ApplyAdam"
  input: "^Adam/update_conv1d/kernel/ApplyAdam"
  input: "^Adam/update_crf/ApplyAdam"
  input: "^Adam/update_dense/bias/ApplyAdam"
  input: "^Adam/update_dense/kernel/ApplyAdam"
  input: "^Adam/update_lstm_fused_cell/bias/ApplyAdam"
  input: "^Adam/update_lstm_fused_cell/kernel/ApplyAdam"
  input: "^Adam/update_lstm_fused_cell_1/bias/ApplyAdam"
  input: "^Adam/update_lstm_fused_cell_1/kernel/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "Adam/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/update"
  op: "NoOp"
  input: "^Adam/Assign"
  input: "^Adam/Assign_1"
  input: "^Adam/update_chars_embeddings/group_deps"
  input: "^Adam/update_conv1d/bias/ApplyAdam"
  input: "^Adam/update_conv1d/kernel/ApplyAdam"
  input: "^Adam/update_crf/ApplyAdam"
  input: "^Adam/update_dense/bias/ApplyAdam"
  input: "^Adam/update_dense/kernel/ApplyAdam"
  input: "^Adam/update_lstm_fused_cell/bias/ApplyAdam"
  input: "^Adam/update_lstm_fused_cell/kernel/ApplyAdam"
  input: "^Adam/update_lstm_fused_cell_1/bias/ApplyAdam"
  input: "^Adam/update_lstm_fused_cell_1/kernel/ApplyAdam"
}
node {
  name: "Adam/value"
  op: "Const"
  input: "^Adam/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "Adam"
  op: "AssignAdd"
  input: "global_step"
  input: "Adam/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "signal_early_stopping/STOP/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@signal_early_stopping/STOP"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "signal_early_stopping/STOP"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@signal_early_stopping/STOP"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "signal_early_stopping/STOP/Assign"
  op: "Assign"
  input: "signal_early_stopping/STOP"
  input: "signal_early_stopping/STOP/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@signal_early_stopping/STOP"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "signal_early_stopping/STOP/read"
  op: "Identity"
  input: "signal_early_stopping/STOP"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@signal_early_stopping/STOP"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Assign/value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
}
node {
  name: "Assign"
  op: "Assign"
  input: "signal_early_stopping/STOP"
  input: "Assign/value"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@signal_early_stopping/STOP"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^Variable/Assign"
  input: "^beta1_power/Assign"
  input: "^beta2_power/Assign"
  input: "^chars_embeddings/Adam/Assign"
  input: "^chars_embeddings/Adam_1/Assign"
  input: "^chars_embeddings/Assign"
  input: "^conv1d/bias/Adam/Assign"
  input: "^conv1d/bias/Adam_1/Assign"
  input: "^conv1d/bias/Assign"
  input: "^conv1d/kernel/Adam/Assign"
  input: "^conv1d/kernel/Adam_1/Assign"
  input: "^conv1d/kernel/Assign"
  input: "^crf/Adam/Assign"
  input: "^crf/Adam_1/Assign"
  input: "^crf/Assign"
  input: "^dense/bias/Adam/Assign"
  input: "^dense/bias/Adam_1/Assign"
  input: "^dense/bias/Assign"
  input: "^dense/kernel/Adam/Assign"
  input: "^dense/kernel/Adam_1/Assign"
  input: "^dense/kernel/Assign"
  input: "^global_step/Assign"
  input: "^lstm_fused_cell/bias/Adam/Assign"
  input: "^lstm_fused_cell/bias/Adam_1/Assign"
  input: "^lstm_fused_cell/bias/Assign"
  input: "^lstm_fused_cell/kernel/Adam/Assign"
  input: "^lstm_fused_cell/kernel/Adam_1/Assign"
  input: "^lstm_fused_cell/kernel/Assign"
  input: "^lstm_fused_cell_1/bias/Adam/Assign"
  input: "^lstm_fused_cell_1/bias/Adam_1/Assign"
  input: "^lstm_fused_cell_1/bias/Assign"
  input: "^lstm_fused_cell_1/kernel/Adam/Assign"
  input: "^lstm_fused_cell_1/kernel/Adam_1/Assign"
  input: "^lstm_fused_cell_1/kernel/Assign"
  input: "^signal_early_stopping/STOP/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "chars_embeddings"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "conv1d/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "conv1d/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "dense/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "dense/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "crf"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "chars_embeddings/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "chars_embeddings/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "conv1d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "conv1d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "conv1d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "conv1d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell_1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell_1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell_1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell_1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "dense/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "dense/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "dense/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "dense/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "crf/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "crf/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "signal_early_stopping/STOP"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@signal_early_stopping/STOP"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "accuracy/total"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "accuracy/count"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "total_confusion_matrix"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_confusion_matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "total_confusion_matrix_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_confusion_matrix_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "total_confusion_matrix_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_confusion_matrix_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  input: "report_uninitialized_variables/IsVariableInitialized_8"
  input: "report_uninitialized_variables/IsVariableInitialized_9"
  input: "report_uninitialized_variables/IsVariableInitialized_10"
  input: "report_uninitialized_variables/IsVariableInitialized_11"
  input: "report_uninitialized_variables/IsVariableInitialized_12"
  input: "report_uninitialized_variables/IsVariableInitialized_13"
  input: "report_uninitialized_variables/IsVariableInitialized_14"
  input: "report_uninitialized_variables/IsVariableInitialized_15"
  input: "report_uninitialized_variables/IsVariableInitialized_16"
  input: "report_uninitialized_variables/IsVariableInitialized_17"
  input: "report_uninitialized_variables/IsVariableInitialized_18"
  input: "report_uninitialized_variables/IsVariableInitialized_19"
  input: "report_uninitialized_variables/IsVariableInitialized_20"
  input: "report_uninitialized_variables/IsVariableInitialized_21"
  input: "report_uninitialized_variables/IsVariableInitialized_22"
  input: "report_uninitialized_variables/IsVariableInitialized_23"
  input: "report_uninitialized_variables/IsVariableInitialized_24"
  input: "report_uninitialized_variables/IsVariableInitialized_25"
  input: "report_uninitialized_variables/IsVariableInitialized_26"
  input: "report_uninitialized_variables/IsVariableInitialized_27"
  input: "report_uninitialized_variables/IsVariableInitialized_28"
  input: "report_uninitialized_variables/IsVariableInitialized_29"
  input: "report_uninitialized_variables/IsVariableInitialized_30"
  input: "report_uninitialized_variables/IsVariableInitialized_31"
  input: "report_uninitialized_variables/IsVariableInitialized_32"
  input: "report_uninitialized_variables/IsVariableInitialized_33"
  input: "report_uninitialized_variables/IsVariableInitialized_34"
  input: "report_uninitialized_variables/IsVariableInitialized_35"
  input: "report_uninitialized_variables/IsVariableInitialized_36"
  input: "report_uninitialized_variables/IsVariableInitialized_37"
  input: "report_uninitialized_variables/IsVariableInitialized_38"
  input: "report_uninitialized_variables/IsVariableInitialized_39"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 40
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 40
          }
        }
        string_val: "global_step"
        string_val: "chars_embeddings"
        string_val: "conv1d/kernel"
        string_val: "conv1d/bias"
        string_val: "Variable"
        string_val: "lstm_fused_cell/kernel"
        string_val: "lstm_fused_cell/bias"
        string_val: "lstm_fused_cell_1/kernel"
        string_val: "lstm_fused_cell_1/bias"
        string_val: "dense/kernel"
        string_val: "dense/bias"
        string_val: "crf"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "chars_embeddings/Adam"
        string_val: "chars_embeddings/Adam_1"
        string_val: "conv1d/kernel/Adam"
        string_val: "conv1d/kernel/Adam_1"
        string_val: "conv1d/bias/Adam"
        string_val: "conv1d/bias/Adam_1"
        string_val: "lstm_fused_cell/kernel/Adam"
        string_val: "lstm_fused_cell/kernel/Adam_1"
        string_val: "lstm_fused_cell/bias/Adam"
        string_val: "lstm_fused_cell/bias/Adam_1"
        string_val: "lstm_fused_cell_1/kernel/Adam"
        string_val: "lstm_fused_cell_1/kernel/Adam_1"
        string_val: "lstm_fused_cell_1/bias/Adam"
        string_val: "lstm_fused_cell_1/bias/Adam_1"
        string_val: "dense/kernel/Adam"
        string_val: "dense/kernel/Adam_1"
        string_val: "dense/bias/Adam"
        string_val: "dense/bias/Adam_1"
        string_val: "crf/Adam"
        string_val: "crf/Adam_1"
        string_val: "signal_early_stopping/STOP"
        string_val: "accuracy/total"
        string_val: "accuracy/count"
        string_val: "total_confusion_matrix"
        string_val: "total_confusion_matrix_1"
        string_val: "total_confusion_matrix_2"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_2"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "chars_embeddings"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "conv1d/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "conv1d/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "dense/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "dense/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "crf"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "chars_embeddings/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "chars_embeddings/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "conv1d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "conv1d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "conv1d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "conv1d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell_1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell_1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell_1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "lstm_fused_cell_1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "dense/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "dense/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "dense/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "dense/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "crf/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "crf/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "signal_early_stopping/STOP"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@signal_early_stopping/STOP"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/IsVariableInitialized"
  input: "report_uninitialized_variables_1/IsVariableInitialized_1"
  input: "report_uninitialized_variables_1/IsVariableInitialized_2"
  input: "report_uninitialized_variables_1/IsVariableInitialized_3"
  input: "report_uninitialized_variables_1/IsVariableInitialized_4"
  input: "report_uninitialized_variables_1/IsVariableInitialized_5"
  input: "report_uninitialized_variables_1/IsVariableInitialized_6"
  input: "report_uninitialized_variables_1/IsVariableInitialized_7"
  input: "report_uninitialized_variables_1/IsVariableInitialized_8"
  input: "report_uninitialized_variables_1/IsVariableInitialized_9"
  input: "report_uninitialized_variables_1/IsVariableInitialized_10"
  input: "report_uninitialized_variables_1/IsVariableInitialized_11"
  input: "report_uninitialized_variables_1/IsVariableInitialized_12"
  input: "report_uninitialized_variables_1/IsVariableInitialized_13"
  input: "report_uninitialized_variables_1/IsVariableInitialized_14"
  input: "report_uninitialized_variables_1/IsVariableInitialized_15"
  input: "report_uninitialized_variables_1/IsVariableInitialized_16"
  input: "report_uninitialized_variables_1/IsVariableInitialized_17"
  input: "report_uninitialized_variables_1/IsVariableInitialized_18"
  input: "report_uninitialized_variables_1/IsVariableInitialized_19"
  input: "report_uninitialized_variables_1/IsVariableInitialized_20"
  input: "report_uninitialized_variables_1/IsVariableInitialized_21"
  input: "report_uninitialized_variables_1/IsVariableInitialized_22"
  input: "report_uninitialized_variables_1/IsVariableInitialized_23"
  input: "report_uninitialized_variables_1/IsVariableInitialized_24"
  input: "report_uninitialized_variables_1/IsVariableInitialized_25"
  input: "report_uninitialized_variables_1/IsVariableInitialized_26"
  input: "report_uninitialized_variables_1/IsVariableInitialized_27"
  input: "report_uninitialized_variables_1/IsVariableInitialized_28"
  input: "report_uninitialized_variables_1/IsVariableInitialized_29"
  input: "report_uninitialized_variables_1/IsVariableInitialized_30"
  input: "report_uninitialized_variables_1/IsVariableInitialized_31"
  input: "report_uninitialized_variables_1/IsVariableInitialized_32"
  input: "report_uninitialized_variables_1/IsVariableInitialized_33"
  input: "report_uninitialized_variables_1/IsVariableInitialized_34"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 35
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 35
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 35
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 35
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 35
          }
        }
        string_val: "global_step"
        string_val: "chars_embeddings"
        string_val: "conv1d/kernel"
        string_val: "conv1d/bias"
        string_val: "Variable"
        string_val: "lstm_fused_cell/kernel"
        string_val: "lstm_fused_cell/bias"
        string_val: "lstm_fused_cell_1/kernel"
        string_val: "lstm_fused_cell_1/bias"
        string_val: "dense/kernel"
        string_val: "dense/bias"
        string_val: "crf"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "chars_embeddings/Adam"
        string_val: "chars_embeddings/Adam_1"
        string_val: "conv1d/kernel/Adam"
        string_val: "conv1d/kernel/Adam_1"
        string_val: "conv1d/bias/Adam"
        string_val: "conv1d/bias/Adam_1"
        string_val: "lstm_fused_cell/kernel/Adam"
        string_val: "lstm_fused_cell/kernel/Adam_1"
        string_val: "lstm_fused_cell/bias/Adam"
        string_val: "lstm_fused_cell/bias/Adam_1"
        string_val: "lstm_fused_cell_1/kernel/Adam"
        string_val: "lstm_fused_cell_1/kernel/Adam_1"
        string_val: "lstm_fused_cell_1/bias/Adam"
        string_val: "lstm_fused_cell_1/bias/Adam_1"
        string_val: "dense/kernel/Adam"
        string_val: "dense/kernel/Adam_1"
        string_val: "dense/bias/Adam"
        string_val: "dense/bias/Adam_1"
        string_val: "crf/Adam"
        string_val: "crf/Adam_1"
        string_val: "signal_early_stopping/STOP"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 35
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 35
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 35
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 35
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 35
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat_3/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_3"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  input: "report_uninitialized_resources_1/Const"
  input: "concat_3/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
  input: "^accuracy/count/Assign"
  input: "^accuracy/total/Assign"
  input: "^total_confusion_matrix/Assign"
  input: "^total_confusion_matrix_1/Assign"
  input: "^total_confusion_matrix_2/Assign"
}
node {
  name: "init_all_tables"
  op: "NoOp"
  input: "^string_to_index/hash_table/table_init"
  input: "^string_to_index_1/hash_table/table_init"
  input: "^string_to_index_2/hash_table/table_init"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "acc"
  input: "precision"
  input: "recall"
  input: "f1"
  input: "loss"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_13b7e39e810c40b392fb92270b2da312/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 35
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 35
          }
        }
        string_val: "Variable"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "chars_embeddings"
        string_val: "chars_embeddings/Adam"
        string_val: "chars_embeddings/Adam_1"
        string_val: "conv1d/bias"
        string_val: "conv1d/bias/Adam"
        string_val: "conv1d/bias/Adam_1"
        string_val: "conv1d/kernel"
        string_val: "conv1d/kernel/Adam"
        string_val: "conv1d/kernel/Adam_1"
        string_val: "crf"
        string_val: "crf/Adam"
        string_val: "crf/Adam_1"
        string_val: "dense/bias"
        string_val: "dense/bias/Adam"
        string_val: "dense/bias/Adam_1"
        string_val: "dense/kernel"
        string_val: "dense/kernel/Adam"
        string_val: "dense/kernel/Adam_1"
        string_val: "global_step"
        string_val: "lstm_fused_cell/bias"
        string_val: "lstm_fused_cell/bias/Adam"
        string_val: "lstm_fused_cell/bias/Adam_1"
        string_val: "lstm_fused_cell/kernel"
        string_val: "lstm_fused_cell/kernel/Adam"
        string_val: "lstm_fused_cell/kernel/Adam_1"
        string_val: "lstm_fused_cell_1/bias"
        string_val: "lstm_fused_cell_1/bias/Adam"
        string_val: "lstm_fused_cell_1/bias/Adam_1"
        string_val: "lstm_fused_cell_1/kernel"
        string_val: "lstm_fused_cell_1/kernel/Adam"
        string_val: "lstm_fused_cell_1/kernel/Adam_1"
        string_val: "signal_early_stopping/STOP"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 35
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 35
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "Variable"
  input: "beta1_power"
  input: "beta2_power"
  input: "chars_embeddings"
  input: "chars_embeddings/Adam"
  input: "chars_embeddings/Adam_1"
  input: "conv1d/bias"
  input: "conv1d/bias/Adam"
  input: "conv1d/bias/Adam_1"
  input: "conv1d/kernel"
  input: "conv1d/kernel/Adam"
  input: "conv1d/kernel/Adam_1"
  input: "crf"
  input: "crf/Adam"
  input: "crf/Adam_1"
  input: "dense/bias"
  input: "dense/bias/Adam"
  input: "dense/bias/Adam_1"
  input: "dense/kernel"
  input: "dense/kernel/Adam"
  input: "dense/kernel/Adam_1"
  input: "global_step"
  input: "lstm_fused_cell/bias"
  input: "lstm_fused_cell/bias/Adam"
  input: "lstm_fused_cell/bias/Adam_1"
  input: "lstm_fused_cell/kernel"
  input: "lstm_fused_cell/kernel/Adam"
  input: "lstm_fused_cell/kernel/Adam_1"
  input: "lstm_fused_cell_1/bias"
  input: "lstm_fused_cell_1/bias/Adam"
  input: "lstm_fused_cell_1/bias/Adam_1"
  input: "lstm_fused_cell_1/kernel"
  input: "lstm_fused_cell_1/kernel/Adam"
  input: "lstm_fused_cell_1/kernel/Adam_1"
  input: "signal_early_stopping/STOP"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_BOOL
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 35
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 35
          }
        }
        string_val: "Variable"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "chars_embeddings"
        string_val: "chars_embeddings/Adam"
        string_val: "chars_embeddings/Adam_1"
        string_val: "conv1d/bias"
        string_val: "conv1d/bias/Adam"
        string_val: "conv1d/bias/Adam_1"
        string_val: "conv1d/kernel"
        string_val: "conv1d/kernel/Adam"
        string_val: "conv1d/kernel/Adam_1"
        string_val: "crf"
        string_val: "crf/Adam"
        string_val: "crf/Adam_1"
        string_val: "dense/bias"
        string_val: "dense/bias/Adam"
        string_val: "dense/bias/Adam_1"
        string_val: "dense/kernel"
        string_val: "dense/kernel/Adam"
        string_val: "dense/kernel/Adam_1"
        string_val: "global_step"
        string_val: "lstm_fused_cell/bias"
        string_val: "lstm_fused_cell/bias/Adam"
        string_val: "lstm_fused_cell/bias/Adam_1"
        string_val: "lstm_fused_cell/kernel"
        string_val: "lstm_fused_cell/kernel/Adam"
        string_val: "lstm_fused_cell/kernel/Adam_1"
        string_val: "lstm_fused_cell_1/bias"
        string_val: "lstm_fused_cell_1/bias/Adam"
        string_val: "lstm_fused_cell_1/bias/Adam_1"
        string_val: "lstm_fused_cell_1/kernel"
        string_val: "lstm_fused_cell_1/kernel/Adam"
        string_val: "lstm_fused_cell_1/kernel/Adam_1"
        string_val: "signal_early_stopping/STOP"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 35
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 35
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_BOOL
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "Variable"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 66
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "beta1_power"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "beta2_power"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "chars_embeddings"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 36
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "chars_embeddings/Adam"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 36
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "chars_embeddings/Adam_1"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 36
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "conv1d/bias"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "conv1d/bias/Adam"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "conv1d/bias/Adam_1"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "conv1d/kernel"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 100
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "conv1d/kernel/Adam"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 100
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "conv1d/kernel/Adam_1"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 100
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "crf"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "crf/Adam"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "crf/Adam_1"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@crf"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "dense/bias"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "dense/bias/Adam"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "dense/bias/Adam_1"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "dense/kernel"
  input: "save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "dense/kernel/Adam"
  input: "save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "dense/kernel/Adam_1"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "lstm_fused_cell/bias"
  input: "save/RestoreV2:22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_23"
  op: "Assign"
  input: "lstm_fused_cell/bias/Adam"
  input: "save/RestoreV2:23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_24"
  op: "Assign"
  input: "lstm_fused_cell/bias/Adam_1"
  input: "save/RestoreV2:24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_25"
  op: "Assign"
  input: "lstm_fused_cell/kernel"
  input: "save/RestoreV2:25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 450
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_26"
  op: "Assign"
  input: "lstm_fused_cell/kernel/Adam"
  input: "save/RestoreV2:26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 450
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_27"
  op: "Assign"
  input: "lstm_fused_cell/kernel/Adam_1"
  input: "save/RestoreV2:27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 450
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_28"
  op: "Assign"
  input: "lstm_fused_cell_1/bias"
  input: "save/RestoreV2:28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_29"
  op: "Assign"
  input: "lstm_fused_cell_1/bias/Adam"
  input: "save/RestoreV2:29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_30"
  op: "Assign"
  input: "lstm_fused_cell_1/bias/Adam_1"
  input: "save/RestoreV2:30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_31"
  op: "Assign"
  input: "lstm_fused_cell_1/kernel"
  input: "save/RestoreV2:31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 450
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_32"
  op: "Assign"
  input: "lstm_fused_cell_1/kernel/Adam"
  input: "save/RestoreV2:32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 450
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_33"
  op: "Assign"
  input: "lstm_fused_cell_1/kernel/Adam_1"
  input: "save/RestoreV2:33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_fused_cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 450
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_34"
  op: "Assign"
  input: "signal_early_stopping/STOP"
  input: "save/RestoreV2:34"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@signal_early_stopping/STOP"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_2"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
  input: "^save/Assign_23"
  input: "^save/Assign_24"
  input: "^save/Assign_25"
  input: "^save/Assign_26"
  input: "^save/Assign_27"
  input: "^save/Assign_28"
  input: "^save/Assign_29"
  input: "^save/Assign_3"
  input: "^save/Assign_30"
  input: "^save/Assign_31"
  input: "^save/Assign_32"
  input: "^save/Assign_33"
  input: "^save/Assign_34"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
library {
  function {
    signature {
      name: "Dataset_flat_map_flat_map_fn_21"
      input_arg {
        name: "arg0"
        type: DT_INT32
      }
      output_arg {
        name: "generatordataset"
        type: DT_VARIANT
      }
      description: "Wrapper for passing nested structures to and from tf.data functions."
      is_stateful: true
    }
    node_def {
      name: "GeneratorDataset"
      op: "GeneratorDataset"
      input: "arg0"
      device: "/device:CPU:0"
      attr {
        key: "Tfinalize_func_args"
        value {
          list {
          }
        }
      }
      attr {
        key: "Tinit_func_args"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "Tnext_func_args"
        value {
          list {
          }
        }
      }
      attr {
        key: "finalize_func"
        value {
          func {
            name: "Dataset_from_generator_finalize_fn_36"
          }
        }
      }
      attr {
        key: "init_func"
        value {
          func {
            name: "Dataset_from_generator_get_iterator_id_fn_24"
          }
        }
      }
      attr {
        key: "next_func"
        value {
          func {
            name: "Dataset_from_generator_generator_next_fn_28"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
          }
        }
      }
    }
    ret {
      key: "generatordataset"
      value: "GeneratorDataset:handle:0"
    }
  }
  function {
    signature {
      name: "Dataset_from_generator_finalize_fn_36"
      input_arg {
        name: "arg0"
        type: DT_INT64
      }
      output_arg {
        name: "pyfunc"
        type: DT_INT64
      }
      description: "Wrapper for passing nested structures to and from tf.data functions."
      is_stateful: true
    }
    node_def {
      name: "PyFunc"
      op: "PyFunc"
      input: "arg0"
      device: "/device:CPU:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "token"
        value {
          s: "pyfunc_2"
        }
      }
    }
    ret {
      key: "pyfunc"
      value: "PyFunc:output:0"
    }
  }
  function {
    signature {
      name: "Dataset_from_generator_get_iterator_id_fn_24"
      input_arg {
        name: "arg0"
        type: DT_INT32
      }
      output_arg {
        name: "pyfunc"
        type: DT_INT64
      }
      description: "Wrapper for passing nested structures to and from tf.data functions."
      is_stateful: true
    }
    node_def {
      name: "PyFunc"
      op: "PyFunc"
      device: "/device:CPU:0"
      attr {
        key: "Tin"
        value {
          list {
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "token"
        value {
          s: "pyfunc_0"
        }
      }
    }
    ret {
      key: "pyfunc"
      value: "PyFunc:output:0"
    }
  }
  function {
    signature {
      name: "Dataset_from_generator_generator_next_fn_28"
      input_arg {
        name: "arg0"
        type: DT_INT64
      }
      output_arg {
        name: "pyfunc"
        type: DT_STRING
      }
      output_arg {
        name: "pyfunc_0"
        type: DT_INT32
      }
      output_arg {
        name: "pyfunc_1"
        type: DT_STRING
      }
      output_arg {
        name: "pyfunc_2"
        type: DT_INT32
      }
      output_arg {
        name: "pyfunc_3"
        type: DT_STRING
      }
      description: "Wrapper for passing nested structures to and from tf.data functions."
      is_stateful: true
    }
    node_def {
      name: "PyFunc"
      op: "PyFunc"
      input: "arg0"
      device: "/device:CPU:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
          }
        }
      }
      attr {
        key: "token"
        value {
          s: "pyfunc_1"
        }
      }
    }
    ret {
      key: "pyfunc"
      value: "PyFunc:output:0"
    }
    ret {
      key: "pyfunc_0"
      value: "PyFunc:output:1"
    }
    ret {
      key: "pyfunc_1"
      value: "PyFunc:output:2"
    }
    ret {
      key: "pyfunc_2"
      value: "PyFunc:output:3"
    }
    ret {
      key: "pyfunc_3"
      value: "PyFunc:output:4"
    }
  }
}
versions {
  producer: 27
  min_consumer: 12
}
